import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
buildscript {
	ext {
		springBootVersion = '3.3.2'
		springCloudVersion = '4.1.3'
		groovyVersion = '4.0.21'
		spockVersion = '2.4-M1-groovy-4.0'
		jdkVersion = '17'
		repoName = 'zions-re-blueprint-request-microservice'
	}
	repositories {
		if ("${queue}" == 'Hosted') {
			mavenCentral()
			jcenter()
		}
		flatDir { dirs "libs" }
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath 'org.ajoberstar:gradle-git-publish:2.1.3'
		classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
		classpath 'gradle.plugin.io.errorlab.gradle.vault:vault:0.1.0'
		classpath 'com.github.qwazer:markdown-confluence-gradle-plugin:0.9.2'
		classpath "org.springframework.cloud:spring-cloud-dependencies:2023.0.3"
		classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:3.0.0"
		classpath 'com.zions.dts.services:zions-boot:latest.release'
	}
}
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'
apply plugin: 'com.github.qwazer.markdown-confluence'
apply plugin: 'com.google.cloud.tools.jib'
InputStream istream = this.getClass().getResourceAsStream('/bootstrap.properties')
if (istream != null) {
	apply plugin: 'io.errorlab.gradle.vault'
	Properties props = new Properties()
	props.load(istream)
	props.each { prop ->
		project.ext.set(prop.key, prop.value)
	}
	vault {
		addr = "${project.'vault.url'}"
		token = "${project.'spring.cloud.vault.token'}"
	}
	def secrets = project.vault.get('secret/data/zions-service-framework')
	if (secrets) {
		def jsonText = new JsonBuilder(secrets).toPrettyString()
		def vaultData = new JsonSlurper().parseText(jsonText)
		project.ext.set('secretData', vaultData)
		String confluenceauth = "${project.secretData.data.data['confluence.user']}:${project.secretData.data.data['confluence.password']}".bytes.encodeBase64()
		confluence {
			authentication "${confluenceauth}"
			//restApiUrl 'http://utmvpw0054:8090/rest/api/'
			restApiUrl 'https://zionsconfluence.cs.zionsbank.com/rest/api/'
			spaceKey 'SCM'
			sslTrustAll true
			//pageVariables = ['project.name': project.name]
			parseTimeout 2000L
		}
		//System.setProperty('org.ajoberstar.grgit.auth.username', "${project.secretData.data.data['doc.token']}")
		test {
			//String activeProfile =  System.properties['spring.profiles.active']
			doFirst {
				mkdir "build/spock"
			}
			systemProperty "spring.profiles.active", 'test'
			useJUnitPlatform()
		}
		tasks {
			build {
				dependsOn(tasks.jib)
			}
		}
		jib {
			from {
				image = "${registryHostUrl}/dts/base-images/openjdk17:latest"
			}
			to {
				image = "${registryHostUrl}/dts/re-blueprintrequest"
				tags = [project.version]
				auth {
				  username = "${project.secretData.data.data['nexus.docker.user']}"
				  password = "${project.secretData.data.data['nexus.docker.password']}"
				}
			}
			container {
				appRoot = '/app'
				environment = ['TZ':'MST7MDT']
				jvmFlags = ['-Xms360m', '-Xmx360m', 
					        '-Dspring.profiles.active=' + project.targetProfile, 
							'-Dproxy.Host=proxy.cs.zionsbank.com', 
							'-Dproxy.Port=8080', 
							'-Dproxy.User=', 
							'-Dproxy.Password=']
				workingDirectory = '/app'
			}
			allowInsecureRegistries = false
		}
	}
}
ext['groovy.version'] = '4.0.21'
sourceCompatibility = 17
targetCompatibility = 17
repositories {
	if ("${queue}" == 'Hosted') {
		mavenCentral()
		maven {
			name 'spring'
			url "http://repo.spring.io/plugins-release/"
		}
	}
	mavenLocal()
	maven {
		name 'ZionsNexusPublicSnapshots'
		url "${nexusUrl}/repository/public-snapshots/"
	}
	maven {
		name 'ZionsNexusPublic'
		url "${nexusUrl}/repository/public/"
	}
	//mavenCentral()
	maven {
		url 'https://dist.xebialabs.com/public/maven2'
	}
}
dependencies {
	implementation("org.springframework.cloud:spring-cloud-starter-vault-config:${springCloudVersion}")
	implementation "org.springframework.cloud:spring-cloud-starter-bootstrap:${springCloudVersion}"
	implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
	implementation "org.apache.groovy:groovy-dateutil:${groovyVersion}"
	implementation "org.apache.groovy:groovy-yaml:${groovyVersion}"
	implementation "org.apache.groovy:groovy-xml:${groovyVersion}"
	implementation "org.apache.groovy:groovy-json:${groovyVersion}"
	implementation "org.apache.groovy:groovy-sql:${groovyVersion}"
	implementation "org.apache.groovy:groovy-ant:${groovyVersion}"
	
	
	
	
	
		implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}"
	
	
	
		implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
		implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
	
			
		implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.0'
	
	
//
	implementation "org.apache.groovy:groovy:${groovyVersion}"
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
	implementation 'org.apache.ivy:ivy:2.5.2'
	implementation 'bsf:bsf:2.4.0'
	implementation 'commons-cli:commons-cli:1.3.1'
	implementation 'net.sf.json-lib:json-lib:2.3:jdk15'
	constraints {
		implementation 'commons-beanutils:commons-beanutils:1.9.4'
		implementation 'commons-collections:commons-collections:20030418.083655'
	}
	implementation 'com.zions.dts.services:zions-boot:latest.release'
	
	testImplementation(
			"org.springframework.boot:spring-boot-starter:${springBootVersion}",
			"org.springframework.boot:spring-boot-starter-test:${springBootVersion}",
	        "org.springframework.cloud:spring-cloud-starter-vault-config:$springCloudVersion}",
			'cglib:cglib-nodep:3.1',
			'org.objenesis:objenesis:2.4',
			"org.spockframework:spock-core:${spockVersion}",
			"org.spockframework:spock-spring:${spockVersion}",
			"io.github.joke:spock-outputcapture:4.0.1")
			
	testImplementation group: 'com.github.fridujo', name: 'rabbitmq-mock', version: '1.2.0'
	
	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	if (context && context == 'release') {
		implementation "com.zions.dts.services:zions-pipeline-services:${libraryVersion}"
		implementation "com.zions.dts.services:zions-xld-services:${libraryVersion}"
		implementation "com.zions.dts.services:zions-xlr-services:${libraryVersion}"
		implementation "com.zions.dts.services:zions-vsts-services:${libraryVersion}"
		implementation "com.zions.dts.services:zions-vsts-microservice:${libraryVersion}"
		implementation "com.zions.dts.services:zions-common:${libraryVersion}"
		implementation "com.zions.dts.services:zions-nexusiq-services:${libraryVersion}"
//		implementation "com.zions.dts.services:zions-common-data:${libraryVersion}"
	} else {
		implementation project(':zions-pipeline-services')
		implementation project(':zions-xld-services')
		implementation project(':zions-xlr-services')
		implementation project(':zions-vsts-services')
		implementation project(':zions-nexusiq-services')
		implementation project(':zions-vsts-microservice')
		implementation project(':zions-common')
		implementation project(':zions-common-data')
		
	}
}
bootJar {
	enabled = true
	//mainClassName = 'null'
	archiveName = 'zions-re-blueprint-request-microservice.jar'
}
configurations {
	runtime.exclude module: 'zions-common-data'
}
configurations {
	all*.exclude group: 'commons-logging', module: 'commons-logging'
}
	
configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.springframework' && details.requested.name == 'spring-web') {
			details.useVersion '6.1.12'
		}
		else if (details.requested.group == 'org.xmlunit' && details.requested.name == 'xmlunit-core') {
			details.useVersion '2.10.0'
		}
		else if (details.requested.group == 'org.apache.commons' && details.requested.name == 'commons-compress') {
			details.useVersion '1.26.0'
		}
		else if (details.requested.group == 'io.netty' && details.requested.name == 'netty-handler') {
			details.useVersion '4.1.107.Final'
		}
		else if (details.requested.group == 'org.springframework' && details.requested.name == 'spring-webmvc') {
			details.useVersion '6.1.13'
		}
		else if (details.requested.group == 'org.apache.poi' && details.requested.name == 'poi-ooxml') {
			details.useVersion '5.3.0'
		}
		else if (details.requested.group == 'org.apache.poi' && details.requested.name == 'poi') {
			details.useVersion '5.3.0'
		}
	}
}
configurations {
	all*.exclude group: 'org.jyaml', module: 'jyaml'
}
boolean doDebug = false
if ("${debugTests}" == 'true') {
	doDebug = true
}
test {
	
	environment 'proxy.Host', 'proxy.cs.zionsbank.com'
	environment 'proxy.Port', '8080'
	environment 'HTTP_PROXY', 'http://proxy.cs.zionsbank.com:8080'
	environment 'HTTPS_PROXY', 'http://proxy.cs.zionsbank.com:8080'
			
	//String activeProfile =  System.properties['spring.profiles.active']
	doFirst {
		mkdir "build/spock"
	}
	//systemProperty "spring.profiles.active", 'test'
	useJUnitPlatform()
	debug doDebug
}
if (!context || context != 'release' || false) {
	allprojects {
		apply plugin: 'org.springframework.boot'
		apply plugin: 'io.spring.dependency-management'
		apply plugin: 'groovy'
		//	apply plugin: 'gplantuml'
		//	apply plugin: 'mdplantuml'
		
	
		ext['groovy.version'] = '4.0.21'
		
		//version = '1.0.0-SNAPSHOT'
		sourceCompatibility = 17
		targetCompatibility = 17
	
		repositories {
			if ("${queue}" == 'Hosted') {
				mavenCentral()
				maven {
					name 'spring'
					url "http://repo.spring.io/plugins-release/"
				}
			}
			mavenLocal()
			maven {
				name 'ZionsNexusPublicSnapshots'
				url "${nexusUrl}/repository/public-snapshots/"
			}
			maven {
				name 'ZionsNexusPublic'
				url "${nexusUrl}/repository/public/"
			}
			//mavenCentral()
			maven {
				url 'https://dist.xebialabs.com/public/maven2'
			}
		}
	
		dependencies {
			// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
			// https://mvnrepository.com/artifact/com.github.rholder/gradle-one-jar
			implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
			implementation("org.springframework.cloud:spring-cloud-starter-vault-config:${springCloudVersion}")
			implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.1'
			implementation "org.apache.groovy:groovy-dateutil:${groovyVersion}"
			implementation "org.apache.groovy:groovy-yaml:${groovyVersion}"
			implementation "org.apache.groovy:groovy-xml:${groovyVersion}"
			implementation "org.apache.groovy:groovy-json:${groovyVersion}"
			implementation "org.apache.groovy:groovy-sql:${groovyVersion}"
			implementation "org.apache.groovy:groovy:${groovyVersion}"
			implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
			implementation 'org.apache.ivy:ivy:2.4.0'
			implementation 'bsf:bsf:2.4.0'
			implementation 'commons-io:commons-io:2.11.0'
			implementation 'commons-cli:commons-cli:1.3.1'
			implementation 'commons-lang:commons-lang:2.6'
			constraints {
				// Upgrade commons libraries that have vulnerabilities
				//implementation('net.sf.json-lib:json-lib:2.3')
				constraints {
					implementation 'commons-beanutils:commons-beanutils:1.9.4'
					implementation 'commons-collections:commons-collections:20030418.083655'
				}
			}
		
	
			testImplementation(
					'org.springframework.boot:spring-boot-starter-test:3.3.2',
					'org.springframework:spring-mock:2.0.8',
					'cglib:cglib-nodep:3.1',
					'org.objenesis:objenesis:2.4',
					"org.spockframework:spock-core:2.4-M1-groovy-4.0",
					"org.spockframework:spock-spring:2.4-M1-groovy-4.0")
		}
	
//		dependencyManagement {
//			imports {
//				mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//			}
//		}
		test {
			//String activeProfile =  System.properties['spring.profiles.active']
			doFirst {
				mkdir "build/spock"
			}
			systemProperty "spring.profiles.active", 'test'
			useJUnitPlatform()
		}
		        
        configurations.all {
        	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        		if (details.requested.group == 'org.springframework' && details.requested.name == 'spring-web') {
        			details.useVersion '6.1.12'
        		}
        		else if (details.requested.group == 'org.xmlunit' && details.requested.name == 'xmlunit-core') {
        			details.useVersion '2.10.0'
        		}
        		else if (details.requested.group == 'org.apache.commons' && details.requested.name == 'commons-compress') {
        			details.useVersion '1.26.0'
        		}
        		else if (details.requested.group == 'io.netty' && details.requested.name == 'netty-handler') {
        			details.useVersion '4.1.107.Final'
        		}
        		else if (details.requested.group == 'org.springframework' && details.requested.name == 'spring-webmvc') {
        			details.useVersion '6.1.13'
        		}
        		else if (details.requested.group == 'org.apache.poi' && details.requested.name == 'poi-ooxml') {
        			details.useVersion '5.3.0'
        		}
        		else if (details.requested.group == 'org.apache.poi' && details.requested.name == 'poi') {
        			details.useVersion '5.3.0'
        		}
        	}
        
        }
        configurations {
        	all*.exclude group: 'org.jyaml', module: 'jyaml'
        }
		
	}
}
	
	