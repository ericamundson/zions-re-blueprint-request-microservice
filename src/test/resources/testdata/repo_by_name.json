{
  "name": "zions-blueprints",
  "url": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
  "repo": {
    "name": "zions-blueprints",
    "folders": [
      {
        "name": "9.0.7",
        "title": "9.0.7",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "aem",
            "title": "aem",
            "parentName": "9.0.7",
            "folders": [
              {
                "name": "project",
                "title": "project",
                "parentName": "aem",
                "folders": [],
                "blueprints": [
                  {
                    "title": "AEM-Project",
                    "type": "XL",
                    "description": "This blueprint deploys an AEM project generated with maven, to an AEM environment.\nXL Deploy does the provisioning and deployment, while XL Release orchestrates everything.\n",
                    "path": "9.0.7/aem",
                    "name": "project",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false,
                      "allowedProjects": [
                        "DTS",
                        "WebCMS"
                      ]
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "project",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the base name of the AEM project?"
                      },
                      {
                        "bpKey": "project",
                        "name": "AEMVersion",
                        "type": "Input",
                        "prompt": "What is the AEM version of the AEM project?"
                      },
                      {
                        "bpKey": "project",
                        "name": "RepoName",
                        "type": "Input",
                        "prompt": "What is the name of the ADO repository?"
                      },
                      {
                        "bpKey": "project",
                        "name": "TagNamePrefix",
                        "type": "Select",
                        "prompt": "Select tag name prefix for XL Deploy:",
                        "adefault": "charlie",
                        "options": [
                          {
                            "label": "CHARLIE (Public Websites)",
                            "value": "charlie"
                          },
                          {
                            "label": "BRAVO (NAOP)",
                            "value": "bravo"
                          }
                        ]
                      },
                      {
                        "bpKey": "project",
                        "name": "HasAppComponent",
                        "type": "Confirm",
                        "prompt": "Does this AEM project have an application Component?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "project",
                        "name": "HasHTTPDComponent",
                        "type": "Confirm",
                        "prompt": "Does this AEM project have an httpd Component?",
                        "adefault": "false"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "project2",
                "title": "project2",
                "parentName": "aem",
                "folders": [],
                "blueprints": [
                  {
                    "title": "AEM-Project2",
                    "type": "XL",
                    "description": "This blueprint deploys an AEM project generated with maven, to an AEM environment.\nXL Deploy does the provisioning and deployment, while XL Release orchestrates everything.\n",
                    "path": "9.0.7/aem",
                    "name": "project2",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false,
                      "allowedProjects": [
                        "DTS",
                        "WebCMS"
                      ]
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "project2",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the base name of the AEM project?"
                      },
                      {
                        "bpKey": "project2",
                        "name": "AEMVersion",
                        "type": "Select",
                        "prompt": "Select the AEM version for this AEM project?",
                        "adefault": "6.4",
                        "options": [
                          "6.4"
                        ]
                      },
                      {
                        "bpKey": "project2",
                        "name": "RepoName",
                        "type": "Input",
                        "prompt": "What is the name of the ADO repository?"
                      },
                      {
                        "bpKey": "project2",
                        "name": "TagNamePrefix",
                        "type": "Select",
                        "prompt": "Select tag name prefix for XL Deploy:",
                        "adefault": "charlie",
                        "options": [
                          {
                            "label": "CHARLIE (Public Websites)",
                            "value": "charlie"
                          },
                          {
                            "label": "BRAVO (NAOP)",
                            "value": "bravo"
                          }
                        ]
                      },
                      {
                        "bpKey": "project2",
                        "name": "HasAppComponent",
                        "type": "Confirm",
                        "prompt": "Does this AEM project have an application Component?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "project2",
                        "name": "HasHTTPDComponent",
                        "type": "Confirm",
                        "prompt": "Does this AEM project have an httpd Component?",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "project2",
                        "name": "HasTests",
                        "type": "Confirm",
                        "prompt": "Does this AEM project have tests to publish?",
                        "adefault": "false"
                      }
                    ]
                  }
                ]
              }
            ],
            "blueprints": []
          },
          {
            "name": "blueprint-skeleton",
            "title": "blueprint-skeleton",
            "parentName": "9.0.7",
            "folders": [],
            "blueprints": [
              {
                "title": "Blueprint-Skeleton-Generator",
                "type": "XL",
                "description": "Creates a blueprint skeleton directory\n",
                "path": "9.0.7",
                "name": "blueprint-skeleton",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "isVisible": false
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "blueprintskeleton",
                    "name": "BlueprintName",
                    "type": "Input",
                    "prompt": "Name of the blueprint:",
                    "description": "Use kebabcase (lowercase letters, number and hypens only) e.g. this-useful-blueprint",
                    "validate": "-expr \"regex('^[a-z0-9][a-z0-9-]+[a-z0-9]$', BlueprintName)\""
                  },
                  {
                    "bpKey": "blueprintskeleton",
                    "name": "Description",
                    "type": "Input",
                    "prompt": "Brief description of the blueprint:"
                  },
                  {
                    "bpKey": "blueprintskeleton",
                    "name": "Instructions",
                    "type": "Input",
                    "prompt": "Usage instructions for when blueprint finishes:"
                  }
                ]
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "checkmarx",
        "title": "checkmarx",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "cxflow-cx.config",
            "title": "cxflow-cx.config",
            "parentName": "checkmarx",
            "folders": [],
            "blueprints": [
              {
                "title": "Cxflow cx.config",
                "type": "XL",
                "description": "Creates the cxflow cx.config in a repository.\n",
                "path": "checkmarx",
                "name": "cxflow-cx.config",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Enter the ADO project area name",
                    "description": "Azure DevOps project area name used for this blueprint."
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "Enter the ADO repository name",
                    "description": "Azure DevOps repository name used for this blueprint."
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "CheckmarxTeamName",
                    "type": "Input",
                    "prompt": "Enter the Checkmarx team name",
                    "description": "Checkmarx team name used for this blueprint.",
                    "adefault": "Zions"
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "FolderExcludes",
                    "type": "Input",
                    "prompt": "Enter the folders to be excluded by sast, If 'n/a' then sast will not set folderExcludes=value.",
                    "description": "Comma delimited list of folders to exclude from sast.",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "SastForceScan",
                    "type": "Select",
                    "prompt": "Select the value to determine if sast is forced or not, If 'n/a' then sast will not set forceScan=value.",
                    "description": "Will sast be a forced scan.",
                    "adefault": "n/a",
                    "options": [
                      "n/a",
                      "true",
                      "false"
                    ]
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "SastIncremental",
                    "type": "Select",
                    "prompt": "Select the value to determine if sast is incremental or not, If 'n/a' then sast will not set incremental=value.",
                    "description": "Will sast be an incremental scan.",
                    "adefault": "n/a",
                    "options": [
                      "n/a",
                      "true",
                      "false"
                    ]
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "Branches",
                    "type": "Input",
                    "prompt": "Enter the branches targeted by cxFlow.",
                    "description": "Comma delimited list of branches targeted by cxFlow.",
                    "adefault": "master"
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "SeverityFilters",
                    "type": "Input",
                    "prompt": "Enter the filtered severities to be used by cxFlow, If 'n/a' then cxFlow will not set filter:severity. Example: High, Medium, Low",
                    "description": "Comma delimited list of cxflow filtered severities.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^((High|Medium|Low)[,]*)+$', SeverityFilters)\""
                  },
                  {
                    "bpKey": "cxflowcxconfig",
                    "name": "Thresholds",
                    "type": "Input",
                    "prompt": "Enter the thresholds to be used by cxFlow, If 'n/a' then cxFlow will not set threshold. Example: HIGH:0,MEDIUM:5,LOW:8",
                    "description": "Comma delimited list of cxflow threshold pairs.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^((HIGH|MEDIUM|LOW):[0-9]+[,]*)+$', Thresholds)\""
                  }
                ]
              }
            ]
          },
          {
            "name": "cxflow-cx.config-g",
            "title": "cxflow-cx.config-g",
            "parentName": "checkmarx",
            "folders": [],
            "blueprints": [
              {
                "title": "Cxflow cx.config (groovy)",
                "type": "Groovy",
                "description": "Creates the cxflow cx.config in a repository.  It also updates mongodb entry.\n",
                "path": "checkmarx",
                "name": "cxflow-cx.config-g",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Enter the ADO project area name",
                    "description": "Azure DevOps project area name used for this blueprint."
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "Enter the ADO repository name",
                    "description": "Azure DevOps repository name used for this blueprint."
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "CheckmarxTeamName",
                    "type": "Input",
                    "prompt": "Enter the Checkmarx team name",
                    "description": "Checkmarx team name used for this blueprint.",
                    "adefault": "Zions"
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "FolderExcludes",
                    "type": "Input",
                    "prompt": "Enter the folders to be excluded by sast, If 'n/a' then sast will not set folderExcludes=value.",
                    "description": "Comma delimited list of folders to exclude from sast.",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "SastForceScan",
                    "type": "Select",
                    "prompt": "Select the value to determine if sast is forced or not, If 'n/a' then sast will not set forceScan=value.",
                    "description": "Will sast be a forced scan.",
                    "adefault": "n/a",
                    "options": [
                      "n/a",
                      "true",
                      "false"
                    ]
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "SastIncremental",
                    "type": "Select",
                    "prompt": "Select the value to determine if sast is incremental or not, If 'n/a' then sast will not set incremental=value.",
                    "description": "Will sast be an incremental scan.",
                    "adefault": "n/a",
                    "options": [
                      "n/a",
                      "true",
                      "false"
                    ]
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "Branches",
                    "type": "Input",
                    "prompt": "Enter the branches targeted by cxFlow.",
                    "description": "Comma delimited list of branches targeted by cxFlow.",
                    "adefault": "master"
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "SeverityFilters",
                    "type": "Input",
                    "prompt": "Enter the filtered severities to be used by cxFlow, If 'n/a' then cxFlow will not set filter:severity. Example: High, Medium, Low",
                    "description": "Comma delimited list of cxflow filtered severities.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^((High|Medium|Low)[,]*)+$', SeverityFilters)\""
                  },
                  {
                    "bpKey": "cxflowcxconfigg",
                    "name": "Thresholds",
                    "type": "Input",
                    "prompt": "Enter the thresholds to be used by cxFlow, If 'n/a' then cxFlow will not set threshold. Example: HIGH:0,MEDIUM:5,LOW:8",
                    "description": "Comma delimited list of cxflow threshold pairs.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^((HIGH|MEDIUM|LOW):[0-9]+[,]*)+$', Thresholds)\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Checkmarx%3A+Cxflow-cx.config",
                "commitPatterns": "cx.config",
                "pullRequestReviewers": "@me"
              }
            ]
          },
          {
            "name": "cxflow-cx.config-multirepo-g",
            "title": "cxflow-cx.config-multirepo-g",
            "parentName": "checkmarx",
            "folders": [],
            "blueprints": [
              {
                "title": "Cxflow cx.config on repo list",
                "type": "Groovy",
                "description": "Creates the cxflow cx.config in a list of repositories.\n",
                "path": "checkmarx",
                "name": "cxflow-cx.config-multirepo-g",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "cxflowcxconfigmultirepog",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Enter the ADO project area name",
                    "description": "Azure DevOps project area name used for this blueprint."
                  },
                  {
                    "bpKey": "cxflowcxconfigmultirepog",
                    "name": "RepoNames",
                    "type": "Repeat",
                    "prompt": "Enter a comma delimited list of ADO repositories",
                    "description": "Azure DevOps repository names used for this blueprint.",
                    "repeatDelimiter": ",",
                    "indexParameter": "RepoName",
                    "repeatParameters": [
                      {
                        "name": "RepoName",
                        "type": "Input",
                        "prompt": "Enter the ADO repository name",
                        "description": "Azure DevOps repository name used for this blueprint."
                      },
                      {
                        "name": "CheckmarxTeamName",
                        "type": "Input",
                        "prompt": "Enter the Checkmarx team name",
                        "description": "Checkmarx team name used for this blueprint.",
                        "adefault": "Zions"
                      },
                      {
                        "name": "FolderExcludes",
                        "type": "Input",
                        "prompt": "Enter the folders to be excluded by sast, If 'n/a' then sast will not set folderExcludes=value.",
                        "description": "Comma delimited list of folders to exclude from sast.",
                        "adefault": "n/a"
                      },
                      {
                        "name": "SastForceScan",
                        "type": "Select",
                        "prompt": "Select the value to determine if sast is forced or not, If 'n/a' then sast will not set forceScan=value.",
                        "description": "Will sast be a forced scan.",
                        "adefault": "n/a",
                        "options": [
                          "n/a",
                          "true",
                          "false"
                        ]
                      },
                      {
                        "name": "SastIncremental",
                        "type": "Select",
                        "prompt": "Select the value to determine if sast is incremental or not, If 'n/a' then sast will not set incremental=value.",
                        "description": "Will sast be an incremental scan.",
                        "adefault": "n/a",
                        "options": [
                          "n/a",
                          "true",
                          "false"
                        ]
                      },
                      {
                        "name": "Branches",
                        "type": "Input",
                        "prompt": "Enter the branches targeted by cxFlow.",
                        "description": "Comma delimited list of branches targeted by cxFlow.",
                        "adefault": "master"
                      },
                      {
                        "name": "SeverityFilters",
                        "type": "Input",
                        "prompt": "Enter the filtered severities to be used by cxFlow, If 'n/a' then cxFlow will not set filter:severity. Example: High, Medium, Low",
                        "description": "Comma delimited list of cxflow filtered severities.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^((High|Medium|Low)[,]*)+$', SeverityFilters)\""
                      },
                      {
                        "name": "Thresholds",
                        "type": "Input",
                        "prompt": "Enter the thresholds to be used by cxFlow, If 'n/a' then cxFlow will not set threshold. Example: HIGH:0,MEDIUM:5,LOW:8",
                        "description": "Comma delimited list of cxflow threshold pairs.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^((HIGH|MEDIUM|LOW):[0-9]+[,]*)+$', Thresholds)\""
                      }
                    ]
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Checkmarx%3A+Cxflow-cx.config"
              }
            ]
          },
          {
            "name": "cxflow-service-hook",
            "title": "cxflow-service-hook",
            "parentName": "checkmarx",
            "folders": [],
            "blueprints": [
              {
                "title": "Cxflow Service Hook",
                "type": "XL",
                "description": "enables setting up cxflow service hook on projects or individual repos.\n",
                "path": "checkmarx",
                "name": "cxflow-service-hook",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "ProjectName",
                  "RepoName"
                ],
                "outRepoName": "devops",
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "cxflowservicehook",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the devops repos to be registered for cxflow?"
                  },
                  {
                    "bpKey": "cxflowservicehook",
                    "name": "RepoNames",
                    "type": "Editor",
                    "prompt": "What is list of repositories, If set to 'all', then all repos in project will be registered."
                  },
                  {
                    "bpKey": "cxflowservicehook",
                    "name": "CxflowUrl",
                    "type": "Select",
                    "prompt": "Select Cx-flow URL.",
                    "adefault": "https://cxflow-zionsbancorporation.msappproxy.net/ado/pull",
                    "options": [
                      {
                        "label": "Cxflow CS",
                        "value": "https://cxflow-zionsbancorporation.msappproxy.net/ado/pull"
                      },
                      {
                        "label": "Cxflow TestQA",
                        "value": "https://cxflowtest-zionsbancorporation.msappproxy.net/ado/pull"
                      }
                    ]
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Checkmarx%3A+Cxflow+Service+Hook"
              }
            ]
          },
          {
            "name": "delete-cxconfig",
            "title": "delete-cxconfig",
            "parentName": "checkmarx",
            "folders": [],
            "blueprints": [
              {
                "title": "Delete Cxconfig",
                "type": "Groovy",
                "description": "This will delete cx.config for GIT repositories that don't require it.",
                "path": "checkmarx",
                "name": "delete-cxconfig",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": true,
                "parameters": [
                  {
                    "type": "Input",
                    "indexParameter": null,
                    "repeatDelimiter": null,
                    "promptIf": null,
                    "adefault": null,
                    "options": null,
                    "prompt": null,
                    "validate": null,
                    "label": null,
                    "description": "The name of ADO project",
                    "name": "ProjectName",
                    "repeatParameters": null,
                    "bpKey": null
                  },
                  {
                    "type": "Input",
                    "indexParameter": null,
                    "repeatDelimiter": null,
                    "promptIf": null,
                    "adefault": null,
                    "options": null,
                    "prompt": null,
                    "validate": null,
                    "label": null,
                    "description": "The name of ADO GIT repository",
                    "name": "RepoName",
                    "repeatParameters": null,
                    "bpKey": null
                  }
                ],
                "commitPatterns": "cx.config",
                "builderName": "deleteCxconfig"
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "common",
        "title": "common",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "project-ado-composite",
            "title": "project-ado-composite",
            "parentName": "common",
            "folders": [],
            "blueprints": [
              {
                "title": "Project ADO Composite",
                "type": "XL",
                "description": "A set of build type implementations to be used project wide.\n",
                "path": "common",
                "name": "project-ado-composite",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "AppArea"
                ],
                "cacheKey": [
                  "RepoName",
                  "AppArea"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS",
                    "Sandbox",
                    "CorpSvcs"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectadocomposite",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?",
                    "description": "The ADO project that will contain generated ADO pipeline templates."
                  },
                  {
                    "bpKey": "projectadocomposite",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO repository?",
                    "description": "The output repository for placing blueprint generated files.",
                    "adefault": "devops"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BuildIncludes",
                    "type": "Input",
                    "prompt": "ADO repository paths to detect changes?",
                    "description": "A comma delimited list of ADO repository paths.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w\\\\\\\\/\\\\\\\\*]+[,]{0,1})+$',BuildIncludes)\""
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BuildBranches",
                    "type": "Input",
                    "prompt": "ADO repository branches to target for push or merges?",
                    "description": "A comma delimited List of ADO repository branches.",
                    "adefault": "master",
                    "validate": "-expr \"regex('^([\\\\\\\\w\\\\\\\\/]+[,]{0,1})+$',BuildBranches)\""
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BuildType",
                    "type": "Select",
                    "prompt": "Select the build type:",
                    "adefault": "maven",
                    "options": [
                      {
                        "label": "MAVEN",
                        "value": "maven"
                      },
                      {
                        "label": "GRADLE",
                        "value": "gradle"
                      },
                      {
                        "label": "ANT",
                        "value": "ant"
                      },
                      {
                        "label": "DOTNET",
                        "value": "dotnet"
                      },
                      {
                        "label": "NPM",
                        "value": "npm"
                      },
                      {
                        "label": "YARN",
                        "value": "yarn"
                      },
                      {
                        "label": "VENDOR_APP",
                        "value": "vendor_app"
                      }
                    ]
                  },
                  {
                    "bpKey": "parameters",
                    "name": "AppArea",
                    "type": "Input",
                    "prompt": "What are the sub-directories in output repository?",
                    "description": "If 'n/a' then there will be no sub-directories.  The sub-directories relate to repository output folders.",
                    "adefault": "-expr \"BuildType\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', AppArea)\""
                  },
                  {
                    "bpKey": "parameters",
                    "name": "ComponentBuild",
                    "type": "Confirm",
                    "prompt": "Is this a dependency component or docker image with no repository contained helm implementation?",
                    "description": "If this is a dependency component or docker image with no repo contained helm implementation, then value should be set to Yes.",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "CronSetting",
                    "type": "Input",
                    "prompt": "Cron build trigger setting",
                    "description": "If release build can be triggered on a schedule, then set the cron setting.  Otherwise value should be 'n/a'",
                    "adefault": "n/a",
                    "promptIf": "-expr \"BuildType == 'vendor_app'\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[\\\\\\\\S]+ [\\\\\\\\S]+ [\\\\\\\\S]+ [\\\\\\\\S]+ [\\\\\\\\S]+$)', CronSetting)\""
                  },
                  {
                    "bpKey": "maven",
                    "name": "DoVersionSet",
                    "type": "Confirm",
                    "prompt": "Set the new version in pom file(s) before build?  (Yes/No)",
                    "description": "If the new version needs to be set in the pom.xml file before build occurs then answer should be yes.",
                    "adefault": "true",
                    "promptIf": "-expr \"BuildType == 'maven'\""
                  },
                  {
                    "bpKey": "maven",
                    "name": "BuildGoal",
                    "type": "Select",
                    "prompt": "Select the Maven goal for the build:",
                    "adefault": "install",
                    "options": [
                      {
                        "label": "package",
                        "value": "package"
                      },
                      {
                        "label": "install",
                        "value": "install"
                      },
                      {
                        "label": "deploy",
                        "value": "deploy"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'maven'\""
                  },
                  {
                    "bpKey": "maven",
                    "name": "PomFileName",
                    "type": "Input",
                    "prompt": "What is the POM file name/path?",
                    "adefault": "pom.xml",
                    "promptIf": "-expr \"BuildType == 'maven'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w]+(.xml)$', PomFileName)\""
                  },
                  {
                    "bpKey": "maven",
                    "name": "AdditionalMavenBuildOptions",
                    "type": "Input",
                    "prompt": "Additional maven build options.  E.G. -t $(RE_TOOLS)/mvn/toolchains.xml, (n/a indicates no additional options)",
                    "adefault": "n/a",
                    "promptIf": "-expr \"BuildType == 'maven'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AdditionalMavenBuildOptions)\""
                  },
                  {
                    "bpKey": "gradle",
                    "name": "GradleFileName",
                    "type": "Input",
                    "prompt": "What is the Gradle file name?",
                    "adefault": "build.gradle",
                    "promptIf": "-expr \"BuildType == 'gradle'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w.]+$', GradleFileName)\""
                  },
                  {
                    "bpKey": "gradle",
                    "name": "AdditionalReleaseTasks",
                    "type": "Input",
                    "prompt": "Additional tasks added to release build?",
                    "description": "If set to 'n/a', then no additional tasks will be added to build request.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"BuildType == 'gradle'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\w ]+$', AdditionalReleaseTasks)\""
                  },
                  {
                    "bpKey": "gradle",
                    "name": "AdditionalBuildOptions",
                    "type": "Input",
                    "prompt": "Additional build options.",
                    "description": "E.G. --refresh-dependencies -Pcontext=release. If 'n/a', then no additional options will be set on build request.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"BuildType == 'gradle'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AdditionalBuildOptions)\""
                  },
                  {
                    "bpKey": "ant",
                    "name": "AntFileName",
                    "type": "Input",
                    "prompt": "ANT build.xml path/filename?",
                    "adefault": "build.xml",
                    "promptIf": "-expr \"BuildType == 'ant'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w]+(.xml)$', AntFileName)\""
                  },
                  {
                    "bpKey": "ant",
                    "name": "AntBuildTarget",
                    "type": "Input",
                    "prompt": "Optional target names.  E.G. init compile",
                    "adefault": "default",
                    "promptIf": "-expr \"BuildType == 'ant'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w]+$|[a-zA-Z]+-[a-zA-Z]+$', AntBuildTarget)\""
                  },
                  {
                    "bpKey": "ant",
                    "name": "AntBuildOptions",
                    "type": "Input",
                    "prompt": "Optional build options.  E.G. -DmyProperty=myPropertyValue, (n/a indicates no additional options)",
                    "adefault": "n/a",
                    "promptIf": "-expr \"BuildType == 'ant'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AntBuildOptions)\""
                  },
                  {
                    "bpKey": "ant",
                    "name": "JavaHomeSelection",
                    "type": "Select",
                    "prompt": "Select how Ant will find the JDK. Select PATH only if you need to enter the path to a certain required version of the JDK",
                    "adefault": "JDKVersion",
                    "options": [
                      {
                        "label": "VERSION",
                        "value": "JDKVersion"
                      },
                      {
                        "label": "PATH",
                        "value": "Path"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'ant'\""
                  },
                  {
                    "bpKey": "ant",
                    "name": "JdkVersion",
                    "type": "Input",
                    "prompt": "If a specific version of the JDK is required, specify it here (e.g. 6, 7, 8, 11, etc.). Otherwise, defaults to the current JDK on the build server.",
                    "adefault": "default",
                    "promptIf": "-expr \"(BuildType == 'ant') && (JavaHomeSelection == 'JDKVersion')\""
                  },
                  {
                    "bpKey": "ant",
                    "name": "JdkUserInputPath",
                    "type": "Input",
                    "prompt": "Specify the path to the specific required JDK.  E.G. /app/azure/tools/java/1.6.0_25/",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(BuildType == 'ant') && (JavaHomeSelection == 'Path')\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "VSVersion",
                    "type": "Select",
                    "prompt": "Visual Studio Version",
                    "description": "If the preferred version cannot be found, the latest version found will be used instead",
                    "adefault": "Latest",
                    "options": [
                      {
                        "label": "Latest",
                        "value": "Latest"
                      },
                      {
                        "label": "Visual Studio 2012",
                        "value": "11.0"
                      },
                      {
                        "label": "Visual Studio 2013",
                        "value": "12.0"
                      },
                      {
                        "label": "Visual Studio 2015",
                        "value": "14.0"
                      },
                      {
                        "label": "Visual Studio 2017",
                        "value": "15.0"
                      },
                      {
                        "label": "Visual Studio 2019",
                        "value": "16.0"
                      },
                      {
                        "label": "Visual Studio 2022",
                        "value": "17.0"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "MSBuildArch",
                    "type": "Select",
                    "prompt": "MS Build Architecture to run",
                    "description": "Optionally supply the architecture (x86, x64) of MSBuild to run",
                    "adefault": "MS Build X86",
                    "options": [
                      {
                        "label": "MS Build X86",
                        "value": "MS Build X86"
                      },
                      {
                        "label": "MS Build X64",
                        "value": "MS Build X64"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "Platform",
                    "type": "Select",
                    "prompt": "Select Platform type",
                    "description": "default value will be any cpu",
                    "adefault": "any cpu",
                    "options": [
                      {
                        "label": "any cpu",
                        "value": "any cpu"
                      },
                      {
                        "label": "Win32",
                        "value": "Win32"
                      },
                      {
                        "label": "x86",
                        "value": "x86"
                      },
                      {
                        "label": "x64",
                        "value": "x64"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "Configuration",
                    "type": "Select",
                    "prompt": "Select Platform type",
                    "adefault": "release",
                    "options": [
                      {
                        "label": "debug",
                        "value": "debug"
                      },
                      {
                        "label": "release",
                        "value": "release"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "TypesOfApps",
                    "type": "Select",
                    "prompt": "what type of applications does this repo have?",
                    "options": [
                      {
                        "label": "consoleonly",
                        "value": "console"
                      },
                      {
                        "label": "webapponly",
                        "value": "webapp"
                      },
                      {
                        "label": "Console_&_webapp",
                        "value": "both"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "number_of_consoleapps",
                    "type": "Select",
                    "prompt": "How many console prjects this repo have?",
                    "adefault": "one",
                    "options": [
                      {
                        "label": "one",
                        "value": "one"
                      },
                      {
                        "label": "multiple",
                        "value": "multiple"
                      }
                    ],
                    "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'console')\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "console_exepath",
                    "type": "Input",
                    "prompt": "Enter full path for console artifacts its generating:",
                    "description": "if you have multiple console apps provide path like: eg: \"ZWay/FAMCTransaction/bin/debug\", \"ZWay/odsxfer/bin/debug\"",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'console' || TypesOfApps == 'both')\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "uniquedir_for_console",
                    "type": "Input",
                    "prompt": "Enter the dir name before the /bin from above response:",
                    "description": "if this is your above resonse \"ZWay/FAMCTransaction/bin/debug\", \"ZWay/odsxfer/bin/debug\" input as follow eg: \"FAMCTransaction\", \"odsxfer\"",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'console' || TypesOfApps == 'both')\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "number_of_webapps",
                    "type": "Select",
                    "prompt": "how many webapp prjects this repo have:",
                    "adefault": "one",
                    "options": [
                      {
                        "label": "one",
                        "value": "one"
                      },
                      {
                        "label": "multiple",
                        "value": "multiple"
                      }
                    ],
                    "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'webapp')\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "uniquedir_for_Webapp",
                    "type": "Input",
                    "prompt": "Enter the unique dir name:",
                    "description": "if this is your above resonse is  \"Zway/zwayintranet/\" will be helpful to give the zip name: \"zwayintranet\"",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'webapp' || TypesOfApps == 'both')\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "Nugetpackage",
                    "type": "Confirm",
                    "prompt": "Need any Nugetpackages to be download?",
                    "description": "if you need to download any Nugetpackages please Select yes else Select no",
                    "adefault": "false",
                    "promptIf": "-expr \"BuildType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "packages_nugetconfig",
                    "type": "Select",
                    "prompt": "please select config its using",
                    "options": [
                      {
                        "label": "packages.config",
                        "value": "packages.config"
                      },
                      {
                        "label": "nuget.config",
                        "value": "nuget.config"
                      }
                    ],
                    "promptIf": "-expr \"(BuildType == 'dotnet') && (Nugetpackage == true)\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "Nugetconfig",
                    "type": "Input",
                    "prompt": "please provide the relative path of nuget.config file in repo:",
                    "description": "nuget.config file is needed to download packages please provide relative path in repo",
                    "adefault": "nuget.config",
                    "promptIf": "-expr \"(BuildType == 'dotnet') && (packages_nugetconfig == nuget.config)\""
                  },
                  {
                    "bpKey": "yarn",
                    "name": "Empty",
                    "type": "Input",
                    "prompt": "Some input for empty blueprint?",
                    "description": "Some input for empty blueprint",
                    "promptIf": "-expr \"BuildType == 'yarn'\""
                  },
                  {
                    "bpKey": "vendorapp",
                    "name": "AppName",
                    "type": "Input",
                    "prompt": "Please provide name of the vendor app",
                    "description": "provide name of the vendor app eg: Procuity",
                    "adefault": "none",
                    "promptIf": "-expr \"BuildType == 'vendor_app'\""
                  },
                  {
                    "bpKey": "vendorapp",
                    "name": "PathOn1846",
                    "type": "Input",
                    "prompt": "Please add path on Utlxa1846",
                    "description": "Add path on 1846 eg: /app/inbound/Procuity",
                    "adefault": "n/a",
                    "promptIf": "-expr \"BuildType == 'vendor_app'\""
                  },
                  {
                    "bpKey": "vendorapp",
                    "name": "NumberOfFiles",
                    "type": "Select",
                    "prompt": "Number of files dropped by Vendor in SFG?",
                    "adefault": "empty",
                    "options": [
                      {
                        "label": "ONE",
                        "value": "one"
                      },
                      {
                        "label": "MULTIPLE",
                        "value": "multiple"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'vendor_app'\""
                  },
                  {
                    "bpKey": "vendorapp",
                    "name": "FileName",
                    "type": "Input",
                    "prompt": "Add FileName dropped by vendor",
                    "description": "please give the name of the file by vendor in SFG eg: tfbdirect.war",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(BuildType == 'vendor_app') && (Nubmeroffiles == 'one')\""
                  },
                  {
                    "bpKey": "vendorapp",
                    "name": "FileNeedToModify",
                    "type": "Select",
                    "prompt": "Does the Vendor dropped file need to be modified?",
                    "adefault": "empty",
                    "options": [
                      {
                        "label": "YES",
                        "value": "yes"
                      },
                      {
                        "label": "NO",
                        "value": "no"
                      }
                    ],
                    "promptIf": "-expr \"BuildType == 'vendor_app'\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Common%3A+Project+ADO+Composite",
                "commitPatterns": "apparea/.pipeline"
              }
            ]
          },
          {
            "name": "project-app-composite",
            "title": "project-app-composite",
            "parentName": "common",
            "folders": [],
            "blueprints": [
              {
                "title": "Project APP Composite",
                "type": "XL",
                "description": "A set of deploy types to be used at the application level.\n",
                "path": "common",
                "name": "project-app-composite",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "cacheKey": [
                  "RepoName",
                  "AppArea"
                ],
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectappcomposite",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?",
                    "description": "The ADO Project used to place generated pipeline code"
                  },
                  {
                    "bpKey": "projectappcomposite",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO repository?",
                    "description": "List of available repositories."
                  },
                  {
                    "bpKey": "projectappcomposite",
                    "name": "AppArea",
                    "type": "Input",
                    "prompt": "What is the application area or sub-directories?",
                    "description": "If 'n/a' then there will be no sub-directories for output XL tool references or reference to ADO pipeline templates.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', AppArea)\""
                  },
                  {
                    "bpKey": "projectappcomposite",
                    "name": "ADOTemplateRepository",
                    "type": "Input",
                    "prompt": "Enter ADO repository in your project containing pipeline templates.",
                    "description": "The ADO repository location of ADO pipeline templates.",
                    "adefault": "devops"
                  },
                  {
                    "bpKey": "projectappcomposite",
                    "name": "TemplateFolder",
                    "type": "Input",
                    "prompt": "Enter the folder in the above repository that contains pipeline templates.",
                    "description": "The sub-directories relate to repository output folders.  This is so common builds can have common template outside of XL application area.",
                    "adefault": "-expr \"AppArea\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', TemplateFolder)\""
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BinariesDir",
                    "type": "Input",
                    "prompt": "What is the directory for build artifacts?",
                    "adefault": "target"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BuildIncludes",
                    "type": "Input",
                    "prompt": "ADO repository paths to detect changes? (Comma delimited list)",
                    "description": "List of ADO repository paths",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BuildBranches",
                    "type": "Input",
                    "prompt": "ADO repository branches to target for push or merges? (Comma delimited list)",
                    "description": "List of ADO repository branches",
                    "adefault": "master"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "UseBuildNumber",
                    "type": "Confirm",
                    "prompt": "Built artifacts have build number?  (Yes/No)",
                    "description": "If build type generates artifact with build number/app_version then answer should be yes.",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "DeployType",
                    "type": "Select",
                    "prompt": "Select the deploy type:",
                    "adefault": "jboss",
                    "options": [
                      {
                        "label": "JBOSS",
                        "value": "jboss"
                      },
                      {
                        "label": "WAS",
                        "value": "was"
                      },
                      {
                        "label": "SCRIPTIT",
                        "value": "scriptit"
                      },
                      {
                        "label": "MANIFEST_MIGRATE",
                        "value": "manifest_migrate"
                      },
                      {
                        "label": "HELM",
                        "value": "helm"
                      },
                      {
                        "label": "JWS/Tomcat",
                        "value": "tomcat"
                      },
                      {
                        "label": "DO_NOTHING",
                        "value": "donothing"
                      },
                      {
                        "label": "dotnet",
                        "value": "dotnet"
                      }
                    ]
                  },
                  {
                    "bpKey": "parameters",
                    "name": "ReleasePlanType",
                    "type": "Select",
                    "prompt": "Select the XL Release plan type:",
                    "adefault": "noplan",
                    "options": [
                      {
                        "label": "noplan",
                        "value": "noplan"
                      },
                      {
                        "label": "Base Plan",
                        "value": "baseplan"
                      },
                      {
                        "label": "Dynamic Plan",
                        "value": "dynplan"
                      }
                    ]
                  },
                  {
                    "bpKey": "jboss",
                    "name": "BaseName",
                    "type": "Input",
                    "prompt": "What is the name of the output component?",
                    "adefault": "-expr \"RepoName + '.war'\"",
                    "promptIf": "-expr \"DeployType == 'jboss'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w-_]*(.war|.ear)$', BaseName)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'jboss'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "was",
                    "name": "BaseName",
                    "type": "Input",
                    "prompt": "What is the name of the output component?",
                    "adefault": "-expr \"RepoName + '.war'\"",
                    "promptIf": "-expr \"DeployType == 'was'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                  },
                  {
                    "bpKey": "was",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'was'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "was",
                    "name": "ContextRoot",
                    "type": "Input",
                    "prompt": "Enter the context root for the application (ie. '/ZionsBancorp').",
                    "promptIf": "-expr \"DeployType == 'was'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\/][\\\\\\\\w_]+$', ContextRoot)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOne",
                    "type": "Input",
                    "prompt": "The name of the first build component?",
                    "description": "This is the first component to be deployed.",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentOne)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOneTags",
                    "type": "Editor",
                    "prompt": "The list of the first component deployment tags?",
                    "description": "This is the component tags.  If field is empty no tags field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneTags)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOneScriptFileReference",
                    "type": "Editor",
                    "prompt": "Enter the first component's deployment script file location?",
                    "description": "This is a input deploy script for first component to be deployed.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentOneScriptFileReference)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOnePlaceholders",
                    "type": "Editor",
                    "prompt": "The list of the first component's deploy script place holders?",
                    "description": "This is the potential place holders for script of first component to be deployed. If field is empty no place holder field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOnePlaceholders)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOneScript",
                    "type": "Editor",
                    "prompt": "The first component's script for deployment implementation?",
                    "description": "This is the script to run referenced script or full deploy script of first component to be deployed.",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference == 'n/a')\"",
                    "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneScript)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwo",
                    "type": "Input",
                    "prompt": "The name of the second build component?",
                    "description": "This is the second component to be deployed.  If value is 'n/a' no component is specified.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentTwo)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoTags",
                    "type": "Editor",
                    "prompt": "The list of the second component's deployment tags?",
                    "description": "This is the component tags.  If field is empty no tags field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoTags)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoScriptFileReference",
                    "type": "Editor",
                    "prompt": "The list of the second component's referenced script?",
                    "description": "This is a input deploy script for second component to be deployed.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentTwoScriptFileReference)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoPlaceholders",
                    "type": "Editor",
                    "prompt": "The list of the second component's place holders?",
                    "description": "This is the potential place holders for script of second component to be deployed. If field is empty no place holder field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoPlaceholders)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoScript",
                    "type": "Editor",
                    "prompt": "The second component's script for deployment implementation?",
                    "description": "This is the script to run referenced script or full deploy script of second component to be deployed.",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference == 'n/a')\"",
                    "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoScript)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThree",
                    "type": "Input",
                    "prompt": "The name of the third build component?",
                    "description": "This is the third component to be deployed.  If value is 'n/a' no component is specified.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentThree)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreeTags",
                    "type": "Editor",
                    "prompt": "The list of the third component's deployment tags?",
                    "description": "This is the component tags.  If field is empty no tags field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeTags)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreeScriptFileReference",
                    "type": "Editor",
                    "prompt": "The third component's referenced script?",
                    "description": "This is a input deploy script for third component to be deployed.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentThreeScriptFileReference)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreePlaceholders",
                    "type": "Editor",
                    "prompt": "The list of the third component's place holders?",
                    "description": "This is the potential place holders for script of third component to be deployed. If field is empty no place holder field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' &&  && ComponentThreeScriptFileReference != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreePlaceholders)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreeScript",
                    "type": "Editor",
                    "prompt": "The third component's script for deployment implementation?",
                    "description": "This is the script to run referenced script or full deploy script of third component to be deployed.",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' && ComponentThreeScriptFileReference == 'n/a')\"",
                    "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeScript)\""
                  },
                  {
                    "bpKey": "manifestmigrate",
                    "name": "ManifestFilePath",
                    "type": "Input",
                    "prompt": "What is the path / name of the deployit-manifest.xml file?",
                    "adefault": "deployit-manifest.xml",
                    "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                  },
                  {
                    "bpKey": "manifestmigrate",
                    "name": "BuildType",
                    "type": "Select",
                    "prompt": "Select the build type:",
                    "adefault": "maven",
                    "options": [
                      {
                        "label": "EMPTY",
                        "value": "empty"
                      },
                      {
                        "label": "MAVEN",
                        "value": "maven"
                      },
                      {
                        "label": "GRADLE",
                        "value": "gradle"
                      },
                      {
                        "label": "ANT",
                        "value": "ant"
                      }
                    ],
                    "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                  },
                  {
                    "bpKey": "tomcat",
                    "name": "BaseName",
                    "type": "Input",
                    "prompt": "What is the name of the output component?",
                    "adefault": "-expr \"RepoName + '.war'\"",
                    "promptIf": "-expr \"DeployType == 'tomcat'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                  },
                  {
                    "bpKey": "tomcat",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'tomcat'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmRepoName",
                    "type": "Input",
                    "prompt": "What is the name of the GIT repository that houses chart?",
                    "description": "The GIT repository that houses the Helm chart.",
                    "adefault": "-expr \".RepoName\"",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w_-]+$', HelmRepoName)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmFolder",
                    "type": "Input",
                    "prompt": "What is the GIT Repository location for Helm chart?",
                    "description": "The GIT repository path to the helm chart to be modified.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w\\\\\\\\/\\\\\\\\-_]+)$', HelmFolder)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmProperty",
                    "type": "Input",
                    "prompt": "Enter HELM property name to set with build number.",
                    "description": "The property name within the values.yaml that will be modified with build tag.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w.]+)$', HelmProperty)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmEnvironmentList",
                    "type": "Input",
                    "prompt": "Enter HELM comma delimited list of environments.",
                    "description": "The list of enviroments to setup in application XLD for deployment. This is only used if the helm repo name equals selected GIT repository who's pipeline is being executed.",
                    "adefault": "test,stage,prod",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w,]+(,prod))$', HelmEnvironmentList)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmNamespacePrefix",
                    "type": "Input",
                    "prompt": "Enter K8S namespace prefix.",
                    "description": "The K8S cluster namespace prefix that relates to access of service setup.  A environment list value will be appended to prefix value to make up the actual deployment namespace.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmNamespacePrefix)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmReleaseNamePrefix",
                    "type": "Input",
                    "prompt": "Enter release namespace prefix.",
                    "description": "The K8S cluster release prefix that relates to tracking release of helm chart.  A environment list value will be appended to prefix value to make up the actual release name.",
                    "adefault": "-expr \"HelmNamespacepPrefix\"",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmReleaseNamePrefix)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "VaultPath",
                    "type": "Input",
                    "prompt": "Enter vault path.",
                    "adefault": "zions-service-framework",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', VaultPath)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "KubeConfigVaultKey",
                    "type": "Input",
                    "prompt": "Enter kube config vault key.",
                    "description": "The name/key to the Vault buffer housing kubeconfig.yaml for cluster access.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', KubeConfigVaultKey)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "RegistryNamespace",
                    "type": "Input",
                    "prompt": "Enter docker registry namespace.",
                    "description": "The Nexus/docker registry namespace of built docker image.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_\\\\\\\\/]+)$', RegistryNamespace)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "DockerImageName",
                    "type": "Input",
                    "prompt": "Enter docker registry image name.",
                    "description": "The Nexus/Docker registry image name.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', DockerImageName)\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "backupdir",
                    "type": "Confirm",
                    "prompt": "Do you need a backup for the new zipfiles on your server?",
                    "description": "please provide the back dir name eg: D:\\backupdir",
                    "adefault": "false",
                    "promptIf": "-expr \"DeployType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "backupdir_path",
                    "type": "Input",
                    "prompt": "please provide the absolute path od backup dir on server",
                    "description": "please provide the back dir name eg: D:\\backupdir",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'dotnet') && (backupdir == true)\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'dotnet'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "folders",
                    "name": "InitializeFolderPermissions",
                    "type": "Confirm",
                    "prompt": "Initialize XLR project folder permissions?",
                    "description": "If you wish to add initial permissions to XLR top folder then select Yes.",
                    "adefault": "false",
                    "promptIf": "-expr \"ReleasePlanType != 'noplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasDevEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Dev environment?",
                    "adefault": "false",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "DevNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Dev Deploy!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasDevEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', DevNotificationEmails)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasTestEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Test environment?",
                    "adefault": "true",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "TestNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Test phase!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', TestNotificationEmails)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "TestApprovalGateTasks",
                    "type": "Editor",
                    "prompt": "Input list of <Team><crlf>!  E.G, QA",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', TestApprovalGateTasks)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasStageEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Stage environment?",
                    "adefault": "true",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "StageNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Stage phase!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', StageNotificationEmails)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "StageApprovalGateTasks",
                    "type": "Editor",
                    "prompt": "Input list of <Team><crlf>!  E.G, UAT",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', StageApprovalGateTasks)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasProdEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Production environments?",
                    "adefault": "true",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "ProdNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Production phase!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasProdEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', ProdNotificationEmails)\""
                  },
                  {
                    "bpKey": "dynamictemplate",
                    "name": "Environments",
                    "type": "Input",
                    "prompt": "List of environments (comma-separated)",
                    "description": "",
                    "adefault": "Test, Stage, Prod",
                    "promptIf": "-expr \"ReleasePlanType == 'dynplan'\""
                  },
                  {
                    "bpKey": "dynamictemplate",
                    "name": "XLAppName",
                    "type": "Input",
                    "prompt": "What is the name of the application in XL Deploy?",
                    "description": "The name of the application in XL Deploy",
                    "adefault": "-expr \"RepoName\"",
                    "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', XLAppName)\""
                  },
                  {
                    "bpKey": "dynamictemplate",
                    "name": "NotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of deployment",
                    "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', NotificationEmails)\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Common%3A+Project+App+Composite"
              }
            ]
          },
          {
            "name": "project-xld-dictionary",
            "title": "project-xld-dictionary",
            "parentName": "common",
            "folders": [],
            "blueprints": [
              {
                "title": "XLD Dictionary",
                "type": "XL",
                "description": "This blueprint creates a dictionary for other blueprints to draw secret values from\n",
                "path": "common",
                "name": "project-xld-dictionary",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "AppArea",
                  "EnvName",
                  "DictionaryType"
                ],
                "cacheKey": [
                  "AppArea",
                  "EnvName",
                  "DictionaryType"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "isVisible": false
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectxlddictionary",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the environment?"
                  },
                  {
                    "bpKey": "projectxlddictionary",
                    "name": "AppArea",
                    "type": "Input",
                    "prompt": "Application area name or sub-folders?  If value is 'n/a' property will not be used.",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "projectxlddictionary",
                    "name": "EnvName",
                    "type": "Select",
                    "prompt": "Environment Name?",
                    "description": "Environment Name",
                    "options": [
                      {
                        "label": "Development",
                        "value": "Dev"
                      },
                      {
                        "label": "Test",
                        "value": "Test"
                      },
                      {
                        "label": "Stage",
                        "value": "Stage"
                      },
                      {
                        "label": "Production",
                        "value": "Prod"
                      },
                      {
                        "label": "Common",
                        "value": "Common"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectxlddictionary",
                    "name": "DictionaryType",
                    "type": "Select",
                    "prompt": "Select dictionary type",
                    "options": [
                      {
                        "label": "Normal",
                        "value": "udm.Dictionary"
                      },
                      {
                        "label": "Encrypted",
                        "value": "udm.EncryptedDictionary"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectxlddictionary",
                    "name": "DictionaryItems",
                    "type": "Editor",
                    "prompt": "Newline-separated list of key=value items to be created (e.g. key.one=val1\nkey.two=val2).",
                    "promptIf": "-expr \"DictionaryType == 'udm.Dictionary'\""
                  },
                  {
                    "bpKey": "projectxlddictionary",
                    "name": "DictionaryItemsSecret",
                    "type": "SecretEditor",
                    "prompt": "Newline-separated list of key=value items to be created (e.g. key.one=val1\nkey.two=val2).",
                    "promptIf": "-expr \"DictionaryType == 'udm.EncryptedDictionary'\""
                  }
                ]
              }
            ]
          },
          {
            "name": "project-xld-elements",
            "title": "project-xld-elements",
            "parentName": "common",
            "folders": [
              {
                "name": "common",
                "title": "common",
                "parentName": "project-xld-elements",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Project XLD Common Elements",
                    "type": "XL",
                    "description": "This defines/initializes generic common use XLD elements of infrastructure and environment.\n",
                    "path": "common/project-xld-elements",
                    "name": "common",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "common",
                        "name": "HasDevEnv",
                        "type": "Confirm",
                        "prompt": "Has Dev environment?",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "common",
                        "name": "DevInfraHosts",
                        "type": "Editor",
                        "prompt": "Enter a new-line delimited list of host names related to Dev environment",
                        "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                        "promptIf": "-expr \"HasDevEnv\"",
                        "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', DevInfraHosts)\""
                      },
                      {
                        "bpKey": "common",
                        "name": "HasTestEnv",
                        "type": "Confirm",
                        "prompt": "Has Test environment?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "common",
                        "name": "TestInfraHosts",
                        "type": "Editor",
                        "prompt": "Enter a new-line delimited list of host names related to Test environment",
                        "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                        "promptIf": "-expr \"HasTestEnv\"",
                        "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', TestInfraHosts)\""
                      },
                      {
                        "bpKey": "common",
                        "name": "HasStageEnv",
                        "type": "Confirm",
                        "prompt": "Has Stage environment?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "common",
                        "name": "StageInfraHosts",
                        "type": "Editor",
                        "prompt": "Enter a new-line delimited list of host names related to Stage environment",
                        "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                        "promptIf": "-expr \"HasStageEnv\"",
                        "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', StageInfraHosts)\""
                      },
                      {
                        "bpKey": "common",
                        "name": "HasProdEnv",
                        "type": "Confirm",
                        "prompt": "Has Production environment?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "common",
                        "name": "ProdInfraHosts",
                        "type": "Editor",
                        "prompt": "Enter a new-line delimited list of host names related to Production environment",
                        "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                        "promptIf": "-expr \"HasProdEnv\"",
                        "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', ProdInfraHosts)\""
                      },
                      {
                        "bpKey": "common",
                        "name": "InfraType",
                        "type": "Select",
                        "prompt": "Select infrastructure type!",
                        "options": [
                          {
                            "label": "Windows",
                            "value": "windows"
                          },
                          {
                            "label": "Unix/Linux",
                            "value": "linux"
                          }
                        ]
                      },
                      {
                        "bpKey": "common",
                        "name": "DevJumpName",
                        "type": "Select",
                        "prompt": "Select Dev jumpstation name.",
                        "description": "If 'N/A' Dev jumpstation will not be set.",
                        "options": [
                          {
                            "label": "N/A",
                            "value": "n/a"
                          },
                          {
                            "label": "Test_01",
                            "value": "Infrastructure/SshJumpstations/Test_01"
                          },
                          {
                            "label": "Test_02",
                            "value": "Infrastructure/SshJumpstations/Test_02"
                          },
                          {
                            "label": "Prod_01",
                            "value": "Infrastructure/SshJumpstations/Prod_01"
                          },
                          {
                            "label": "Prod_02",
                            "value": "Infrastructure/SshJumpstations/Prod_02"
                          }
                        ],
                        "promptIf": "-expr \"HasDevEnv && InfraType == 'linux'\""
                      },
                      {
                        "bpKey": "common",
                        "name": "TestJumpName",
                        "type": "Select",
                        "prompt": "Test jumpstation name. If 'N/A' jumpstation will not be set.",
                        "options": [
                          {
                            "label": "N/A",
                            "value": "n/a"
                          },
                          {
                            "label": "Test_01",
                            "value": "Infrastructure/SshJumpstations/Test_01"
                          },
                          {
                            "label": "Test_02",
                            "value": "Infrastructure/SshJumpstations/Test_02"
                          },
                          {
                            "label": "Prod_01",
                            "value": "Infrastructure/SshJumpstations/Prod_01"
                          },
                          {
                            "label": "Prod_02",
                            "value": "Infrastructure/SshJumpstations/Prod_02"
                          }
                        ],
                        "promptIf": "-expr \"HasTestEnv && InfraType == 'linux'\""
                      },
                      {
                        "bpKey": "common",
                        "name": "StageJumpName",
                        "type": "Select",
                        "prompt": "Stage jumpstation name. If 'N/A' jumpstation will not be set.",
                        "options": [
                          {
                            "label": "N/A",
                            "value": "n/a"
                          },
                          {
                            "label": "Stage_01",
                            "value": "Infrastructure/SshJumpstations/Stage_01"
                          },
                          {
                            "label": "Stage_02",
                            "value": "Infrastructure/SshJumpstations/Stage_02"
                          },
                          {
                            "label": "Prod_01",
                            "value": "Infrastructure/SshJumpstations/Prod_01"
                          },
                          {
                            "label": "Prod_02",
                            "value": "Infrastructure/SshJumpstations/Prod_02"
                          }
                        ],
                        "promptIf": "-expr \"HasStageEnv && InfraType == 'linux'\""
                      },
                      {
                        "bpKey": "common",
                        "name": "ProdJumpName",
                        "type": "Select",
                        "prompt": "Prod jumpstation name. If 'N/A' jumpstation will not be set.",
                        "options": [
                          {
                            "label": "N/A",
                            "value": "n/a"
                          },
                          {
                            "label": "Prod_01",
                            "value": "Infrastructure/SshJumpstations/Prod_01"
                          },
                          {
                            "label": "Prod_02",
                            "value": "Infrastructure/SshJumpstations/Prod_02"
                          }
                        ],
                        "promptIf": "-expr \"HasProdEnv && InfraType == 'linux'\""
                      },
                      {
                        "bpKey": "common",
                        "name": "NotDefaultUser",
                        "type": "Confirm",
                        "prompt": "Set alternate user? (Besides svc-xldp?)",
                        "description": "If 'yes' then a userid and password will be input to utilize alternate user besides svc-xldp.",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "common",
                        "name": "HostUserName",
                        "type": "Input",
                        "prompt": "What is the host user?",
                        "promptIf": "-expr \"NotDefaultUser\""
                      },
                      {
                        "bpKey": "common",
                        "name": "HostUserPassword",
                        "type": "SecretInput",
                        "prompt": "What is the host password?",
                        "promptIf": "-expr \"NotDefaultUser\""
                      },
                      {
                        "bpKey": "common",
                        "name": "DeployType",
                        "type": "Select",
                        "prompt": "Select the deployment type:",
                        "adefault": "base",
                        "options": [
                          {
                            "label": "Specialized Base Dictionary",
                            "value": "base"
                          },
                          {
                            "label": "Specialized Helm Dictionary",
                            "value": "helm"
                          },
                          {
                            "label": "Specialized Jboss Dictionary",
                            "value": "jboss"
                          },
                          {
                            "label": "Specialized Was Dictionary",
                            "value": "was"
                          }
                        ]
                      },
                      {
                        "bpKey": "base",
                        "name": "DevUnencryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Dev unencrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasDevEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', DevUnencryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "DevEncryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Dev encrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasDevEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', DevEncryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "TestUnencryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Test unencrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasTestEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', TestUnencryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "TestEncryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Test encrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasTestEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', TestEncryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "StageUnencryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Stage unencrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasStageEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', StageUnencryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "StageEncryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Stage encrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasStageEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', StageEncryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "ProdUnencryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Production unencrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasProdEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', ProdUnencryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "ProdEncryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Production encrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'base') && (HasProdEnv)\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', ProdEncryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "CommonUnencryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Common unencrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common unencrypted dictionary will have values used across all environments",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'base'\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonUnencryptedDict)\""
                      },
                      {
                        "bpKey": "base",
                        "name": "CommonEncryptedDict",
                        "type": "Editor",
                        "prompt": "Enter Common encrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common encrypted dictionary will have secret values used across all environments",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'base'\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonEncryptedDict)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "JavaInstall",
                        "type": "Input",
                        "prompt": "Enter Java installation location on Helm CLI execution host!",
                        "description": "Specify directory location of java executable. (e.g. /app/azure/tools/java/1.8.0_251/bin). ",
                        "promptIf": "-expr \"DeployType == 'helm'\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "SpringBootProfile",
                        "type": "Select",
                        "prompt": "Select the Spring Boot Profile:",
                        "description": "This is the profile to use for CLI Automation.  This shouldn't have to change, but is there for RE testing.",
                        "adefault": "xlrdb",
                        "options": [
                          {
                            "label": "xlrdb",
                            "value": "xlrdb"
                          },
                          {
                            "label": "xlrdbtest",
                            "value": "xlrdbtest"
                          }
                        ],
                        "promptIf": "-expr \"DeployType == 'helm'\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "ProxySettings",
                        "type": "Input",
                        "prompt": "Enter spring boot profile for helm automation scripts",
                        "description": "These will be the -D settings to have java communicate through network proxy.",
                        "adefault": "-Dproxy.Host=proxy.cs.zionsbank.com -Dproxy.Port=8080",
                        "promptIf": "-expr \"DeployType == 'helm'\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "UseProxy",
                        "type": "Confirm",
                        "prompt": "Indicate if helm cli will use network proxy.",
                        "description": "If set to true helm will run under network proxy.",
                        "adefault": "true",
                        "promptIf": "-expr \"DeployType == 'helm'\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployMethodDev",
                        "type": "Select",
                        "prompt": "Dev - Select JBoss deploy method!",
                        "description": "A selection various way a JBoss can be deployed. ",
                        "adefault": "regularDeployWithRestart",
                        "options": [
                          {
                            "label": "Regular Deploy w/ Restart",
                            "value": "regularDeployWithRestart"
                          },
                          {
                            "label": "Force Deploy w/ Restart",
                            "value": "forceDeployWithRestart"
                          },
                          {
                            "label": "Regular Deploy",
                            "value": "regularDeploy"
                          },
                          {
                            "label": "Force Deploy",
                            "value": "forceDeploy"
                          }
                        ],
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployDirDev",
                        "type": "Input",
                        "prompt": "Dev - Input the directory to place deployable.",
                        "description": "The directory location to place JBoss deployable.",
                        "adefault": "/app/deploy",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployPortDev",
                        "type": "Input",
                        "prompt": "Dev - Input JBoss port to communicate deployable operations",
                        "description": "The communication port for JBoss deployment.",
                        "adefault": "9990",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "InstanceNameDev",
                        "type": "Input",
                        "prompt": "Dev - The name of the JBoss instance.",
                        "description": "A instance name of the JBoss install",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossControllerDev",
                        "type": "Input",
                        "prompt": "Dev - The name of the JBoss host.",
                        "description": "A host name of the JBoss install",
                        "adefault": "$(hostname -i)",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossHomeDev",
                        "type": "Input",
                        "prompt": "Dev - The directory of jboss install.",
                        "description": "The directory of the JBoss install",
                        "adefault": "/app/jboss/jboss-eap-7.4",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployMethodTest",
                        "type": "Select",
                        "prompt": "Test - Select JBoss deploy method!",
                        "description": "A selection various way a JBoss can be deployed. ",
                        "adefault": "regularDeployWithRestart",
                        "options": [
                          {
                            "label": "Regular Deploy w/ Restart",
                            "value": "regularDeployWithRestart"
                          },
                          {
                            "label": "Force Deploy w/ Restart",
                            "value": "forceDeployWithRestart"
                          },
                          {
                            "label": "Regular Deploy",
                            "value": "regularDeploy"
                          },
                          {
                            "label": "Force Deploy",
                            "value": "forceDeploy"
                          }
                        ],
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployDirTest",
                        "type": "Input",
                        "prompt": "Test - Input the directory to place deployable.",
                        "description": "The directory location to place JBoss deployable.",
                        "adefault": "/app/deploy",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployPortTest",
                        "type": "Input",
                        "prompt": "Test - Input JBoss port to communicate deployable operations",
                        "description": "The communication port for JBoss deployment.",
                        "adefault": "9990",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "InstanceNameTest",
                        "type": "Input",
                        "prompt": "Test - The name of the JBoss instance.",
                        "description": "A instance name of the JBoss install",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossControllerTest",
                        "type": "Input",
                        "prompt": "Test - The name of the JBoss host.",
                        "description": "A host name of the JBoss install",
                        "adefault": "$(hostname -i)",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossHomeTest",
                        "type": "Input",
                        "prompt": "Test - The directory of jboss install.",
                        "description": "The directory of the JBoss install",
                        "adefault": "/app/jboss/jboss-eap-7.4",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployMethodStage",
                        "type": "Select",
                        "prompt": "Stage - Select JBoss deploy method!",
                        "description": "A selection various way a JBoss can be deployed. ",
                        "adefault": "regularDeployWithRestart",
                        "options": [
                          {
                            "label": "Regular Deploy w/ Restart",
                            "value": "regularDeployWithRestart"
                          },
                          {
                            "label": "Force Deploy w/ Restart",
                            "value": "forceDeployWithRestart"
                          },
                          {
                            "label": "Regular Deploy",
                            "value": "regularDeploy"
                          },
                          {
                            "label": "Force Deploy",
                            "value": "forceDeploy"
                          }
                        ],
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployDirStage",
                        "type": "Input",
                        "prompt": "Stage - Input the directory to place deployable.",
                        "description": "The directory location to place JBoss deployable.",
                        "adefault": "/app/deploy",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployPortStage",
                        "type": "Input",
                        "prompt": "Stage - Input JBoss port to communicate deployable operations",
                        "description": "The communication port for JBoss deployment.",
                        "adefault": "9990",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "InstanceNameStage",
                        "type": "Input",
                        "prompt": "Stage - The name of the JBoss instance.",
                        "description": "A instance name of the JBoss install",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossControllerStage",
                        "type": "Input",
                        "prompt": "Stage - The name of the JBoss host.",
                        "description": "A host name of the JBoss install",
                        "adefault": "$(hostname -i)",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossHomeStage",
                        "type": "Input",
                        "prompt": "Stage - The directory of jboss install.",
                        "description": "The directory of the JBoss install",
                        "adefault": "/app/jboss/jboss-eap-7.4",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployMethodProd",
                        "type": "Select",
                        "prompt": "Prod - Select JBoss deploy method!",
                        "description": "A selection various way a JBoss can be deployed. ",
                        "adefault": "regularDeployWithRestart",
                        "options": [
                          {
                            "label": "Regular Deploy w/ Restart",
                            "value": "regularDeployWithRestart"
                          },
                          {
                            "label": "Force Deploy w/ Restart",
                            "value": "forceDeployWithRestart"
                          },
                          {
                            "label": "Regular Deploy",
                            "value": "regularDeploy"
                          },
                          {
                            "label": "Force Deploy",
                            "value": "forceDeploy"
                          }
                        ],
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployDirProd",
                        "type": "Input",
                        "prompt": "Prod - Input the directory to place deployable.",
                        "description": "The directory location to place JBoss deployable.",
                        "adefault": "/app/deploy",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "DeployPortProd",
                        "type": "Input",
                        "prompt": "Prod - Input JBoss port to communicate deployable operations",
                        "description": "The communication port for JBoss deployment.",
                        "adefault": "9990",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "InstanceNameProd",
                        "type": "Input",
                        "prompt": "Prod - The name of the JBoss instance.",
                        "description": "A instance name of the JBoss install",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossControllerProd",
                        "type": "Input",
                        "prompt": "Prod - The name of the JBoss host.",
                        "description": "A host name of the JBoss install",
                        "adefault": "$(hostname -i)",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "JbossHomeProd",
                        "type": "Input",
                        "prompt": "Prod - The directory of jboss install.",
                        "description": "The directory of the JBoss install",
                        "adefault": "/app/jboss/jboss-eap-7.4",
                        "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "DeployMethod",
                        "type": "Select",
                        "prompt": "Select JBoss deploy method!",
                        "description": "A selection various way a JBoss can be deployed. ",
                        "adefault": "regularDeployWithRestart",
                        "options": [
                          {
                            "label": "Regular Deploy w/ Restart",
                            "value": "regularDeployWithRestart"
                          },
                          {
                            "label": "Force Deploy w/ Restart",
                            "value": "forceDeployWithRestart"
                          },
                          {
                            "label": "Regular Deploy",
                            "value": "regularDeploy"
                          },
                          {
                            "label": "Force Deploy",
                            "value": "forceDeploy"
                          }
                        ],
                        "promptIf": "-expr \"DeployType == 'was'\""
                      },
                      {
                        "bpKey": "was",
                        "name": "DeployDir",
                        "type": "Input",
                        "prompt": "Input the directory to place deployable.",
                        "description": "The directory location to place JBoss deployable.",
                        "adefault": "/app/deploy",
                        "promptIf": "-expr \"DeployType == 'was'\""
                      },
                      {
                        "bpKey": "was",
                        "name": "DeployPort",
                        "type": "Input",
                        "prompt": "Input JBoss port to communicate deployable operations",
                        "description": "The communication port for JBoss deployment.",
                        "adefault": "9990",
                        "promptIf": "-expr \"DeployType == 'was'\""
                      },
                      {
                        "bpKey": "was",
                        "name": "InstanceName",
                        "type": "Input",
                        "prompt": "The name of the JBoss instance.",
                        "description": "A instance name of the JBoss install",
                        "promptIf": "-expr \"DeployType == 'was'\""
                      },
                      {
                        "bpKey": "was",
                        "name": "JbossController",
                        "type": "Input",
                        "prompt": "The name of the JBoss host.",
                        "description": "A host name of the JBoss install",
                        "adefault": "(hostname -i)",
                        "promptIf": "-expr \"DeployType == 'was'\""
                      },
                      {
                        "bpKey": "was",
                        "name": "JbossHome",
                        "type": "Input",
                        "prompt": "The directory of jboss install.",
                        "description": "The directory of the JBoss install",
                        "adefault": "/app/jboss/jboss-eap-7.4",
                        "promptIf": "-expr \"DeployType == 'was'\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "parts",
                "title": "parts",
                "parentName": "project-xld-elements",
                "folders": [
                  {
                    "name": "base",
                    "title": "base",
                    "parentName": "parts",
                    "folders": [],
                    "blueprints": [
                      {
                        "title": "Project XLD Base",
                        "type": "XL",
                        "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a specific environment.\n",
                        "path": "common/project-xld-elements/parts",
                        "name": "base",
                        "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                        "outDir": [],
                        "permissions": {
                          "isVisible": false
                        },
                        "dontUseProjectParmForExecution": false,
                        "dontUseRepoParmForExecution": false,
                        "isBuilder": false,
                        "parameters": [
                          {
                            "bpKey": "base",
                            "name": "DevUnencryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Dev unencrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasDevEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', DevUnencryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "DevEncryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Dev encrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasDevEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', DevEncryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "TestUnencryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Test unencrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasTestEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', TestUnencryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "TestEncryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Test encrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasTestEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', TestEncryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "StageUnencryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Stage unencrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasStageEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', StageUnencryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "StageEncryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Stage encrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasStageEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', StageEncryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "ProdUnencryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Production unencrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasProdEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', ProdUnencryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "ProdEncryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Production encrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                            "adefault": "n/a",
                            "promptIf": "-expr \"HasProdEnv\"",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', ProdEncryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "CommonUnencryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Common unencrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common unencrypted dictionary will have values used across all environments",
                            "adefault": "n/a",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonUnencryptedDict)\""
                          },
                          {
                            "bpKey": "base",
                            "name": "CommonEncryptedDict",
                            "type": "Editor",
                            "prompt": "Enter Common encrypted dictionary key-values.",
                            "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common encrypted dictionary will have secret values used across all environments",
                            "adefault": "n/a",
                            "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonEncryptedDict)\""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "helm",
                    "title": "helm",
                    "parentName": "parts",
                    "folders": [],
                    "blueprints": [
                      {
                        "title": "Project XLD Helm",
                        "type": "XL",
                        "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a helm XLD config.\n",
                        "path": "common/project-xld-elements/parts",
                        "name": "helm",
                        "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                        "outDir": [],
                        "permissions": {
                          "isVisible": false
                        },
                        "dontUseProjectParmForExecution": false,
                        "dontUseRepoParmForExecution": false,
                        "isBuilder": false,
                        "parameters": [
                          {
                            "bpKey": "helm",
                            "name": "JavaInstall",
                            "type": "Input",
                            "prompt": "Enter Java installation location on Helm CLI execution host!",
                            "description": "Specify directory location of java executable. (e.g. /app/azure/tools/java/1.8.0_251/bin). "
                          },
                          {
                            "bpKey": "helm",
                            "name": "SpringBootProfile",
                            "type": "Select",
                            "prompt": "Select the Spring Boot Profile:",
                            "description": "This is the profile to use for CLI Automation.  This shouldn't have to change, but is there for RE testing.",
                            "adefault": "xlrdb",
                            "options": [
                              {
                                "label": "xlrdb",
                                "value": "xlrdb"
                              },
                              {
                                "label": "xlrdbtest",
                                "value": "xlrdbtest"
                              }
                            ]
                          },
                          {
                            "bpKey": "helm",
                            "name": "ProxySettings",
                            "type": "Input",
                            "prompt": "Enter spring boot profile for helm automation scripts",
                            "description": "These will be the -D settings to have java communicate through network proxy.",
                            "adefault": "-Dproxy.Host=proxy.cs.zionsbank.com -Dproxy.Port=8080"
                          },
                          {
                            "bpKey": "helm",
                            "name": "UseProxy",
                            "type": "Confirm",
                            "prompt": "Indicate if helm cli will use network proxy.",
                            "description": "If set to true helm will run under network proxy.",
                            "adefault": "true"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "jboss",
                    "title": "jboss",
                    "parentName": "parts",
                    "folders": [],
                    "blueprints": [
                      {
                        "title": "Project XLD JBoss",
                        "type": "XL",
                        "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a JBoss XLD config.\n",
                        "path": "common/project-xld-elements/parts",
                        "name": "jboss",
                        "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                        "outDir": [],
                        "permissions": {
                          "isVisible": false
                        },
                        "dontUseProjectParmForExecution": false,
                        "dontUseRepoParmForExecution": false,
                        "isBuilder": false,
                        "parameters": [
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodDev",
                            "type": "Select",
                            "prompt": "Dev - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirDev",
                            "type": "Input",
                            "prompt": "Dev - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortDev",
                            "type": "Input",
                            "prompt": "Dev - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameDev",
                            "type": "Input",
                            "prompt": "Dev - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerDev",
                            "type": "Input",
                            "prompt": "Dev - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeDev",
                            "type": "Input",
                            "prompt": "Dev - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodTest",
                            "type": "Select",
                            "prompt": "Test - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirTest",
                            "type": "Input",
                            "prompt": "Test - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortTest",
                            "type": "Input",
                            "prompt": "Test - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameTest",
                            "type": "Input",
                            "prompt": "Test - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerTest",
                            "type": "Input",
                            "prompt": "Test - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeTest",
                            "type": "Input",
                            "prompt": "Test - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodStage",
                            "type": "Select",
                            "prompt": "Stage - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirStage",
                            "type": "Input",
                            "prompt": "Stage - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortStage",
                            "type": "Input",
                            "prompt": "Stage - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameStage",
                            "type": "Input",
                            "prompt": "Stage - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerStage",
                            "type": "Input",
                            "prompt": "Stage - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeStage",
                            "type": "Input",
                            "prompt": "Stage - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodProd",
                            "type": "Select",
                            "prompt": "Prod - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirProd",
                            "type": "Input",
                            "prompt": "Prod - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortProd",
                            "type": "Input",
                            "prompt": "Prod - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameProd",
                            "type": "Input",
                            "prompt": "Prod - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerProd",
                            "type": "Input",
                            "prompt": "Prod - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeProd",
                            "type": "Input",
                            "prompt": "Prod - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasProdEnv\""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "was",
                    "title": "was",
                    "parentName": "parts",
                    "folders": [],
                    "blueprints": [
                      {
                        "title": "Project XLD Helm",
                        "type": "XL",
                        "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a helm XLD config.\n",
                        "path": "common/project-xld-elements/parts",
                        "name": "was",
                        "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                        "outDir": [],
                        "permissions": {
                          "isVisible": false
                        },
                        "dontUseProjectParmForExecution": false,
                        "dontUseRepoParmForExecution": false,
                        "isBuilder": false,
                        "parameters": [
                          {
                            "bpKey": "was",
                            "name": "DeployMethod",
                            "type": "Select",
                            "prompt": "Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ]
                          },
                          {
                            "bpKey": "was",
                            "name": "DeployDir",
                            "type": "Input",
                            "prompt": "Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy"
                          },
                          {
                            "bpKey": "was",
                            "name": "DeployPort",
                            "type": "Input",
                            "prompt": "Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990"
                          },
                          {
                            "bpKey": "was",
                            "name": "InstanceName",
                            "type": "Input",
                            "prompt": "The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install"
                          },
                          {
                            "bpKey": "was",
                            "name": "JbossController",
                            "type": "Input",
                            "prompt": "The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "(hostname -i)"
                          },
                          {
                            "bpKey": "was",
                            "name": "JbossHome",
                            "type": "Input",
                            "prompt": "The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "blueprints": []
              }
            ],
            "blueprints": [
              {
                "title": "Project XLD Common",
                "type": "XL",
                "description": "This defines/initializes pick XLD infrastructure and environment blueprint type for a project\n",
                "path": "common",
                "name": "project-xld-elements",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "AppArea",
                  "EnvName"
                ],
                "cacheKey": [
                  "AppArea"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS",
                    "Sandbox",
                    "CorpSvcs"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectxldelements",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?"
                  },
                  {
                    "bpKey": "projectxldelements",
                    "name": "AppArea",
                    "type": "Input",
                    "prompt": "Application area name.",
                    "description": "XL Deploy sub-directories? if value is 'n/a', then there will be no sub-directories XLD folders.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', AppArea)\""
                  },
                  {
                    "bpKey": "common",
                    "name": "HasDevEnv",
                    "type": "Confirm",
                    "prompt": "Has Dev environment?",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "common",
                    "name": "DevInfraHosts",
                    "type": "Editor",
                    "prompt": "Enter a new-line delimited list of host names related to Dev environment",
                    "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                    "promptIf": "-expr \"HasDevEnv\"",
                    "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', DevInfraHosts)\""
                  },
                  {
                    "bpKey": "common",
                    "name": "HasTestEnv",
                    "type": "Confirm",
                    "prompt": "Has Test environment?",
                    "adefault": "true"
                  },
                  {
                    "bpKey": "common",
                    "name": "TestInfraHosts",
                    "type": "Editor",
                    "prompt": "Enter a new-line delimited list of host names related to Test environment",
                    "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                    "promptIf": "-expr \"HasTestEnv\"",
                    "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', TestInfraHosts)\""
                  },
                  {
                    "bpKey": "common",
                    "name": "HasStageEnv",
                    "type": "Confirm",
                    "prompt": "Has Stage environment?",
                    "adefault": "true"
                  },
                  {
                    "bpKey": "common",
                    "name": "StageInfraHosts",
                    "type": "Editor",
                    "prompt": "Enter a new-line delimited list of host names related to Stage environment",
                    "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                    "promptIf": "-expr \"HasStageEnv\"",
                    "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', StageInfraHosts)\""
                  },
                  {
                    "bpKey": "common",
                    "name": "HasProdEnv",
                    "type": "Confirm",
                    "prompt": "Has Production environment?",
                    "adefault": "true"
                  },
                  {
                    "bpKey": "common",
                    "name": "ProdInfraHosts",
                    "type": "Editor",
                    "prompt": "Enter a new-line delimited list of host names related to Production environment",
                    "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                    "promptIf": "-expr \"HasProdEnv\"",
                    "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', ProdInfraHosts)\""
                  },
                  {
                    "bpKey": "common",
                    "name": "InfraType",
                    "type": "Select",
                    "prompt": "Select infrastructure type!",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Unix/Linux",
                        "value": "linux"
                      }
                    ]
                  },
                  {
                    "bpKey": "common",
                    "name": "DevJumpName",
                    "type": "Select",
                    "prompt": "Select Dev jumpstation name.",
                    "description": "If 'N/A' Dev jumpstation will not be set.",
                    "options": [
                      {
                        "label": "N/A",
                        "value": "n/a"
                      },
                      {
                        "label": "Test_01",
                        "value": "Infrastructure/SshJumpstations/Test_01"
                      },
                      {
                        "label": "Test_02",
                        "value": "Infrastructure/SshJumpstations/Test_02"
                      },
                      {
                        "label": "Prod_01",
                        "value": "Infrastructure/SshJumpstations/Prod_01"
                      },
                      {
                        "label": "Prod_02",
                        "value": "Infrastructure/SshJumpstations/Prod_02"
                      }
                    ],
                    "promptIf": "-expr \"HasDevEnv && InfraType == 'linux'\""
                  },
                  {
                    "bpKey": "common",
                    "name": "TestJumpName",
                    "type": "Select",
                    "prompt": "Test jumpstation name. If 'N/A' jumpstation will not be set.",
                    "options": [
                      {
                        "label": "N/A",
                        "value": "n/a"
                      },
                      {
                        "label": "Test_01",
                        "value": "Infrastructure/SshJumpstations/Test_01"
                      },
                      {
                        "label": "Test_02",
                        "value": "Infrastructure/SshJumpstations/Test_02"
                      },
                      {
                        "label": "Prod_01",
                        "value": "Infrastructure/SshJumpstations/Prod_01"
                      },
                      {
                        "label": "Prod_02",
                        "value": "Infrastructure/SshJumpstations/Prod_02"
                      }
                    ],
                    "promptIf": "-expr \"HasTestEnv && InfraType == 'linux'\""
                  },
                  {
                    "bpKey": "common",
                    "name": "StageJumpName",
                    "type": "Select",
                    "prompt": "Stage jumpstation name. If 'N/A' jumpstation will not be set.",
                    "options": [
                      {
                        "label": "N/A",
                        "value": "n/a"
                      },
                      {
                        "label": "Stage_01",
                        "value": "Infrastructure/SshJumpstations/Stage_01"
                      },
                      {
                        "label": "Stage_02",
                        "value": "Infrastructure/SshJumpstations/Stage_02"
                      },
                      {
                        "label": "Prod_01",
                        "value": "Infrastructure/SshJumpstations/Prod_01"
                      },
                      {
                        "label": "Prod_02",
                        "value": "Infrastructure/SshJumpstations/Prod_02"
                      }
                    ],
                    "promptIf": "-expr \"HasStageEnv && InfraType == 'linux'\""
                  },
                  {
                    "bpKey": "common",
                    "name": "ProdJumpName",
                    "type": "Select",
                    "prompt": "Prod jumpstation name. If 'N/A' jumpstation will not be set.",
                    "options": [
                      {
                        "label": "N/A",
                        "value": "n/a"
                      },
                      {
                        "label": "Prod_01",
                        "value": "Infrastructure/SshJumpstations/Prod_01"
                      },
                      {
                        "label": "Prod_02",
                        "value": "Infrastructure/SshJumpstations/Prod_02"
                      }
                    ],
                    "promptIf": "-expr \"HasProdEnv && InfraType == 'linux'\""
                  },
                  {
                    "bpKey": "common",
                    "name": "NotDefaultUser",
                    "type": "Confirm",
                    "prompt": "Set alternate user? (Besides svc-xldp?)",
                    "description": "If 'yes' then a userid and password will be input to utilize alternate user besides svc-xldp.",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "common",
                    "name": "HostUserName",
                    "type": "Input",
                    "prompt": "What is the host user?",
                    "promptIf": "-expr \"NotDefaultUser\""
                  },
                  {
                    "bpKey": "common",
                    "name": "HostUserPassword",
                    "type": "SecretInput",
                    "prompt": "What is the host password?",
                    "promptIf": "-expr \"NotDefaultUser\""
                  },
                  {
                    "bpKey": "common",
                    "name": "DeployType",
                    "type": "Select",
                    "prompt": "Select the deployment type:",
                    "adefault": "base",
                    "options": [
                      {
                        "label": "Specialized Base Dictionary",
                        "value": "base"
                      },
                      {
                        "label": "Specialized Helm Dictionary",
                        "value": "helm"
                      },
                      {
                        "label": "Specialized Jboss Dictionary",
                        "value": "jboss"
                      },
                      {
                        "label": "Specialized Was Dictionary",
                        "value": "was"
                      }
                    ]
                  },
                  {
                    "bpKey": "base",
                    "name": "DevUnencryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Dev unencrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasDevEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', DevUnencryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "DevEncryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Dev encrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasDevEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', DevEncryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "TestUnencryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Test unencrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasTestEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', TestUnencryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "TestEncryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Test encrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasTestEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', TestEncryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "StageUnencryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Stage unencrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasStageEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', StageUnencryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "StageEncryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Stage encrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasStageEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', StageEncryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "ProdUnencryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Production unencrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasProdEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))+)', ProdUnencryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "ProdEncryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Production encrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'base') && (HasProdEnv)\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', ProdEncryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "CommonUnencryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Common unencrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common unencrypted dictionary will have values used across all environments",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'base'\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonUnencryptedDict)\""
                  },
                  {
                    "bpKey": "base",
                    "name": "CommonEncryptedDict",
                    "type": "Editor",
                    "prompt": "Enter Common encrypted dictionary key-values.",
                    "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common encrypted dictionary will have secret values used across all environments",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'base'\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonEncryptedDict)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "JavaInstall",
                    "type": "Input",
                    "prompt": "Enter Java installation location on Helm CLI execution host!",
                    "description": "Specify directory location of java executable. (e.g. /app/azure/tools/java/1.8.0_251/bin). ",
                    "promptIf": "-expr \"DeployType == 'helm'\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "SpringBootProfile",
                    "type": "Select",
                    "prompt": "Select the Spring Boot Profile:",
                    "description": "This is the profile to use for CLI Automation.  This shouldn't have to change, but is there for RE testing.",
                    "adefault": "xlrdb",
                    "options": [
                      {
                        "label": "xlrdb",
                        "value": "xlrdb"
                      },
                      {
                        "label": "xlrdbtest",
                        "value": "xlrdbtest"
                      }
                    ],
                    "promptIf": "-expr \"DeployType == 'helm'\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "ProxySettings",
                    "type": "Input",
                    "prompt": "Enter spring boot profile for helm automation scripts",
                    "description": "These will be the -D settings to have java communicate through network proxy.",
                    "adefault": "-Dproxy.Host=proxy.cs.zionsbank.com -Dproxy.Port=8080",
                    "promptIf": "-expr \"DeployType == 'helm'\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "UseProxy",
                    "type": "Confirm",
                    "prompt": "Indicate if helm cli will use network proxy.",
                    "description": "If set to true helm will run under network proxy.",
                    "adefault": "true",
                    "promptIf": "-expr \"DeployType == 'helm'\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployMethodDev",
                    "type": "Select",
                    "prompt": "Dev - Select JBoss deploy method!",
                    "description": "A selection various way a JBoss can be deployed. ",
                    "adefault": "regularDeployWithRestart",
                    "options": [
                      {
                        "label": "Regular Deploy w/ Restart",
                        "value": "regularDeployWithRestart"
                      },
                      {
                        "label": "Force Deploy w/ Restart",
                        "value": "forceDeployWithRestart"
                      },
                      {
                        "label": "Regular Deploy",
                        "value": "regularDeploy"
                      },
                      {
                        "label": "Force Deploy",
                        "value": "forceDeploy"
                      }
                    ],
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployDirDev",
                    "type": "Input",
                    "prompt": "Dev - Input the directory to place deployable.",
                    "description": "The directory location to place JBoss deployable.",
                    "adefault": "/app/deploy",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployPortDev",
                    "type": "Input",
                    "prompt": "Dev - Input JBoss port to communicate deployable operations",
                    "description": "The communication port for JBoss deployment.",
                    "adefault": "9990",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "InstanceNameDev",
                    "type": "Input",
                    "prompt": "Dev - The name of the JBoss instance.",
                    "description": "A instance name of the JBoss install",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossControllerDev",
                    "type": "Input",
                    "prompt": "Dev - The name of the JBoss host.",
                    "description": "A host name of the JBoss install",
                    "adefault": "$(hostname -i)",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossHomeDev",
                    "type": "Input",
                    "prompt": "Dev - The directory of jboss install.",
                    "description": "The directory of the JBoss install",
                    "adefault": "/app/jboss/jboss-eap-7.4",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasDevEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployMethodTest",
                    "type": "Select",
                    "prompt": "Test - Select JBoss deploy method!",
                    "description": "A selection various way a JBoss can be deployed. ",
                    "adefault": "regularDeployWithRestart",
                    "options": [
                      {
                        "label": "Regular Deploy w/ Restart",
                        "value": "regularDeployWithRestart"
                      },
                      {
                        "label": "Force Deploy w/ Restart",
                        "value": "forceDeployWithRestart"
                      },
                      {
                        "label": "Regular Deploy",
                        "value": "regularDeploy"
                      },
                      {
                        "label": "Force Deploy",
                        "value": "forceDeploy"
                      }
                    ],
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployDirTest",
                    "type": "Input",
                    "prompt": "Test - Input the directory to place deployable.",
                    "description": "The directory location to place JBoss deployable.",
                    "adefault": "/app/deploy",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployPortTest",
                    "type": "Input",
                    "prompt": "Test - Input JBoss port to communicate deployable operations",
                    "description": "The communication port for JBoss deployment.",
                    "adefault": "9990",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "InstanceNameTest",
                    "type": "Input",
                    "prompt": "Test - The name of the JBoss instance.",
                    "description": "A instance name of the JBoss install",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossControllerTest",
                    "type": "Input",
                    "prompt": "Test - The name of the JBoss host.",
                    "description": "A host name of the JBoss install",
                    "adefault": "$(hostname -i)",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossHomeTest",
                    "type": "Input",
                    "prompt": "Test - The directory of jboss install.",
                    "description": "The directory of the JBoss install",
                    "adefault": "/app/jboss/jboss-eap-7.4",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasTestEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployMethodStage",
                    "type": "Select",
                    "prompt": "Stage - Select JBoss deploy method!",
                    "description": "A selection various way a JBoss can be deployed. ",
                    "adefault": "regularDeployWithRestart",
                    "options": [
                      {
                        "label": "Regular Deploy w/ Restart",
                        "value": "regularDeployWithRestart"
                      },
                      {
                        "label": "Force Deploy w/ Restart",
                        "value": "forceDeployWithRestart"
                      },
                      {
                        "label": "Regular Deploy",
                        "value": "regularDeploy"
                      },
                      {
                        "label": "Force Deploy",
                        "value": "forceDeploy"
                      }
                    ],
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployDirStage",
                    "type": "Input",
                    "prompt": "Stage - Input the directory to place deployable.",
                    "description": "The directory location to place JBoss deployable.",
                    "adefault": "/app/deploy",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployPortStage",
                    "type": "Input",
                    "prompt": "Stage - Input JBoss port to communicate deployable operations",
                    "description": "The communication port for JBoss deployment.",
                    "adefault": "9990",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "InstanceNameStage",
                    "type": "Input",
                    "prompt": "Stage - The name of the JBoss instance.",
                    "description": "A instance name of the JBoss install",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossControllerStage",
                    "type": "Input",
                    "prompt": "Stage - The name of the JBoss host.",
                    "description": "A host name of the JBoss install",
                    "adefault": "$(hostname -i)",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossHomeStage",
                    "type": "Input",
                    "prompt": "Stage - The directory of jboss install.",
                    "description": "The directory of the JBoss install",
                    "adefault": "/app/jboss/jboss-eap-7.4",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasStageEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployMethodProd",
                    "type": "Select",
                    "prompt": "Prod - Select JBoss deploy method!",
                    "description": "A selection various way a JBoss can be deployed. ",
                    "adefault": "regularDeployWithRestart",
                    "options": [
                      {
                        "label": "Regular Deploy w/ Restart",
                        "value": "regularDeployWithRestart"
                      },
                      {
                        "label": "Force Deploy w/ Restart",
                        "value": "forceDeployWithRestart"
                      },
                      {
                        "label": "Regular Deploy",
                        "value": "regularDeploy"
                      },
                      {
                        "label": "Force Deploy",
                        "value": "forceDeploy"
                      }
                    ],
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployDirProd",
                    "type": "Input",
                    "prompt": "Prod - Input the directory to place deployable.",
                    "description": "The directory location to place JBoss deployable.",
                    "adefault": "/app/deploy",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "DeployPortProd",
                    "type": "Input",
                    "prompt": "Prod - Input JBoss port to communicate deployable operations",
                    "description": "The communication port for JBoss deployment.",
                    "adefault": "9990",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "InstanceNameProd",
                    "type": "Input",
                    "prompt": "Prod - The name of the JBoss instance.",
                    "description": "A instance name of the JBoss install",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossControllerProd",
                    "type": "Input",
                    "prompt": "Prod - The name of the JBoss host.",
                    "description": "A host name of the JBoss install",
                    "adefault": "$(hostname -i)",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "JbossHomeProd",
                    "type": "Input",
                    "prompt": "Prod - The directory of jboss install.",
                    "description": "The directory of the JBoss install",
                    "adefault": "/app/jboss/jboss-eap-7.4",
                    "promptIf": "-expr \"(DeployType == 'jboss') && (HasProdEnv)\""
                  },
                  {
                    "bpKey": "was",
                    "name": "DeployMethod",
                    "type": "Select",
                    "prompt": "Select JBoss deploy method!",
                    "description": "A selection various way a JBoss can be deployed. ",
                    "adefault": "regularDeployWithRestart",
                    "options": [
                      {
                        "label": "Regular Deploy w/ Restart",
                        "value": "regularDeployWithRestart"
                      },
                      {
                        "label": "Force Deploy w/ Restart",
                        "value": "forceDeployWithRestart"
                      },
                      {
                        "label": "Regular Deploy",
                        "value": "regularDeploy"
                      },
                      {
                        "label": "Force Deploy",
                        "value": "forceDeploy"
                      }
                    ],
                    "promptIf": "-expr \"DeployType == 'was'\""
                  },
                  {
                    "bpKey": "was",
                    "name": "DeployDir",
                    "type": "Input",
                    "prompt": "Input the directory to place deployable.",
                    "description": "The directory location to place JBoss deployable.",
                    "adefault": "/app/deploy",
                    "promptIf": "-expr \"DeployType == 'was'\""
                  },
                  {
                    "bpKey": "was",
                    "name": "DeployPort",
                    "type": "Input",
                    "prompt": "Input JBoss port to communicate deployable operations",
                    "description": "The communication port for JBoss deployment.",
                    "adefault": "9990",
                    "promptIf": "-expr \"DeployType == 'was'\""
                  },
                  {
                    "bpKey": "was",
                    "name": "InstanceName",
                    "type": "Input",
                    "prompt": "The name of the JBoss instance.",
                    "description": "A instance name of the JBoss install",
                    "promptIf": "-expr \"DeployType == 'was'\""
                  },
                  {
                    "bpKey": "was",
                    "name": "JbossController",
                    "type": "Input",
                    "prompt": "The name of the JBoss host.",
                    "description": "A host name of the JBoss install",
                    "adefault": "(hostname -i)",
                    "promptIf": "-expr \"DeployType == 'was'\""
                  },
                  {
                    "bpKey": "was",
                    "name": "JbossHome",
                    "type": "Input",
                    "prompt": "The directory of jboss install.",
                    "description": "The directory of the JBoss install",
                    "adefault": "/app/jboss/jboss-eap-7.4",
                    "promptIf": "-expr \"DeployType == 'was'\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Common%3A+Project+XLD+Elements"
              }
            ]
          },
          {
            "name": "project-xld-elements-g",
            "title": "project-xld-elements-g",
            "parentName": "common",
            "folders": [
              {
                "name": "common",
                "title": "common",
                "parentName": "project-xld-elements-g",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Project XLD Common Elements",
                    "type": "Groovy",
                    "description": "This defines/initializes generic common use XLD elements of infrastructure and environment.\n",
                    "path": "common/project-xld-elements-g",
                    "name": "common",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [
                      "AppArea",
                      "EnvName"
                    ],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "common",
                        "name": "EnvName",
                        "type": "Input",
                        "prompt": "Enter a name for the environment being managed."
                      },
                      {
                        "bpKey": "common",
                        "name": "InfraHosts",
                        "type": "Editor",
                        "prompt": "Enter a new-line delimited list of host names related to environment",
                        "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                        "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', InfraHosts)\""
                      },
                      {
                        "bpKey": "common",
                        "name": "JumpName",
                        "type": "Select",
                        "prompt": "Select Dev jumpstation name.",
                        "description": "If 'N/A' Dev jumpstation will not be set.",
                        "options": [
                          {
                            "label": "N/A",
                            "value": "n/a"
                          },
                          {
                            "label": "Test_01",
                            "value": "Infrastructure/SshJumpstations/Test_01"
                          },
                          {
                            "label": "Test_02",
                            "value": "Infrastructure/SshJumpstations/Test_02"
                          },
                          {
                            "label": "Stage_01",
                            "value": "Infrastructure/SshJumpstations/Stage_01"
                          },
                          {
                            "label": "Stage_02",
                            "value": "Infrastructure/SshJumpstations/Stage_02"
                          },
                          {
                            "label": "Prod_01",
                            "value": "Infrastructure/SshJumpstations/Prod_01"
                          },
                          {
                            "label": "Prod_02",
                            "value": "Infrastructure/SshJumpstations/Prod_02"
                          }
                        ],
                        "promptIf": "-expr \"InfraType == 'linux'\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "parts",
                "title": "parts",
                "parentName": "project-xld-elements-g",
                "folders": [
                  {
                    "name": "base",
                    "title": "base",
                    "parentName": "parts",
                    "folders": [
                      {
                        "name": "common-dict",
                        "title": "common-dict",
                        "parentName": "base",
                        "folders": [],
                        "blueprints": [
                          {
                            "title": "Project XLD Base common-dict",
                            "type": "Groovy",
                            "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a specific environment.\n",
                            "path": "common/project-xld-elements-g/parts/base",
                            "name": "common-dict",
                            "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                            "outDir": [
                              "AppArea"
                            ],
                            "outRepoName": "devops",
                            "permissions": {
                              "isVisible": false
                            },
                            "dontUseProjectParmForExecution": false,
                            "dontUseRepoParmForExecution": false,
                            "isBuilder": false,
                            "parameters": [
                              {
                                "bpKey": "commondict",
                                "name": "CommonUnencryptedDict",
                                "type": "Editor",
                                "prompt": "Enter Common unencrypted dictionary key-values.",
                                "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common unencrypted dictionary will have values used across all environments",
                                "adefault": "n/a",
                                "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonUnencryptedDict)\""
                              },
                              {
                                "bpKey": "commondict",
                                "name": "CommonEncryptedDict",
                                "type": "Editor",
                                "prompt": "Enter Common encrypted dictionary key-values.",
                                "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common encrypted dictionary will have secret values used across all environments",
                                "adefault": "n/a",
                                "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', CommonEncryptedDict)\""
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "name": "env-dict",
                        "title": "env-dict",
                        "parentName": "base",
                        "folders": [],
                        "blueprints": [
                          {
                            "title": "Project XLD Base",
                            "type": "Groovy",
                            "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a specific environment.\n",
                            "path": "common/project-xld-elements-g/parts/base",
                            "name": "env-dict",
                            "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                            "outDir": [
                              "AppArea",
                              "EnvName"
                            ],
                            "outRepoName": "devops",
                            "permissions": {
                              "isVisible": false
                            },
                            "dontUseProjectParmForExecution": false,
                            "dontUseRepoParmForExecution": false,
                            "isBuilder": false,
                            "parameters": [
                              {
                                "bpKey": "envdict",
                                "name": "UnencryptedDict",
                                "type": "Editor",
                                "prompt": "Enter unencrypted dictionary key-values.",
                                "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common unencrypted dictionary will have values used across all environments",
                                "adefault": "n/a",
                                "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', UnencryptedDict)\""
                              },
                              {
                                "bpKey": "envdict",
                                "name": "EncryptedDict",
                                "type": "Editor",
                                "prompt": "Enter encrypted dictionary key-values.",
                                "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common encrypted dictionary will have secret values used across all environments",
                                "adefault": "n/a",
                                "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', EncryptedDict)\""
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "blueprints": []
                  },
                  {
                    "name": "helm",
                    "title": "helm",
                    "parentName": "parts",
                    "folders": [],
                    "blueprints": [
                      {
                        "title": "Project XLD Helm (Groovy)",
                        "type": "Groovy",
                        "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a helm XLD config.\n",
                        "path": "common/project-xld-elements-g/parts",
                        "name": "helm",
                        "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                        "outDir": [
                          "AppArea"
                        ],
                        "outRepoName": "devops",
                        "permissions": {
                          "isVisible": false
                        },
                        "dontUseProjectParmForExecution": false,
                        "dontUseRepoParmForExecution": false,
                        "isBuilder": false,
                        "parameters": [
                          {
                            "bpKey": "helm",
                            "name": "JavaInstall",
                            "type": "Input",
                            "prompt": "Enter Java installation location on Helm CLI execution host!",
                            "description": "Specify directory location of java executable. (e.g. /app/azure/tools/java/1.8.0_251/bin). "
                          },
                          {
                            "bpKey": "helm",
                            "name": "SpringBootProfile",
                            "type": "Select",
                            "prompt": "Select the Spring Boot Profile:",
                            "description": "This is the profile to use for CLI Automation.  This shouldn't have to change, but is there for RE testing.",
                            "adefault": "xlrdb",
                            "options": [
                              {
                                "label": "xlrdb",
                                "value": "xlrdb"
                              },
                              {
                                "label": "xlrdbtest",
                                "value": "xlrdbtest"
                              }
                            ]
                          },
                          {
                            "bpKey": "helm",
                            "name": "ProxySettings",
                            "type": "Input",
                            "prompt": "Enter spring boot profile for helm automation scripts",
                            "description": "These will be the -D settings to have java communicate through network proxy.",
                            "adefault": "-Dproxy.Host=proxy.cs.zionsbank.com -Dproxy.Port=8080"
                          },
                          {
                            "bpKey": "helm",
                            "name": "UseProxy",
                            "type": "Confirm",
                            "prompt": "Indicate if helm cli will use network proxy.",
                            "description": "If set to true helm will run under network proxy.",
                            "adefault": "true"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "jboss",
                    "title": "jboss",
                    "parentName": "parts",
                    "folders": [],
                    "blueprints": [
                      {
                        "title": "Project XLD JBoss",
                        "type": "XL",
                        "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a JBoss XLD config.\n",
                        "path": "common/project-xld-elements-g/parts",
                        "name": "jboss",
                        "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                        "outDir": [],
                        "permissions": {
                          "isVisible": false
                        },
                        "dontUseProjectParmForExecution": false,
                        "dontUseRepoParmForExecution": false,
                        "isBuilder": false,
                        "parameters": [
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodDev",
                            "type": "Select",
                            "prompt": "Dev - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirDev",
                            "type": "Input",
                            "prompt": "Dev - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortDev",
                            "type": "Input",
                            "prompt": "Dev - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameDev",
                            "type": "Input",
                            "prompt": "Dev - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerDev",
                            "type": "Input",
                            "prompt": "Dev - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeDev",
                            "type": "Input",
                            "prompt": "Dev - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasDevEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodTest",
                            "type": "Select",
                            "prompt": "Test - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirTest",
                            "type": "Input",
                            "prompt": "Test - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortTest",
                            "type": "Input",
                            "prompt": "Test - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameTest",
                            "type": "Input",
                            "prompt": "Test - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerTest",
                            "type": "Input",
                            "prompt": "Test - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeTest",
                            "type": "Input",
                            "prompt": "Test - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasTestEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodStage",
                            "type": "Select",
                            "prompt": "Stage - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirStage",
                            "type": "Input",
                            "prompt": "Stage - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortStage",
                            "type": "Input",
                            "prompt": "Stage - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameStage",
                            "type": "Input",
                            "prompt": "Stage - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerStage",
                            "type": "Input",
                            "prompt": "Stage - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeStage",
                            "type": "Input",
                            "prompt": "Stage - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasStageEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployMethodProd",
                            "type": "Select",
                            "prompt": "Prod - Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ],
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployDirProd",
                            "type": "Input",
                            "prompt": "Prod - Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "DeployPortProd",
                            "type": "Input",
                            "prompt": "Prod - Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "InstanceNameProd",
                            "type": "Input",
                            "prompt": "Prod - The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossControllerProd",
                            "type": "Input",
                            "prompt": "Prod - The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "$(hostname -i)",
                            "promptIf": "-expr \"HasProdEnv\""
                          },
                          {
                            "bpKey": "jboss",
                            "name": "JbossHomeProd",
                            "type": "Input",
                            "prompt": "Prod - The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4",
                            "promptIf": "-expr \"HasProdEnv\""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "was",
                    "title": "was",
                    "parentName": "parts",
                    "folders": [],
                    "blueprints": [
                      {
                        "title": "Project XLD Helm",
                        "type": "XL",
                        "description": "This defines/initializes generic base use XLD infrastructure and environment elements for a helm XLD config.\n",
                        "path": "common/project-xld-elements-g/parts",
                        "name": "was",
                        "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                        "outDir": [],
                        "permissions": {
                          "isVisible": false
                        },
                        "dontUseProjectParmForExecution": false,
                        "dontUseRepoParmForExecution": false,
                        "isBuilder": false,
                        "parameters": [
                          {
                            "bpKey": "was",
                            "name": "DeployMethod",
                            "type": "Select",
                            "prompt": "Select JBoss deploy method!",
                            "description": "A selection various way a JBoss can be deployed. ",
                            "adefault": "regularDeployWithRestart",
                            "options": [
                              {
                                "label": "Regular Deploy w/ Restart",
                                "value": "regularDeployWithRestart"
                              },
                              {
                                "label": "Force Deploy w/ Restart",
                                "value": "forceDeployWithRestart"
                              },
                              {
                                "label": "Regular Deploy",
                                "value": "regularDeploy"
                              },
                              {
                                "label": "Force Deploy",
                                "value": "forceDeploy"
                              }
                            ]
                          },
                          {
                            "bpKey": "was",
                            "name": "DeployDir",
                            "type": "Input",
                            "prompt": "Input the directory to place deployable.",
                            "description": "The directory location to place JBoss deployable.",
                            "adefault": "/app/deploy"
                          },
                          {
                            "bpKey": "was",
                            "name": "DeployPort",
                            "type": "Input",
                            "prompt": "Input JBoss port to communicate deployable operations",
                            "description": "The communication port for JBoss deployment.",
                            "adefault": "9990"
                          },
                          {
                            "bpKey": "was",
                            "name": "InstanceName",
                            "type": "Input",
                            "prompt": "The name of the JBoss instance.",
                            "description": "A instance name of the JBoss install"
                          },
                          {
                            "bpKey": "was",
                            "name": "JbossController",
                            "type": "Input",
                            "prompt": "The name of the JBoss host.",
                            "description": "A host name of the JBoss install",
                            "adefault": "(hostname -i)"
                          },
                          {
                            "bpKey": "was",
                            "name": "JbossHome",
                            "type": "Input",
                            "prompt": "The directory of jboss install.",
                            "description": "The directory of the JBoss install",
                            "adefault": "/app/jboss/jboss-eap-7.4"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "blueprints": []
              }
            ],
            "blueprints": [
              {
                "title": "Project XLD Common Groovy",
                "type": "Groovy",
                "description": "This defines/initializes pick XLD infrastructure and environment blueprint type for a project\n",
                "path": "common",
                "name": "project-xld-elements-g",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "AppArea"
                ],
                "cacheKey": [
                  "AppArea"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS",
                    "Sandbox",
                    "CorpSvcs"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?"
                  },
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "AppArea",
                    "type": "Input",
                    "prompt": "Application area name.",
                    "description": "XL Deploy sub-directories? if value is 'n/a', then there will be no sub-directories XLD folders.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', AppArea)\""
                  },
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "NotDefaultUser",
                    "type": "Confirm",
                    "prompt": "Set alternate user? (Besides svc-xldp?)",
                    "description": "If 'yes' then a userid and password will be input to utilize alternate user besides svc-xldp.",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "HostUserName",
                    "type": "Input",
                    "prompt": "What is the host user?",
                    "promptIf": "-expr \"NotDefaultUser\""
                  },
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "HostUserPassword",
                    "type": "SecretInput",
                    "prompt": "What is the host password?",
                    "promptIf": "-expr \"NotDefaultUser\""
                  },
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "InfraType",
                    "type": "Select",
                    "prompt": "Select infrastructure type!",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Unix/Linux",
                        "value": "linux"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "DeployType",
                    "type": "Select",
                    "prompt": "Select the deployment type:",
                    "adefault": "base",
                    "options": [
                      {
                        "label": "Specialized Base Dictionary",
                        "value": "base"
                      },
                      {
                        "label": "Specialized Helm Dictionary",
                        "value": "helm"
                      },
                      {
                        "label": "Specialized Jboss Dictionary",
                        "value": "jboss"
                      },
                      {
                        "label": "Specialized Was Dictionary",
                        "value": "was"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectxldelementsg",
                    "name": "EnvNames",
                    "type": "Repeat",
                    "prompt": "Enter a comma delimited list of Environments",
                    "description": "Digital.ai Environment/Infrastructure names used for this blueprint.",
                    "repeatDelimiter": ",",
                    "indexParameter": "EnvName",
                    "repeatParameters": [
                      {
                        "name": "EnvName",
                        "type": "Input",
                        "prompt": "Enter a name for the environment being managed."
                      },
                      {
                        "name": "InfraHosts",
                        "type": "Editor",
                        "prompt": "Enter a new-line delimited list of host names related to environment",
                        "description": "Newline-separated list of host names or IP addresses. Related 'tags'can be added with protocol <host>:<tag1>,<tag2>....",
                        "validate": "-expr \"regex('(([a-zA-Z0-9\\\\\\\\.]*(:([0-9a-zA-Z_\\\\\\\\.]*[,]{0,1})*){0,1}(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|[a-zA-Z0-9]))+)', InfraHosts)\""
                      },
                      {
                        "name": "JumpName",
                        "type": "Select",
                        "prompt": "Select Dev jumpstation name.",
                        "description": "If 'N/A' Dev jumpstation will not be set.",
                        "options": [
                          {
                            "label": "N/A",
                            "value": "n/a"
                          },
                          {
                            "label": "Test_01",
                            "value": "Infrastructure/SshJumpstations/Test_01"
                          },
                          {
                            "label": "Test_02",
                            "value": "Infrastructure/SshJumpstations/Test_02"
                          },
                          {
                            "label": "Stage_01",
                            "value": "Infrastructure/SshJumpstations/Stage_01"
                          },
                          {
                            "label": "Stage_02",
                            "value": "Infrastructure/SshJumpstations/Stage_02"
                          },
                          {
                            "label": "Prod_01",
                            "value": "Infrastructure/SshJumpstations/Prod_01"
                          },
                          {
                            "label": "Prod_02",
                            "value": "Infrastructure/SshJumpstations/Prod_02"
                          }
                        ],
                        "promptIf": "-expr \"InfraType == 'linux'\""
                      },
                      {
                        "name": "UnencryptedDict",
                        "type": "Editor",
                        "prompt": "Enter unencrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common unencrypted dictionary will have values used across all environments",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'base'\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', UnencryptedDict)\""
                      },
                      {
                        "name": "EncryptedDict",
                        "type": "Editor",
                        "prompt": "Enter encrypted dictionary key-values.",
                        "description": "Newline-separated list of key=value items to be created. (e.g. key.one=val1\nkey.two=val2). If n/a entry dictionary will not set values. The common encrypted dictionary will have secret values used across all environments",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'base'\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(([0-9a-zA-Z_.]+=[ \\\\\\\\S]*[\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S])+)', EncryptedDict)\""
                      }
                    ]
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Common%3A+Project+XLD+Elements",
                "commitPatterns": "apparea"
              }
            ]
          },
          {
            "name": "project-xlr-elements",
            "title": "project-xlr-elements",
            "parentName": "common",
            "folders": [],
            "blueprints": [
              {
                "title": "XLR Elements",
                "type": "XL",
                "description": "This creates yaml and executes to instantiate XLR elements for selected application XLD environments.\n",
                "path": "common",
                "name": "project-xlr-elements",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "isVisible": false
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectxlrelements",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the environment?"
                  },
                  {
                    "bpKey": "projectxlrelements",
                    "name": "HasAppArea",
                    "type": "Confirm",
                    "prompt": "Is there a application area?"
                  },
                  {
                    "bpKey": "projectxlrelements",
                    "name": "AppArea",
                    "type": "Input",
                    "prompt": "Application area name?",
                    "promptIf": "-expr \"HasAppArea\""
                  },
                  {
                    "bpKey": "projectxlrelements",
                    "name": "AppName",
                    "type": "Input",
                    "prompt": "Application Name?"
                  },
                  {
                    "bpKey": "projectxlrelements",
                    "name": "EnvNames",
                    "type": "Input",
                    "prompt": "Comma delimited list of environment names in order of promotion level?",
                    "description": "List of environments in release plan"
                  },
                  {
                    "bpKey": "projectxlrelements",
                    "name": "EmailRecipients",
                    "type": "Input",
                    "prompt": "Comma delimited list of notification emails"
                  }
                ]
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "dts",
        "title": "dts",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "ado",
            "title": "ado",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Project ADO blueprint for ADO part blueprints",
                "type": "XL",
                "description": "This defines/initializes generic base use ADO main build step for specialized build.  E.G. Dockerfile build.\n",
                "path": "dts",
                "name": "ado",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "cacheKey": [
                  "PartName"
                ],
                "outRepoName": "zions-blueprints",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "ado",
                    "name": "PartName",
                    "type": "Input",
                    "prompt": "The name of the blueprint part",
                    "description": "This field will be used to setup the ADO blueprint part in fragements/ado."
                  },
                  {
                    "bpKey": "ado",
                    "name": "ReleaseSteps",
                    "type": "Editor",
                    "prompt": "ADO yaml Release steps.",
                    "description": "These blueprint questions should be specified in ADO pipeline yaml. "
                  },
                  {
                    "bpKey": "ado",
                    "name": "CISteps",
                    "type": "Editor",
                    "prompt": "ADO yaml CI steps.",
                    "description": "These blueprint questions should be specified in ADO pipeline yaml. ",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "ado",
                    "name": "AdditionalQuestions",
                    "type": "Editor",
                    "prompt": "Blueprint questions to specialize values within build steps.",
                    "description": "These define additional values to specialize steps.  If 'n/a' there will be no additional blueprint parameters. ",
                    "adefault": "n/a"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+DTS%3A+XLD",
                "commitPatterns": "fragments/ado",
                "pullRequestReviewers": "@me"
              }
            ]
          },
          {
            "name": "ado-classic-migration",
            "title": "ado-classic-migration",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Migrate Classic Pipelines",
                "type": "Groovy",
                "description": "Aids in migration of pipelines developed with ADO Classic pipeline UI.\n",
                "path": "dts",
                "name": "ado-classic-migration",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "adoclassicmigration",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Enter the ADO project area name",
                    "description": "Azure DevOps project area name used for this blueprint."
                  },
                  {
                    "bpKey": "adoclassicmigration",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "Enter the ADO repository name",
                    "description": "Azure DevOps repository name used for this blueprint."
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+DTS%3A+ADO+Classic+Migration"
              }
            ]
          },
          {
            "name": "ado-classic-migratn-using-templates",
            "title": "ado-classic-migratn-using-templates",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Migrate Classic Pipeline using Templates",
                "type": "Groovy",
                "description": "Will migration a Classic ADO pipeline to YAML using standard blueprint templates.\n",
                "path": "dts",
                "name": "ado-classic-migratn-using-templates",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "adoclassicmigratnusingtemplates",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Enter the ADO project area name",
                    "description": "Azure DevOps project area name used for this blueprint."
                  },
                  {
                    "bpKey": "adoclassicmigratnusingtemplates",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "Enter the ADO repository name",
                    "description": "Azure DevOps repository name used for this blueprint."
                  },
                  {
                    "bpKey": "adoclassicmigratnusingtemplates",
                    "name": "XldAppPath",
                    "type": "Input",
                    "prompt": "Enter the XL Deploy application path if non-standard",
                    "description": "Non-standard path for the application in XL Deploy path. Enter this only if the path is not Project/Repo/Application"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+DTS%3A+ADO+Classic+Migration"
              }
            ]
          },
          {
            "name": "basic-maven",
            "title": "basic-maven",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "DTS Maven Pipeline",
                "type": "XL",
                "description": "Outline of ADO/XLD/XLR to build deploy a Maven project with single deployable artifact.\n",
                "path": "dts",
                "name": "basic-maven",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "ProjectName",
                  "AppName"
                ],
                "outRepoName": "devops",
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "basicmaven",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project?",
                    "description": "The name of the ADO project"
                  },
                  {
                    "bpKey": "basicmaven",
                    "name": "AppName",
                    "type": "Input",
                    "prompt": "What is the name of the application?",
                    "description": "This will be the name of the ADO repository"
                  },
                  {
                    "bpKey": "basicmaven",
                    "name": "RequiresSpecificPlatform",
                    "type": "Confirm",
                    "prompt": "Does the build require a specific platform?"
                  },
                  {
                    "bpKey": "basicmaven",
                    "name": "PlatformDemand",
                    "type": "Select",
                    "prompt": "Which platform does the build require?",
                    "options": [
                      "Windows",
                      "Linux"
                    ],
                    "promptIf": "-expr \"RequiresSpecificPlatform\""
                  },
                  {
                    "bpKey": "basicmaven",
                    "name": "PomFileName",
                    "type": "Input",
                    "prompt": "What is the POM file name?",
                    "adefault": "pom.xml"
                  },
                  {
                    "bpKey": "basicmaven",
                    "name": "DeployArchiveName",
                    "type": "Input",
                    "prompt": "What is the name of the archive to be deployed?",
                    "description": "This is the name of the built archive. Ex. 'naop_pro.war', 'osce.zip'"
                  }
                ]
              }
            ]
          },
          {
            "name": "logs",
            "title": "logs",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "View MicroService Logs",
                "type": "XL",
                "description": "This enables listing a timeframe of micro-service logs from MongoDB.\n",
                "path": "dts",
                "name": "logs",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "MongoCollection"
                ],
                "cacheKey": [
                  "MongoCollection"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "logs",
                    "name": "MongoCollection",
                    "type": "Select",
                    "prompt": "Select the microservice to view?",
                    "options": [
                      {
                        "label": "zions-pipeline-execution-microservice",
                        "value": "zions-pipeline-execution-microservice-logs"
                      },
                      {
                        "label": "zions-cxconfig-microservice",
                        "value": "zions-cxconfig-microservice-logs"
                      },
                      {
                        "label": "zions-vsts-policy-microservice",
                        "value": "zions-vsts-policy-microservice-logs"
                      },
                      {
                        "label": "zions-xlrtoado-event-microservice",
                        "value": "zions-xlrtoado-event-microservice-logs"
                      }
                    ]
                  },
                  {
                    "bpKey": "logs",
                    "name": "StartDate",
                    "type": "Input",
                    "prompt": "Enter a start time for log listing?  Format `yyyy-MM-dd HH:mm:ss`",
                    "validate": "-expr \"regex('^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2} \\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}$', StartDate)\""
                  },
                  {
                    "bpKey": "logs",
                    "name": "EndDate",
                    "type": "Input",
                    "prompt": "Enter a end time for log listing? Format `yyyy-MM-dd HH:mm:ss`",
                    "validate": "-expr \"regex('^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2} \\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}$', EndDate)\""
                  },
                  {
                    "bpKey": "logs",
                    "name": "LogLevel",
                    "type": "Select",
                    "prompt": "Select log Level",
                    "adefault": "WARN",
                    "options": [
                      {
                        "label": "Error",
                        "value": "ERROR"
                      },
                      {
                        "label": "Warn",
                        "value": "WARN"
                      },
                      {
                        "label": "Info",
                        "value": "INFO"
                      },
                      {
                        "label": "Debug",
                        "value": "DEBUG"
                      }
                    ]
                  },
                  {
                    "bpKey": "logs",
                    "name": "SendTo",
                    "type": "Input",
                    "prompt": "Enter name, email or me to send via email. if 'n/a' then no email will be sent",
                    "adefault": "n/a"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Provisioning%3A+Create+GIT+Repository",
                "commitPatterns": "dontdoit"
              }
            ]
          },
          {
            "name": "logs-g",
            "title": "logs-g",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "View MicroService Logs Groovy",
                "type": "Groovy",
                "description": "This enables listing a timeframe of micro-service logs from MongoDB.\n",
                "path": "dts",
                "name": "logs-g",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "MongoCollection"
                ],
                "cacheKey": [
                  "MongoCollection"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "logsg",
                    "name": "MongoCollection",
                    "type": "Select",
                    "prompt": "Select the microservice to view?",
                    "options": [
                      {
                        "label": "zions-pipeline-execution-microservice",
                        "value": "zions-pipeline-execution-microservice-logs"
                      },
                      {
                        "label": "zions-cxconfig-microservice",
                        "value": "zions-cxconfig-microservice-logs"
                      },
                      {
                        "label": "zions-vsts-policy-microservice",
                        "value": "zions-vsts-policy-microservice-logs"
                      },
                      {
                        "label": "zions-xlrtoado-event-microservice",
                        "value": "zions-xlrtoado-event-microservice-logs"
                      }
                    ]
                  },
                  {
                    "bpKey": "logsg",
                    "name": "StartDate",
                    "type": "Input",
                    "prompt": "Enter a start time for log listing?  Format `yyyy-MM-dd HH:mm:ss`",
                    "validate": "-expr \"regex('^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2} \\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}$', StartDate)\""
                  },
                  {
                    "bpKey": "logsg",
                    "name": "EndDate",
                    "type": "Input",
                    "prompt": "Enter a end time for log listing? Format `yyyy-MM-dd HH:mm:ss`",
                    "validate": "-expr \"regex('^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2} \\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}$', EndDate)\""
                  },
                  {
                    "bpKey": "logsg",
                    "name": "LogLevel",
                    "type": "Select",
                    "prompt": "Select log Level",
                    "adefault": "WARN",
                    "options": [
                      {
                        "label": "Error",
                        "value": "ERROR"
                      },
                      {
                        "label": "Warn",
                        "value": "WARN"
                      },
                      {
                        "label": "Info",
                        "value": "INFO"
                      },
                      {
                        "label": "Debug",
                        "value": "DEBUG"
                      }
                    ]
                  },
                  {
                    "bpKey": "logsg",
                    "name": "SendTo",
                    "type": "Input",
                    "prompt": "Enter name, email or me to send via email. if 'n/a' then no email will be sent",
                    "adefault": "n/a"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Provisioning%3A+Create+GIT+Repository",
                "commitPatterns": "dontdoit"
              }
            ]
          },
          {
            "name": "micro-service",
            "title": "micro-service",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "DTS Micro-service Pipeline for MS with existing code",
                "type": "XL",
                "description": "Outline of ADO/XLD/XLR to build deploy microservices.\n",
                "path": "dts",
                "name": "micro-service",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "cacheKey": [
                  "ProjectName",
                  "AppName"
                ],
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "microservice",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO Project?"
                  },
                  {
                    "bpKey": "microservice",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "What is the output GIT Repository?"
                  },
                  {
                    "bpKey": "microservice",
                    "name": "AppName",
                    "type": "Input",
                    "prompt": "What is the name of the micro-service project?",
                    "adefault": "-expr \"RepoName\""
                  },
                  {
                    "bpKey": "microservice",
                    "name": "Platform",
                    "type": "Select",
                    "prompt": "What type of deploy?",
                    "options": [
                      "Windows",
                      "Linux",
                      "K8S"
                    ]
                  },
                  {
                    "bpKey": "microservice",
                    "name": "RequiresCollection",
                    "type": "Confirm",
                    "prompt": "Does this require tfs.collection property?"
                  },
                  {
                    "bpKey": "microservice",
                    "name": "BuildIncludes",
                    "type": "Input",
                    "prompt": "Enter a comma delimited list of projects or sub-folders to include to determine if new release is required."
                  },
                  {
                    "bpKey": "microservice",
                    "name": "Queuename",
                    "type": "Input",
                    "prompt": "What is the queue name?"
                  },
                  {
                    "bpKey": "microservice",
                    "name": "WSTopics",
                    "type": "Input",
                    "prompt": "Enter comma delimited list of ADO event topics."
                  },
                  {
                    "bpKey": "microservice",
                    "name": "DeployDev",
                    "type": "Confirm",
                    "prompt": "Will this deploy to dev/testqa environment"
                  },
                  {
                    "bpKey": "windows",
                    "name": "IdList",
                    "type": "Select",
                    "prompt": "Select cluster size!",
                    "options": [
                      {
                        "label": "1",
                        "value": "0"
                      },
                      {
                        "label": "2",
                        "value": "0,1"
                      },
                      {
                        "label": "3",
                        "value": "0,1,2"
                      },
                      {
                        "label": "4",
                        "value": "0,1,2,3"
                      },
                      {
                        "label": "5",
                        "value": "0,1,2,3,4"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'Windows'\""
                  },
                  {
                    "bpKey": "linux",
                    "name": "IdList",
                    "type": "Select",
                    "prompt": "Select cluster size!",
                    "options": [
                      {
                        "label": "1",
                        "value": "0"
                      },
                      {
                        "label": "2",
                        "value": "0,1"
                      },
                      {
                        "label": "3",
                        "value": "0,1,2"
                      },
                      {
                        "label": "4",
                        "value": "0,1,2,3"
                      },
                      {
                        "label": "5",
                        "value": "0,1,2,3,4"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'Linux'\""
                  },
                  {
                    "bpKey": "k8s",
                    "name": "ServiceName",
                    "type": "Input",
                    "prompt": "What is the short service name?",
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  },
                  {
                    "bpKey": "k8s",
                    "name": "InstanceCount",
                    "type": "Input",
                    "prompt": "What is number of instance in K8S cluster?",
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  },
                  {
                    "bpKey": "k8s",
                    "name": "Team",
                    "type": "Select",
                    "prompt": "What is DTS Team name?",
                    "options": [
                      {
                        "label": "Release Engineering",
                        "value": "re"
                      },
                      {
                        "label": "ALMOps",
                        "value": "almops"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+DTS%3A+DTS+Micro-service+Pipeline"
              }
            ]
          },
          {
            "name": "micro-service-for-repo",
            "title": "micro-service-for-repo",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Repo and Micro-service Pipeline Output Stub Code",
                "type": "XL",
                "description": "Outline of ADO/XLD/XLR to build deploy microservices.\n",
                "path": "dts",
                "name": "micro-service-for-repo",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "isVisible": false
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO Project?"
                  },
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "AppName",
                    "type": "Input",
                    "prompt": "What is the name of the micro-service application/git repo name?"
                  },
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "Platform",
                    "type": "Select",
                    "prompt": "What type of deploy?",
                    "options": [
                      "Windows",
                      "Linux",
                      "K8S"
                    ]
                  },
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "RequiresCollection",
                    "type": "Confirm",
                    "prompt": "Does this require tfs.collection property?"
                  },
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "BuildIncludes",
                    "type": "Input",
                    "prompt": "Enter a comma delimited list of projects or sub-folders to include to determine if new release is required."
                  },
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "Queuename",
                    "type": "Input",
                    "prompt": "What is the queue name?"
                  },
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "WSTopics",
                    "type": "Input",
                    "prompt": "Enter comma delimited list of ADO event topics."
                  },
                  {
                    "bpKey": "microserviceforrepo",
                    "name": "DeployDev",
                    "type": "Confirm",
                    "prompt": "Will this deploy to dev/testqa environment"
                  },
                  {
                    "bpKey": "windows",
                    "name": "IdList",
                    "type": "Select",
                    "prompt": "Select cluster size!",
                    "options": [
                      {
                        "label": "1",
                        "value": "0"
                      },
                      {
                        "label": "2",
                        "value": "0,1"
                      },
                      {
                        "label": "3",
                        "value": "0,1,2"
                      },
                      {
                        "label": "4",
                        "value": "0,1,2,3"
                      },
                      {
                        "label": "5",
                        "value": "0,1,2,3,4"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'Windows'\""
                  },
                  {
                    "bpKey": "linux",
                    "name": "IdList",
                    "type": "Select",
                    "prompt": "Select cluster size!",
                    "options": [
                      {
                        "label": "1",
                        "value": "0"
                      },
                      {
                        "label": "2",
                        "value": "0,1"
                      },
                      {
                        "label": "3",
                        "value": "0,1,2"
                      },
                      {
                        "label": "4",
                        "value": "0,1,2,3"
                      },
                      {
                        "label": "5",
                        "value": "0,1,2,3,4"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'Linux'\""
                  },
                  {
                    "bpKey": "k8s",
                    "name": "ServiceName",
                    "type": "Input",
                    "prompt": "What is the short service name?",
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  },
                  {
                    "bpKey": "k8s",
                    "name": "InstanceCount",
                    "type": "Input",
                    "prompt": "What is number of instance in K8S cluster?",
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  },
                  {
                    "bpKey": "k8s",
                    "name": "Team",
                    "type": "Select",
                    "prompt": "What is DTS Team name?",
                    "options": [
                      {
                        "label": "Release Engineering",
                        "value": "re"
                      },
                      {
                        "label": "ALMOps",
                        "value": "almops"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  }
                ]
              }
            ]
          },
          {
            "name": "parts",
            "title": "parts",
            "parentName": "dts",
            "folders": [
              {
                "name": "k8s",
                "title": "k8s",
                "parentName": "parts",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Micro-service Pipeline for K8S",
                    "type": "XL",
                    "description": "Outline of ADO/XLD/XLR to build deploy microservices.\n",
                    "path": "dts/parts",
                    "name": "k8s",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "k8s",
                        "name": "ServiceName",
                        "type": "Input",
                        "prompt": "What is the short service name?"
                      },
                      {
                        "bpKey": "k8s",
                        "name": "InstanceCount",
                        "type": "Input",
                        "prompt": "What is number of instance in K8S cluster?"
                      },
                      {
                        "bpKey": "k8s",
                        "name": "Team",
                        "type": "Select",
                        "prompt": "What is DTS Team name?",
                        "options": [
                          {
                            "label": "Release Engineering",
                            "value": "re"
                          },
                          {
                            "label": "ALMOps",
                            "value": "almops"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "name": "linux",
                "title": "linux",
                "parentName": "parts",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Micro-service Pipeline for Linux",
                    "type": "XL",
                    "description": "Outline of ADO/XLD/XLR to build deploy microservices.\n",
                    "path": "dts/parts",
                    "name": "linux",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "linux",
                        "name": "IdList",
                        "type": "Select",
                        "prompt": "Select cluster size!",
                        "options": [
                          {
                            "label": "1",
                            "value": "0"
                          },
                          {
                            "label": "2",
                            "value": "0,1"
                          },
                          {
                            "label": "3",
                            "value": "0,1,2"
                          },
                          {
                            "label": "4",
                            "value": "0,1,2,3"
                          },
                          {
                            "label": "5",
                            "value": "0,1,2,3,4"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "name": "windows",
                "title": "windows",
                "parentName": "parts",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Micro-service Pipeline for Windows",
                    "type": "XL",
                    "description": "Outline of ADO/XLD/XLR to build deploy microservices.\n",
                    "path": "dts/parts",
                    "name": "windows",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "windows",
                        "name": "IdList",
                        "type": "Select",
                        "prompt": "Select cluster size!",
                        "options": [
                          {
                            "label": "1",
                            "value": "0"
                          },
                          {
                            "label": "2",
                            "value": "0,1"
                          },
                          {
                            "label": "3",
                            "value": "0,1,2"
                          },
                          {
                            "label": "4",
                            "value": "0,1,2,3"
                          },
                          {
                            "label": "5",
                            "value": "0,1,2,3,4"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "blueprints": []
          },
          {
            "name": "repo-with-micro-service",
            "title": "repo-with-micro-service",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Repo and Microservice Pipeline",
                "type": "XL",
                "description": "Outline of ADO/XLD/XLR to build deploy microservices.\n",
                "path": "dts",
                "name": "repo-with-micro-service",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "AppName",
                  "ProjectName"
                ],
                "cacheKey": [
                  "ProjectName",
                  "AppName"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the repo?"
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "AppName",
                    "type": "Input",
                    "prompt": "What is the name of the micro-service project/GIT Repository]?"
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "Platform",
                    "type": "Select",
                    "prompt": "What type of deploy?",
                    "options": [
                      "Windows",
                      "Linux",
                      "K8S"
                    ]
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "ServiceName",
                    "type": "Input",
                    "prompt": "What is K8S service name?",
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "InstanceCount",
                    "type": "Input",
                    "prompt": "What is number of instance in K8S cluster?",
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "Team",
                    "type": "Select",
                    "prompt": "What is DTS Team name?",
                    "options": [
                      {
                        "label": "Release Engineering",
                        "value": "re"
                      },
                      {
                        "label": "ALMOps",
                        "value": "almops"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'K8S'\""
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "RequiresCollection",
                    "type": "Confirm",
                    "prompt": "Does this require tfs.collection property?"
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "BuildIncludes",
                    "type": "Input",
                    "prompt": "Enter a comma delimited list of projects or sub-folders to include to determine if new release is required."
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "Queuename",
                    "type": "Input",
                    "prompt": "What is the queue name?"
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "WSTopics",
                    "type": "Input",
                    "prompt": "Enter comma delimited list of ADO event topics."
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "IdList",
                    "type": "Select",
                    "prompt": "Select cluster size!",
                    "options": [
                      {
                        "label": "1",
                        "value": "0"
                      },
                      {
                        "label": "2",
                        "value": "0,1"
                      },
                      {
                        "label": "3",
                        "value": "0,1,2"
                      },
                      {
                        "label": "4",
                        "value": "0,1,2,3"
                      },
                      {
                        "label": "5",
                        "value": "0,1,2,3,4"
                      }
                    ],
                    "promptIf": "-expr \"Platform == 'Linux' || Platform == 'Windows'\""
                  },
                  {
                    "bpKey": "repowithmicroservice",
                    "name": "DeployDev",
                    "type": "Confirm",
                    "prompt": "Will this deploy to dev/testqa environment"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+DTS%3A+Repo+and+Microservice+Pipeline"
              }
            ]
          },
          {
            "name": "xld",
            "title": "xld",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Project XLD blueprint for XLD part blueprints",
                "type": "XL",
                "description": "This defines/initializes generic base use XLD infrastructure and environment elements, but especially to specialize dictionary settings..\n",
                "path": "dts",
                "name": "xld",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "cacheKey": [
                  "PartName"
                ],
                "outRepoName": "zions-blueprints",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "xld",
                    "name": "PartName",
                    "type": "Input",
                    "prompt": "The name of the blueprint part",
                    "description": "This field will be used to setup the XLD blueprint part in common/project-xld-elements"
                  },
                  {
                    "bpKey": "xld",
                    "name": "EnvUnencrypedBlueprintQuestions",
                    "type": "Editor",
                    "prompt": "XLD unencrypted environment related dictionary blueprint questions.",
                    "description": "These blueprint questions should be specified in yaml format.  if set to 'n/a', fields will not be used.",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "xld",
                    "name": "EnvEncrypedBlueprintQuestions",
                    "type": "Editor",
                    "prompt": "XLD encrypted environment related dictionary blueprint questions.",
                    "description": "These blueprint questions should be specified in yaml format.  if set to 'n/a', fields will not be used.",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "xld",
                    "name": "CommonUnencrypedBlueprintQuestions",
                    "type": "Editor",
                    "prompt": "XLD unencrypted common dictionary blueprint questions. If n/a then no common unencrypted dictionary will be created.",
                    "description": "These blueprint questions should be specified in yaml format.  if set to 'n/a', fields will not be used.",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "xld",
                    "name": "CommonEncrypedBlueprintQuestions",
                    "type": "Editor",
                    "prompt": "XLD encrypted common dictionary blueprint questions.",
                    "description": "These blueprint questions should be specified in yaml format. if set to 'n/a', fields will not be used.",
                    "adefault": "n/a"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+DTS%3A+XLD",
                "commitPatterns": "common/project-xld-elements/parts,common/project-xld-elements/common/blueprint.yaml",
                "pullRequestReviewers": "@me"
              }
            ]
          },
          {
            "name": "xlr-directory-teams-permissions",
            "title": "xlr-directory-teams-permissions",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Setup XL Release teams and permissions",
                "type": "XL",
                "description": "This will create the teams and permissions on the XL Release directory.\n",
                "path": "dts",
                "name": "xlr-directory-teams-permissions",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "OutputFolderName"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "xlrdirectoryteamspermissions",
                    "name": "DirectoryName",
                    "type": "Input",
                    "prompt": "What is the directory name within XL Release to setup teams and permssions?",
                    "description": "This is the name of the directory with full path in XL release. Ex. 'CorpSvcs/RTS' CAUTION: must use '/' for path separator"
                  },
                  {
                    "bpKey": "xlrdirectoryteamspermissions",
                    "name": "OutputFolderName",
                    "type": "Input",
                    "prompt": "Hit Enter, we want to use the default value. Do not change!",
                    "description": "Set to a default value on purpose. Do not change!",
                    "adefault": "xlr-directory-teams-permissions"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+DTS%3A+XL+Release+Directory+Teams+Permissions"
              }
            ]
          },
          {
            "name": "zions-base-checklist",
            "title": "zions-base-checklist",
            "parentName": "dts",
            "folders": [],
            "blueprints": [
              {
                "title": "Zions Base Checklist",
                "type": "XL",
                "description": "This defines initial XLD/XLR setup that follows the checklist\n",
                "path": "dts",
                "name": "zions-base-checklist",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "AppName"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS",
                    "Sandbox"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the application?"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "AppName",
                    "type": "Input",
                    "prompt": "What is the name of the application?"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "HasDevEnv",
                    "type": "Confirm",
                    "prompt": "Is there a development test environment?",
                    "description": "Is there a development enviroment",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "DevInfrastructureHost",
                    "type": "Input",
                    "prompt": "Dev host name:",
                    "promptIf": "-expr \"HasDevEnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "DevInfrastructureType",
                    "type": "Select",
                    "prompt": "Select infrastructure type:",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Redhat",
                        "value": "redhat"
                      },
                      {
                        "label": "AIX",
                        "value": "aix"
                      }
                    ],
                    "promptIf": "-expr \"HasDevEnv == true\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "HasTestEnv",
                    "type": "Confirm",
                    "prompt": "Is there a test enviroment",
                    "description": "Is there a test enviroment",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "TestInfrastructureHost",
                    "type": "Input",
                    "prompt": "Test host name:",
                    "promptIf": "-expr \"HasTestEnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "TestInfrastructureType",
                    "type": "Select",
                    "prompt": "Select infrastructure type:",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Redhat",
                        "value": "redhat"
                      },
                      {
                        "label": "AIX",
                        "value": "aix"
                      }
                    ],
                    "promptIf": "-expr \"HasTestEnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "HasTest2Env",
                    "type": "Confirm",
                    "prompt": "Is there a test2 enviroment",
                    "description": "Is there a test enviroment",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "Test2InfrastructureHost",
                    "type": "Input",
                    "prompt": "Test2 host name:",
                    "promptIf": "-expr \"HasTest2Env\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "Test2InfrastructureType",
                    "type": "Select",
                    "prompt": "Select Test2 infrastructure type:",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Redhat",
                        "value": "redhat"
                      },
                      {
                        "label": "AIX",
                        "value": "aix"
                      }
                    ],
                    "promptIf": "-expr \"HasTest2Env\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "HasStageEnv",
                    "type": "Confirm",
                    "prompt": "Is there a stage enviroment",
                    "description": "Is there a stage enviroment",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "StageInfrastructureHost",
                    "type": "Input",
                    "prompt": "Stage host name:",
                    "promptIf": "-expr \"HasStageEnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "StageInfrastructureType",
                    "type": "Select",
                    "prompt": "Select Stage infrastructure type:",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Redhat",
                        "value": "redhat"
                      },
                      {
                        "label": "AIX",
                        "value": "aix"
                      }
                    ],
                    "promptIf": "-expr \"HasStageEnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "HasDREnv",
                    "type": "Confirm",
                    "prompt": "Is there a DR enviroment",
                    "description": "Is there a DR enviroment",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "DRInfrastructureHost",
                    "type": "Input",
                    "prompt": "DR host name:",
                    "promptIf": "-expr \"HasDREnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "DRInfrastructureType",
                    "type": "Select",
                    "prompt": "Select DR infrastructure type:",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Redhat",
                        "value": "redhat"
                      },
                      {
                        "label": "AIX",
                        "value": "aix"
                      }
                    ],
                    "promptIf": "-expr \"HasDREnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "HasProdEnv",
                    "type": "Confirm",
                    "prompt": "Is there a Production enviroment",
                    "description": "Is there a Production enviroment",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "ProdInfrastructureHost",
                    "type": "Input",
                    "prompt": "Production host name:",
                    "promptIf": "-expr \"HasProdEnv\""
                  },
                  {
                    "bpKey": "zionsbasechecklist",
                    "name": "ProdInfrastructureType",
                    "type": "Select",
                    "prompt": "Select Production infrastructure type:",
                    "options": [
                      {
                        "label": "Windows",
                        "value": "windows"
                      },
                      {
                        "label": "Redhat",
                        "value": "redhat"
                      },
                      {
                        "label": "AIX",
                        "value": "aix"
                      }
                    ],
                    "promptIf": "-expr \"HasProdEnv\""
                  }
                ]
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "eda",
        "title": "eda",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "data-dojo-libraries",
            "title": "data-dojo-libraries",
            "parentName": "eda",
            "folders": [],
            "blueprints": [
              {
                "title": "Data Dojo Libraries",
                "type": "XL",
                "description": "Creates the data dojo course libraries, or skeleton library project.\n",
                "path": "eda",
                "name": "data-dojo-libraries",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "allowedProjects": [
                    "EDA"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "datadojolibraries",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Enter the Azure DevOps project area name",
                    "description": "Azure DevOps project area name used for this blueprint"
                  },
                  {
                    "bpKey": "datadojolibraries",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "Enter the Azure DevOps repository name",
                    "description": "Azure DevOps repository name used for this blueprint"
                  },
                  {
                    "bpKey": "datadojolibraries",
                    "name": "PipelineFile",
                    "type": "Input",
                    "prompt": "Enter the Azure DevOps YAML pipeline file (path included from the repository root)",
                    "description": "Azure DevOps YAML pipeline file"
                  },
                  {
                    "bpKey": "datadojolibraries",
                    "name": "AutomaticallyIncludedReviewersPolicies",
                    "type": "Editor",
                    "prompt": "Newline-separated list of automatically included reviewers policy data",
                    "description": "Newline-separated list of automatically included reviewers policy data, delimited by '|'. (reviewers=[comma-separated list of users and or teams]|policyRequirement=[required|optional]|filenamePatterns=[comma-separated list of paths]|minimumApproverCount=[1|more]|message=[message goes here]|creatorVoteCounts=[true|false])",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^(reviewers=[a-zA-Z,\\ ]+)|(policyRequirement=(required|optional).*))', AutomaticallyIncludedReviewersPolicies)\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Data%3A+DOJO%3A+Libraries"
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "fragments",
        "title": "fragments",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "ado",
            "title": "ado",
            "parentName": "fragments",
            "folders": [
              {
                "name": "ant",
                "title": "ant",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "ADO Ant",
                    "type": "XL",
                    "description": "This blueprint creates an ADO basic file set for an ANT project\n",
                    "path": "fragments/ado",
                    "name": "ant",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "ant",
                        "name": "AntFileName",
                        "type": "Input",
                        "prompt": "ANT build.xml path/filename?",
                        "adefault": "build.xml",
                        "validate": "-expr \"regex('^[\\\\\\\\w]+(.xml)$', AntFileName)\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "AntBuildTarget",
                        "type": "Input",
                        "prompt": "Optional target names.  E.G. init compile",
                        "adefault": "default",
                        "validate": "-expr \"regex('^[\\\\\\\\w]+$|[a-zA-Z]+-[a-zA-Z]+$', AntBuildTarget)\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "AntBuildOptions",
                        "type": "Input",
                        "prompt": "Optional build options.  E.G. -DmyProperty=myPropertyValue, (n/a indicates no additional options)",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AntBuildOptions)\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "JavaHomeSelection",
                        "type": "Select",
                        "prompt": "Select how Ant will find the JDK. Select PATH only if you need to enter the path to a certain required version of the JDK",
                        "adefault": "JDKVersion",
                        "options": [
                          {
                            "label": "VERSION",
                            "value": "JDKVersion"
                          },
                          {
                            "label": "PATH",
                            "value": "Path"
                          }
                        ]
                      },
                      {
                        "bpKey": "ant",
                        "name": "JdkVersion",
                        "type": "Input",
                        "prompt": "If a specific version of the JDK is required, specify it here (e.g. 6, 7, 8, 11, etc.). Otherwise, defaults to the current JDK on the build server.",
                        "adefault": "default",
                        "promptIf": "-expr \"JavaHomeSelection == 'JDKVersion'\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "JdkUserInputPath",
                        "type": "Input",
                        "prompt": "Specify the path to the specific required JDK.  E.G. /app/azure/tools/java/1.6.0_25/",
                        "adefault": "n/a",
                        "promptIf": "-expr \"JavaHomeSelection == 'Path'\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "deployment",
                "title": "deployment",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Release",
                    "type": "XL",
                    "description": "This blueprint fragment sets up file to enable creating releases from ADO pipeline\n",
                    "path": "fragments/ado",
                    "name": "deployment",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": []
                  }
                ]
              },
              {
                "name": "dotnet",
                "title": "dotnet",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "ADO DOTNET",
                    "type": "XL",
                    "description": "This blueprint creates ADO dotnet\n",
                    "path": "fragments/ado",
                    "name": "dotnet",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "dotnet",
                        "name": "VSVersion",
                        "type": "Select",
                        "prompt": "Visual Studio Version",
                        "description": "If the preferred version cannot be found, the latest version found will be used instead",
                        "adefault": "Latest",
                        "options": [
                          {
                            "label": "Latest",
                            "value": "Latest"
                          },
                          {
                            "label": "Visual Studio 2012",
                            "value": "11.0"
                          },
                          {
                            "label": "Visual Studio 2013",
                            "value": "12.0"
                          },
                          {
                            "label": "Visual Studio 2015",
                            "value": "14.0"
                          },
                          {
                            "label": "Visual Studio 2017",
                            "value": "15.0"
                          },
                          {
                            "label": "Visual Studio 2019",
                            "value": "16.0"
                          },
                          {
                            "label": "Visual Studio 2022",
                            "value": "17.0"
                          }
                        ]
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "MSBuildArch",
                        "type": "Select",
                        "prompt": "MS Build Architecture to run",
                        "description": "Optionally supply the architecture (x86, x64) of MSBuild to run",
                        "adefault": "MS Build X86",
                        "options": [
                          {
                            "label": "MS Build X86",
                            "value": "MS Build X86"
                          },
                          {
                            "label": "MS Build X64",
                            "value": "MS Build X64"
                          }
                        ]
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Platform",
                        "type": "Select",
                        "prompt": "Select Platform type",
                        "description": "default value will be any cpu",
                        "adefault": "any cpu",
                        "options": [
                          {
                            "label": "any cpu",
                            "value": "any cpu"
                          },
                          {
                            "label": "Win32",
                            "value": "Win32"
                          },
                          {
                            "label": "x86",
                            "value": "x86"
                          },
                          {
                            "label": "x64",
                            "value": "x64"
                          }
                        ]
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Configuration",
                        "type": "Select",
                        "prompt": "Select Platform type",
                        "adefault": "release",
                        "options": [
                          {
                            "label": "debug",
                            "value": "debug"
                          },
                          {
                            "label": "release",
                            "value": "release"
                          }
                        ]
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "TypesOfApps",
                        "type": "Select",
                        "prompt": "what type of applications does this repo have?",
                        "options": [
                          {
                            "label": "consoleonly",
                            "value": "console"
                          },
                          {
                            "label": "webapponly",
                            "value": "webapp"
                          },
                          {
                            "label": "Console_&_webapp",
                            "value": "both"
                          }
                        ]
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "number_of_consoleapps",
                        "type": "Select",
                        "prompt": "How many console prjects this repo have?",
                        "adefault": "one",
                        "options": [
                          {
                            "label": "one",
                            "value": "one"
                          },
                          {
                            "label": "multiple",
                            "value": "multiple"
                          }
                        ],
                        "promptIf": "-expr TypesOfApps == 'console'"
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "console_exepath",
                        "type": "Input",
                        "prompt": "Enter full path for console artifacts its generating:",
                        "description": "if you have multiple console apps provide path like: eg: \"ZWay/FAMCTransaction/bin/debug\", \"ZWay/odsxfer/bin/debug\"",
                        "adefault": "n/a",
                        "promptIf": "-expr TypesOfApps == 'console' || TypesOfApps == 'both'"
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "uniquedir_for_console",
                        "type": "Input",
                        "prompt": "Enter the dir name before the /bin from above response:",
                        "description": "if this is your above resonse \"ZWay/FAMCTransaction/bin/debug\", \"ZWay/odsxfer/bin/debug\" input as follow eg: \"FAMCTransaction\", \"odsxfer\"",
                        "adefault": "n/a",
                        "promptIf": "-expr TypesOfApps == 'console' || TypesOfApps == 'both'"
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "number_of_webapps",
                        "type": "Select",
                        "prompt": "how many webapp prjects this repo have:",
                        "adefault": "one",
                        "options": [
                          {
                            "label": "one",
                            "value": "one"
                          },
                          {
                            "label": "multiple",
                            "value": "multiple"
                          }
                        ],
                        "promptIf": "-expr TypesOfApps == 'webapp'"
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "uniquedir_for_Webapp",
                        "type": "Input",
                        "prompt": "Enter the unique dir name:",
                        "description": "if this is your above resonse is  \"Zway/zwayintranet/\" will be helpful to give the zip name: \"zwayintranet\"",
                        "adefault": "n/a",
                        "promptIf": "-expr TypesOfApps == 'webapp' || TypesOfApps == 'both'"
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Nugetpackage",
                        "type": "Confirm",
                        "prompt": "Need any Nugetpackages to be download?",
                        "description": "if you need to download any Nugetpackages please Select yes else Select no",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "packages_nugetconfig",
                        "type": "Select",
                        "prompt": "please select config its using",
                        "options": [
                          {
                            "label": "packages.config",
                            "value": "packages.config"
                          },
                          {
                            "label": "nuget.config",
                            "value": "nuget.config"
                          }
                        ],
                        "promptIf": "-expr \"Nugetpackage == true\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Nugetconfig",
                        "type": "Input",
                        "prompt": "please provide the relative path of nuget.config file in repo:",
                        "description": "nuget.config file is needed to download packages please provide relative path in repo",
                        "adefault": "nuget.config",
                        "promptIf": "-expr packages_nugetconfig == \"nuget.config\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "gradle",
                "title": "gradle",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Gradle",
                    "type": "XL",
                    "description": "This blueprint creates an ado basic file set\n",
                    "path": "fragments/ado",
                    "name": "gradle",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "gradle",
                        "name": "GradleFileName",
                        "type": "Input",
                        "prompt": "What is the Gradle file name?",
                        "adefault": "build.gradle",
                        "validate": "-expr \"regex('^[\\\\\\\\w.]+$', GradleFileName)\""
                      },
                      {
                        "bpKey": "gradle",
                        "name": "AdditionalReleaseTasks",
                        "type": "Input",
                        "prompt": "Additional tasks added to release build?",
                        "description": "If set to 'n/a', then no additional tasks will be added to build request.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\w ]+$', AdditionalReleaseTasks)\""
                      },
                      {
                        "bpKey": "gradle",
                        "name": "AdditionalBuildOptions",
                        "type": "Input",
                        "prompt": "Additional build options.",
                        "description": "E.G. --refresh-dependencies -Pcontext=release. If 'n/a', then no additional options will be set on build request.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AdditionalBuildOptions)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "maven",
                "title": "maven",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Maven",
                    "type": "XL",
                    "description": "This blueprint creates an ADO basic file set for a Maven project\n",
                    "path": "fragments/ado",
                    "name": "maven",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "maven",
                        "name": "DoVersionSet",
                        "type": "Confirm",
                        "prompt": "Set the new version in pom file(s) before build?  (Yes/No)",
                        "description": "If the new version needs to be set in the pom.xml file before build occurs then answer should be yes.",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "maven",
                        "name": "BuildGoal",
                        "type": "Select",
                        "prompt": "Select the Maven goal for the build:",
                        "adefault": "install",
                        "options": [
                          {
                            "label": "package",
                            "value": "package"
                          },
                          {
                            "label": "install",
                            "value": "install"
                          },
                          {
                            "label": "deploy",
                            "value": "deploy"
                          }
                        ]
                      },
                      {
                        "bpKey": "maven",
                        "name": "PomFileName",
                        "type": "Input",
                        "prompt": "What is the POM file name/path?",
                        "adefault": "pom.xml",
                        "validate": "-expr \"regex('^[\\\\\\\\w]+(.xml)$', PomFileName)\""
                      },
                      {
                        "bpKey": "maven",
                        "name": "AdditionalMavenBuildOptions",
                        "type": "Input",
                        "prompt": "Additional maven build options.  E.G. -t $(RE_TOOLS)/mvn/toolchains.xml, (n/a indicates no additional options)",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AdditionalMavenBuildOptions)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "npm",
                "title": "npm",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "ADO NPM",
                    "type": "XL",
                    "description": "This blueprint creates ADO npm\n",
                    "path": "fragments/ado",
                    "name": "npm",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": []
                  }
                ]
              },
              {
                "name": "parameters",
                "title": "parameters",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "ADO PARAMETERS",
                    "type": "XL",
                    "description": "This blueprint is for ADO PARAMETERS\n",
                    "path": "fragments/ado",
                    "name": "parameters",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "parameters",
                        "name": "BuildIncludes",
                        "type": "Input",
                        "prompt": "ADO repository paths to detect changes?",
                        "description": "A comma delimited list of ADO repository paths.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w\\\\\\\\/\\\\\\\\*]+[,]{0,1})+$',BuildIncludes)\""
                      },
                      {
                        "bpKey": "parameters",
                        "name": "BuildBranches",
                        "type": "Input",
                        "prompt": "ADO repository branches to target for push or merges?",
                        "description": "A comma delimited List of ADO repository branches.",
                        "adefault": "master",
                        "validate": "-expr \"regex('^([\\\\\\\\w\\\\\\\\/]+[,]{0,1})+$',BuildBranches)\""
                      },
                      {
                        "bpKey": "parameters",
                        "name": "BuildType",
                        "type": "Select",
                        "prompt": "Select the build type:",
                        "adefault": "maven",
                        "options": [
                          {
                            "label": "MAVEN",
                            "value": "maven"
                          },
                          {
                            "label": "GRADLE",
                            "value": "gradle"
                          },
                          {
                            "label": "ANT",
                            "value": "ant"
                          },
                          {
                            "label": "DOTNET",
                            "value": "dotnet"
                          },
                          {
                            "label": "NPM",
                            "value": "npm"
                          },
                          {
                            "label": "YARN",
                            "value": "yarn"
                          },
                          {
                            "label": "VENDOR_APP",
                            "value": "vendor_app"
                          }
                        ]
                      },
                      {
                        "bpKey": "parameters",
                        "name": "AppArea",
                        "type": "Input",
                        "prompt": "What are the sub-directories in output repository?",
                        "description": "If 'n/a' then there will be no sub-directories.  The sub-directories relate to repository output folders.",
                        "adefault": "-expr \"BuildType\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', AppArea)\""
                      },
                      {
                        "bpKey": "parameters",
                        "name": "ComponentBuild",
                        "type": "Confirm",
                        "prompt": "Is this a dependency component or docker image with no repository contained helm implementation?",
                        "description": "If this is a dependency component or docker image with no repo contained helm implementation, then value should be set to Yes.",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "CronSetting",
                        "type": "Input",
                        "prompt": "Cron build trigger setting",
                        "description": "If release build can be triggered on a schedule, then set the cron setting.  Otherwise value should be 'n/a'",
                        "adefault": "n/a",
                        "promptIf": "-expr \"BuildType == 'vendor_app'\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[\\\\\\\\S]+ [\\\\\\\\S]+ [\\\\\\\\S]+ [\\\\\\\\S]+ [\\\\\\\\S]+$)', CronSetting)\""
                      },
                      {
                        "bpKey": "maven",
                        "name": "DoVersionSet",
                        "type": "Confirm",
                        "prompt": "Set the new version in pom file(s) before build?  (Yes/No)",
                        "description": "If the new version needs to be set in the pom.xml file before build occurs then answer should be yes.",
                        "adefault": "true",
                        "promptIf": "-expr \"BuildType == 'maven'\""
                      },
                      {
                        "bpKey": "maven",
                        "name": "BuildGoal",
                        "type": "Select",
                        "prompt": "Select the Maven goal for the build:",
                        "adefault": "install",
                        "options": [
                          {
                            "label": "package",
                            "value": "package"
                          },
                          {
                            "label": "install",
                            "value": "install"
                          },
                          {
                            "label": "deploy",
                            "value": "deploy"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'maven'\""
                      },
                      {
                        "bpKey": "maven",
                        "name": "PomFileName",
                        "type": "Input",
                        "prompt": "What is the POM file name/path?",
                        "adefault": "pom.xml",
                        "promptIf": "-expr \"BuildType == 'maven'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w]+(.xml)$', PomFileName)\""
                      },
                      {
                        "bpKey": "maven",
                        "name": "AdditionalMavenBuildOptions",
                        "type": "Input",
                        "prompt": "Additional maven build options.  E.G. -t $(RE_TOOLS)/mvn/toolchains.xml, (n/a indicates no additional options)",
                        "adefault": "n/a",
                        "promptIf": "-expr \"BuildType == 'maven'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AdditionalMavenBuildOptions)\""
                      },
                      {
                        "bpKey": "gradle",
                        "name": "GradleFileName",
                        "type": "Input",
                        "prompt": "What is the Gradle file name?",
                        "adefault": "build.gradle",
                        "promptIf": "-expr \"BuildType == 'gradle'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w.]+$', GradleFileName)\""
                      },
                      {
                        "bpKey": "gradle",
                        "name": "AdditionalReleaseTasks",
                        "type": "Input",
                        "prompt": "Additional tasks added to release build?",
                        "description": "If set to 'n/a', then no additional tasks will be added to build request.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"BuildType == 'gradle'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\w ]+$', AdditionalReleaseTasks)\""
                      },
                      {
                        "bpKey": "gradle",
                        "name": "AdditionalBuildOptions",
                        "type": "Input",
                        "prompt": "Additional build options.",
                        "description": "E.G. --refresh-dependencies -Pcontext=release. If 'n/a', then no additional options will be set on build request.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"BuildType == 'gradle'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AdditionalBuildOptions)\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "AntFileName",
                        "type": "Input",
                        "prompt": "ANT build.xml path/filename?",
                        "adefault": "build.xml",
                        "promptIf": "-expr \"BuildType == 'ant'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w]+(.xml)$', AntFileName)\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "AntBuildTarget",
                        "type": "Input",
                        "prompt": "Optional target names.  E.G. init compile",
                        "adefault": "default",
                        "promptIf": "-expr \"BuildType == 'ant'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w]+$|[a-zA-Z]+-[a-zA-Z]+$', AntBuildTarget)\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "AntBuildOptions",
                        "type": "Input",
                        "prompt": "Optional build options.  E.G. -DmyProperty=myPropertyValue, (n/a indicates no additional options)",
                        "adefault": "n/a",
                        "promptIf": "-expr \"BuildType == 'ant'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[\\\\\\\\S ]+$', AntBuildOptions)\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "JavaHomeSelection",
                        "type": "Select",
                        "prompt": "Select how Ant will find the JDK. Select PATH only if you need to enter the path to a certain required version of the JDK",
                        "adefault": "JDKVersion",
                        "options": [
                          {
                            "label": "VERSION",
                            "value": "JDKVersion"
                          },
                          {
                            "label": "PATH",
                            "value": "Path"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'ant'\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "JdkVersion",
                        "type": "Input",
                        "prompt": "If a specific version of the JDK is required, specify it here (e.g. 6, 7, 8, 11, etc.). Otherwise, defaults to the current JDK on the build server.",
                        "adefault": "default",
                        "promptIf": "-expr \"(BuildType == 'ant') && (JavaHomeSelection == 'JDKVersion')\""
                      },
                      {
                        "bpKey": "ant",
                        "name": "JdkUserInputPath",
                        "type": "Input",
                        "prompt": "Specify the path to the specific required JDK.  E.G. /app/azure/tools/java/1.6.0_25/",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(BuildType == 'ant') && (JavaHomeSelection == 'Path')\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "VSVersion",
                        "type": "Select",
                        "prompt": "Visual Studio Version",
                        "description": "If the preferred version cannot be found, the latest version found will be used instead",
                        "adefault": "Latest",
                        "options": [
                          {
                            "label": "Latest",
                            "value": "Latest"
                          },
                          {
                            "label": "Visual Studio 2012",
                            "value": "11.0"
                          },
                          {
                            "label": "Visual Studio 2013",
                            "value": "12.0"
                          },
                          {
                            "label": "Visual Studio 2015",
                            "value": "14.0"
                          },
                          {
                            "label": "Visual Studio 2017",
                            "value": "15.0"
                          },
                          {
                            "label": "Visual Studio 2019",
                            "value": "16.0"
                          },
                          {
                            "label": "Visual Studio 2022",
                            "value": "17.0"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'dotnet'\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "MSBuildArch",
                        "type": "Select",
                        "prompt": "MS Build Architecture to run",
                        "description": "Optionally supply the architecture (x86, x64) of MSBuild to run",
                        "adefault": "MS Build X86",
                        "options": [
                          {
                            "label": "MS Build X86",
                            "value": "MS Build X86"
                          },
                          {
                            "label": "MS Build X64",
                            "value": "MS Build X64"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'dotnet'\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Platform",
                        "type": "Select",
                        "prompt": "Select Platform type",
                        "description": "default value will be any cpu",
                        "adefault": "any cpu",
                        "options": [
                          {
                            "label": "any cpu",
                            "value": "any cpu"
                          },
                          {
                            "label": "Win32",
                            "value": "Win32"
                          },
                          {
                            "label": "x86",
                            "value": "x86"
                          },
                          {
                            "label": "x64",
                            "value": "x64"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'dotnet'\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Configuration",
                        "type": "Select",
                        "prompt": "Select Platform type",
                        "adefault": "release",
                        "options": [
                          {
                            "label": "debug",
                            "value": "debug"
                          },
                          {
                            "label": "release",
                            "value": "release"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'dotnet'\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "TypesOfApps",
                        "type": "Select",
                        "prompt": "what type of applications does this repo have?",
                        "options": [
                          {
                            "label": "consoleonly",
                            "value": "console"
                          },
                          {
                            "label": "webapponly",
                            "value": "webapp"
                          },
                          {
                            "label": "Console_&_webapp",
                            "value": "both"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'dotnet'\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "number_of_consoleapps",
                        "type": "Select",
                        "prompt": "How many console prjects this repo have?",
                        "adefault": "one",
                        "options": [
                          {
                            "label": "one",
                            "value": "one"
                          },
                          {
                            "label": "multiple",
                            "value": "multiple"
                          }
                        ],
                        "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'console')\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "console_exepath",
                        "type": "Input",
                        "prompt": "Enter full path for console artifacts its generating:",
                        "description": "if you have multiple console apps provide path like: eg: \"ZWay/FAMCTransaction/bin/debug\", \"ZWay/odsxfer/bin/debug\"",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'console' || TypesOfApps == 'both')\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "uniquedir_for_console",
                        "type": "Input",
                        "prompt": "Enter the dir name before the /bin from above response:",
                        "description": "if this is your above resonse \"ZWay/FAMCTransaction/bin/debug\", \"ZWay/odsxfer/bin/debug\" input as follow eg: \"FAMCTransaction\", \"odsxfer\"",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'console' || TypesOfApps == 'both')\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "number_of_webapps",
                        "type": "Select",
                        "prompt": "how many webapp prjects this repo have:",
                        "adefault": "one",
                        "options": [
                          {
                            "label": "one",
                            "value": "one"
                          },
                          {
                            "label": "multiple",
                            "value": "multiple"
                          }
                        ],
                        "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'webapp')\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "uniquedir_for_Webapp",
                        "type": "Input",
                        "prompt": "Enter the unique dir name:",
                        "description": "if this is your above resonse is  \"Zway/zwayintranet/\" will be helpful to give the zip name: \"zwayintranet\"",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(BuildType == 'dotnet') && (TypesOfApps == 'webapp' || TypesOfApps == 'both')\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Nugetpackage",
                        "type": "Confirm",
                        "prompt": "Need any Nugetpackages to be download?",
                        "description": "if you need to download any Nugetpackages please Select yes else Select no",
                        "adefault": "false",
                        "promptIf": "-expr \"BuildType == 'dotnet'\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "packages_nugetconfig",
                        "type": "Select",
                        "prompt": "please select config its using",
                        "options": [
                          {
                            "label": "packages.config",
                            "value": "packages.config"
                          },
                          {
                            "label": "nuget.config",
                            "value": "nuget.config"
                          }
                        ],
                        "promptIf": "-expr \"(BuildType == 'dotnet') && (Nugetpackage == true)\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "Nugetconfig",
                        "type": "Input",
                        "prompt": "please provide the relative path of nuget.config file in repo:",
                        "description": "nuget.config file is needed to download packages please provide relative path in repo",
                        "adefault": "nuget.config",
                        "promptIf": "-expr \"(BuildType == 'dotnet') && (packages_nugetconfig == nuget.config)\""
                      },
                      {
                        "bpKey": "yarn",
                        "name": "Empty",
                        "type": "Input",
                        "prompt": "Some input for empty blueprint?",
                        "description": "Some input for empty blueprint",
                        "promptIf": "-expr \"BuildType == 'yarn'\""
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "AppName",
                        "type": "Input",
                        "prompt": "Please provide name of the vendor app",
                        "description": "provide name of the vendor app eg: Procuity",
                        "adefault": "none",
                        "promptIf": "-expr \"BuildType == 'vendor_app'\""
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "PathOn1846",
                        "type": "Input",
                        "prompt": "Please add path on Utlxa1846",
                        "description": "Add path on 1846 eg: /app/inbound/Procuity",
                        "adefault": "n/a",
                        "promptIf": "-expr \"BuildType == 'vendor_app'\""
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "NumberOfFiles",
                        "type": "Select",
                        "prompt": "Number of files dropped by Vendor in SFG?",
                        "adefault": "empty",
                        "options": [
                          {
                            "label": "ONE",
                            "value": "one"
                          },
                          {
                            "label": "MULTIPLE",
                            "value": "multiple"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'vendor_app'\""
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "FileName",
                        "type": "Input",
                        "prompt": "Add FileName dropped by vendor",
                        "description": "please give the name of the file by vendor in SFG eg: tfbdirect.war",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(BuildType == 'vendor_app') && (Nubmeroffiles == 'one')\""
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "FileNeedToModify",
                        "type": "Select",
                        "prompt": "Does the Vendor dropped file need to be modified?",
                        "adefault": "empty",
                        "options": [
                          {
                            "label": "YES",
                            "value": "yes"
                          },
                          {
                            "label": "NO",
                            "value": "no"
                          }
                        ],
                        "promptIf": "-expr \"BuildType == 'vendor_app'\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "standard-pipeline-template",
                "title": "standard-pipeline-template",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Standard ADO pipeline",
                    "type": "XL",
                    "description": "This blueprint fragment sets up a standard set of steps to run for ADO.\n",
                    "path": "fragments/ado",
                    "name": "standard-pipeline-template",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": []
                  }
                ]
              },
              {
                "name": "vendor_app",
                "title": "vendor_app",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "ADO VENDOR_APP",
                    "type": "XL",
                    "description": "This blueprint creates ADO VENDOR_APP\n",
                    "path": "fragments/ado",
                    "name": "vendor_app",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "vendorapp",
                        "name": "AppName",
                        "type": "Input",
                        "prompt": "Please provide name of the vendor app",
                        "description": "provide name of the vendor app eg: Procuity",
                        "adefault": "none"
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "PathOn1846",
                        "type": "Input",
                        "prompt": "Please add path on Utlxa1846",
                        "description": "Add path on 1846 eg: /app/inbound/Procuity",
                        "adefault": "n/a"
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "NumberOfFiles",
                        "type": "Select",
                        "prompt": "Number of files dropped by Vendor in SFG?",
                        "adefault": "empty",
                        "options": [
                          {
                            "label": "ONE",
                            "value": "one"
                          },
                          {
                            "label": "MULTIPLE",
                            "value": "multiple"
                          }
                        ]
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "FileName",
                        "type": "Input",
                        "prompt": "Add FileName dropped by vendor",
                        "description": "please give the name of the file by vendor in SFG eg: tfbdirect.war",
                        "adefault": "n/a",
                        "promptIf": "-expr \"Nubmeroffiles == 'one'\""
                      },
                      {
                        "bpKey": "vendorapp",
                        "name": "FileNeedToModify",
                        "type": "Select",
                        "prompt": "Does the Vendor dropped file need to be modified?",
                        "adefault": "empty",
                        "options": [
                          {
                            "label": "YES",
                            "value": "yes"
                          },
                          {
                            "label": "NO",
                            "value": "no"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "name": "yarn",
                "title": "yarn",
                "parentName": "ado",
                "folders": [],
                "blueprints": [
                  {
                    "title": "ADO YARN",
                    "type": "XL",
                    "description": "This blueprint creates ADO yarn\n",
                    "path": "fragments/ado",
                    "name": "yarn",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "yarn",
                        "name": "Empty",
                        "type": "Input",
                        "prompt": "Some input for empty blueprint?",
                        "description": "Some input for empty blueprint"
                      }
                    ]
                  }
                ]
              }
            ],
            "blueprints": []
          },
          {
            "name": "app",
            "title": "app",
            "parentName": "fragments",
            "folders": [
              {
                "name": "dotnet",
                "title": "dotnet",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "dotner Application",
                    "type": "XL",
                    "description": "This handles pipeline for JBoss application.  This is an attempt a complete blueprint\n",
                    "path": "fragments/app",
                    "name": "dotnet",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "dotnet",
                        "name": "backupdir",
                        "type": "Confirm",
                        "prompt": "Do you need a backup for the new zipfiles on your server?",
                        "description": "please provide the back dir name eg: D:\\backupdir",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "backupdir_path",
                        "type": "Input",
                        "prompt": "please provide the absolute path od backup dir on server",
                        "description": "please provide the back dir name eg: D:\\backupdir",
                        "adefault": "n/a",
                        "promptIf": "-expr \"backupdir == true\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "helm",
                "title": "helm",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "K8S Application",
                    "type": "XL",
                    "description": "This handles deployment pipeline for a WAS application.\n",
                    "path": "fragments/app",
                    "name": "helm",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "helm",
                        "name": "HelmRepoName",
                        "type": "Input",
                        "prompt": "What is the name of the GIT repository that houses chart?",
                        "description": "The GIT repository that houses the Helm chart.",
                        "adefault": "-expr \".RepoName\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w_-]+$', HelmRepoName)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmFolder",
                        "type": "Input",
                        "prompt": "What is the GIT Repository location for Helm chart?",
                        "description": "The GIT repository path to the helm chart to be modified.",
                        "validate": "-expr \"regex('^([\\\\\\\\w\\\\\\\\/\\\\\\\\-_]+)$', HelmFolder)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmProperty",
                        "type": "Input",
                        "prompt": "Enter HELM property name to set with build number.",
                        "description": "The property name within the values.yaml that will be modified with build tag.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^([\\\\\\\\w.]+)$', HelmProperty)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmEnvironmentList",
                        "type": "Input",
                        "prompt": "Enter HELM comma delimited list of environments.",
                        "description": "The list of enviroments to setup in application XLD for deployment. This is only used if the helm repo name equals selected GIT repository who's pipeline is being executed.",
                        "adefault": "test,stage,prod",
                        "validate": "-expr \"regex('^([\\\\\\\\w,]+(,prod))$', HelmEnvironmentList)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmNamespacePrefix",
                        "type": "Input",
                        "prompt": "Enter K8S namespace prefix.",
                        "description": "The K8S cluster namespace prefix that relates to access of service setup.  A environment list value will be appended to prefix value to make up the actual deployment namespace.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmNamespacePrefix)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmReleaseNamePrefix",
                        "type": "Input",
                        "prompt": "Enter release namespace prefix.",
                        "description": "The K8S cluster release prefix that relates to tracking release of helm chart.  A environment list value will be appended to prefix value to make up the actual release name.",
                        "adefault": "-expr \"HelmNamespacepPrefix\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmReleaseNamePrefix)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "VaultPath",
                        "type": "Input",
                        "prompt": "Enter vault path.",
                        "adefault": "zions-service-framework",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', VaultPath)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "KubeConfigVaultKey",
                        "type": "Input",
                        "prompt": "Enter kube config vault key.",
                        "description": "The name/key to the Vault buffer housing kubeconfig.yaml for cluster access.",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', KubeConfigVaultKey)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "RegistryNamespace",
                        "type": "Input",
                        "prompt": "Enter docker registry namespace.",
                        "description": "The Nexus/docker registry namespace of built docker image.",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_\\\\\\\\/]+)$', RegistryNamespace)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "DockerImageName",
                        "type": "Input",
                        "prompt": "Enter docker registry image name.",
                        "description": "The Nexus/Docker registry image name.",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', DockerImageName)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "jboss",
                "title": "jboss",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "JBoss Application",
                    "type": "XL",
                    "description": "This handles pipeline for JBoss application.  This is an attempt a complete blueprint\n",
                    "path": "fragments/app",
                    "name": "jboss",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "jboss",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]*(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "manifestmigrate",
                "title": "manifestmigrate",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Migrate Deploy Manifest XML",
                    "type": "XL",
                    "description": "This handles deployment pipeline by migrating the deployit-maniefst.xml file for an application.\n",
                    "path": "fragments/app",
                    "name": "manifestmigrate",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "manifestmigrate",
                        "name": "ManifestFilePath",
                        "type": "Input",
                        "prompt": "What is the path / name of the deployit-manifest.xml file?",
                        "adefault": "deployit-manifest.xml"
                      },
                      {
                        "bpKey": "manifestmigrate",
                        "name": "BuildType",
                        "type": "Select",
                        "prompt": "Select the build type:",
                        "adefault": "maven",
                        "options": [
                          {
                            "label": "EMPTY",
                            "value": "empty"
                          },
                          {
                            "label": "MAVEN",
                            "value": "maven"
                          },
                          {
                            "label": "GRADLE",
                            "value": "gradle"
                          },
                          {
                            "label": "ANT",
                            "value": "ant"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "name": "parameters",
                "title": "parameters",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "APP PARAMETERS",
                    "type": "XL",
                    "description": "This blueprint is for APP PARAMETERS\n",
                    "path": "fragments/app",
                    "name": "parameters",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "parameters",
                        "name": "BinariesDir",
                        "type": "Input",
                        "prompt": "What is the directory for build artifacts?",
                        "adefault": "target"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "BuildIncludes",
                        "type": "Input",
                        "prompt": "ADO repository paths to detect changes? (Comma delimited list)",
                        "description": "List of ADO repository paths",
                        "adefault": "n/a"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "BuildBranches",
                        "type": "Input",
                        "prompt": "ADO repository branches to target for push or merges? (Comma delimited list)",
                        "description": "List of ADO repository branches",
                        "adefault": "master"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "UseBuildNumber",
                        "type": "Confirm",
                        "prompt": "Built artifacts have build number?  (Yes/No)",
                        "description": "If build type generates artifact with build number/app_version then answer should be yes.",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "DeployType",
                        "type": "Select",
                        "prompt": "Select the deploy type:",
                        "adefault": "jboss",
                        "options": [
                          {
                            "label": "JBOSS",
                            "value": "jboss"
                          },
                          {
                            "label": "WAS",
                            "value": "was"
                          },
                          {
                            "label": "SCRIPTIT",
                            "value": "scriptit"
                          },
                          {
                            "label": "MANIFEST_MIGRATE",
                            "value": "manifest_migrate"
                          },
                          {
                            "label": "HELM",
                            "value": "helm"
                          },
                          {
                            "label": "JWS/Tomcat",
                            "value": "tomcat"
                          },
                          {
                            "label": "DO_NOTHING",
                            "value": "donothing"
                          },
                          {
                            "label": "dotnet",
                            "value": "dotnet"
                          }
                        ]
                      },
                      {
                        "bpKey": "parameters",
                        "name": "ReleasePlanType",
                        "type": "Select",
                        "prompt": "Select the XL Release plan type:",
                        "adefault": "noplan",
                        "options": [
                          {
                            "label": "noplan",
                            "value": "noplan"
                          },
                          {
                            "label": "Base Plan",
                            "value": "baseplan"
                          },
                          {
                            "label": "Dynamic Plan",
                            "value": "dynplan"
                          }
                        ]
                      },
                      {
                        "bpKey": "jboss",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "promptIf": "-expr \"DeployType == 'jboss'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]*(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'jboss'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "promptIf": "-expr \"DeployType == 'was'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'was'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "ContextRoot",
                        "type": "Input",
                        "prompt": "Enter the context root for the application (ie. '/ZionsBancorp').",
                        "promptIf": "-expr \"DeployType == 'was'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\/][\\\\\\\\w_]+$', ContextRoot)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOne",
                        "type": "Input",
                        "prompt": "The name of the first build component?",
                        "description": "This is the first component to be deployed.",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentOne)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneTags",
                        "type": "Editor",
                        "prompt": "The list of the first component deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneScriptFileReference",
                        "type": "Editor",
                        "prompt": "Enter the first component's deployment script file location?",
                        "description": "This is a input deploy script for first component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentOneScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOnePlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the first component's deploy script place holders?",
                        "description": "This is the potential place holders for script of first component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOnePlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneScript",
                        "type": "Editor",
                        "prompt": "The first component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of first component to be deployed.",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference == 'n/a')\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneScript)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwo",
                        "type": "Input",
                        "prompt": "The name of the second build component?",
                        "description": "This is the second component to be deployed.  If value is 'n/a' no component is specified.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentTwo)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoTags",
                        "type": "Editor",
                        "prompt": "The list of the second component's deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoScriptFileReference",
                        "type": "Editor",
                        "prompt": "The list of the second component's referenced script?",
                        "description": "This is a input deploy script for second component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentTwoScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoPlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the second component's place holders?",
                        "description": "This is the potential place holders for script of second component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoPlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoScript",
                        "type": "Editor",
                        "prompt": "The second component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of second component to be deployed.",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference == 'n/a')\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoScript)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThree",
                        "type": "Input",
                        "prompt": "The name of the third build component?",
                        "description": "This is the third component to be deployed.  If value is 'n/a' no component is specified.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentThree)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeTags",
                        "type": "Editor",
                        "prompt": "The list of the third component's deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeScriptFileReference",
                        "type": "Editor",
                        "prompt": "The third component's referenced script?",
                        "description": "This is a input deploy script for third component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentThreeScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreePlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the third component's place holders?",
                        "description": "This is the potential place holders for script of third component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' &&  && ComponentThreeScriptFileReference != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreePlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeScript",
                        "type": "Editor",
                        "prompt": "The third component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of third component to be deployed.",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' && ComponentThreeScriptFileReference == 'n/a')\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeScript)\""
                      },
                      {
                        "bpKey": "manifestmigrate",
                        "name": "ManifestFilePath",
                        "type": "Input",
                        "prompt": "What is the path / name of the deployit-manifest.xml file?",
                        "adefault": "deployit-manifest.xml",
                        "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                      },
                      {
                        "bpKey": "manifestmigrate",
                        "name": "BuildType",
                        "type": "Select",
                        "prompt": "Select the build type:",
                        "adefault": "maven",
                        "options": [
                          {
                            "label": "EMPTY",
                            "value": "empty"
                          },
                          {
                            "label": "MAVEN",
                            "value": "maven"
                          },
                          {
                            "label": "GRADLE",
                            "value": "gradle"
                          },
                          {
                            "label": "ANT",
                            "value": "ant"
                          }
                        ],
                        "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                      },
                      {
                        "bpKey": "tomcat",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "promptIf": "-expr \"DeployType == 'tomcat'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "tomcat",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'tomcat'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmRepoName",
                        "type": "Input",
                        "prompt": "What is the name of the GIT repository that houses chart?",
                        "description": "The GIT repository that houses the Helm chart.",
                        "adefault": "-expr \".RepoName\"",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w_-]+$', HelmRepoName)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmFolder",
                        "type": "Input",
                        "prompt": "What is the GIT Repository location for Helm chart?",
                        "description": "The GIT repository path to the helm chart to be modified.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w\\\\\\\\/\\\\\\\\-_]+)$', HelmFolder)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmProperty",
                        "type": "Input",
                        "prompt": "Enter HELM property name to set with build number.",
                        "description": "The property name within the values.yaml that will be modified with build tag.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w.]+)$', HelmProperty)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmEnvironmentList",
                        "type": "Input",
                        "prompt": "Enter HELM comma delimited list of environments.",
                        "description": "The list of enviroments to setup in application XLD for deployment. This is only used if the helm repo name equals selected GIT repository who's pipeline is being executed.",
                        "adefault": "test,stage,prod",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w,]+(,prod))$', HelmEnvironmentList)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmNamespacePrefix",
                        "type": "Input",
                        "prompt": "Enter K8S namespace prefix.",
                        "description": "The K8S cluster namespace prefix that relates to access of service setup.  A environment list value will be appended to prefix value to make up the actual deployment namespace.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmNamespacePrefix)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmReleaseNamePrefix",
                        "type": "Input",
                        "prompt": "Enter release namespace prefix.",
                        "description": "The K8S cluster release prefix that relates to tracking release of helm chart.  A environment list value will be appended to prefix value to make up the actual release name.",
                        "adefault": "-expr \"HelmNamespacepPrefix\"",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmReleaseNamePrefix)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "VaultPath",
                        "type": "Input",
                        "prompt": "Enter vault path.",
                        "adefault": "zions-service-framework",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', VaultPath)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "KubeConfigVaultKey",
                        "type": "Input",
                        "prompt": "Enter kube config vault key.",
                        "description": "The name/key to the Vault buffer housing kubeconfig.yaml for cluster access.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', KubeConfigVaultKey)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "RegistryNamespace",
                        "type": "Input",
                        "prompt": "Enter docker registry namespace.",
                        "description": "The Nexus/docker registry namespace of built docker image.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_\\\\\\\\/]+)$', RegistryNamespace)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "DockerImageName",
                        "type": "Input",
                        "prompt": "Enter docker registry image name.",
                        "description": "The Nexus/Docker registry image name.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', DockerImageName)\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "backupdir",
                        "type": "Confirm",
                        "prompt": "Do you need a backup for the new zipfiles on your server?",
                        "description": "please provide the back dir name eg: D:\\backupdir",
                        "adefault": "false",
                        "promptIf": "-expr \"DeployType == 'dotnet'\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "backupdir_path",
                        "type": "Input",
                        "prompt": "please provide the absolute path od backup dir on server",
                        "description": "please provide the back dir name eg: D:\\backupdir",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'dotnet') && (backupdir == true)\""
                      },
                      {
                        "bpKey": "dotnet",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'dotnet'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      },
                      {
                        "bpKey": "folders",
                        "name": "InitializeFolderPermissions",
                        "type": "Confirm",
                        "prompt": "Initialize XLR project folder permissions?",
                        "description": "If you wish to add initial permissions to XLR top folder then select Yes.",
                        "adefault": "false",
                        "promptIf": "-expr \"ReleasePlanType != 'noplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasDevEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Dev environment?",
                        "adefault": "false",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "DevNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Dev Deploy!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasDevEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', DevNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasTestEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Test environment?",
                        "adefault": "true",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "TestNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Test phase!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', TestNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "TestApprovalGateTasks",
                        "type": "Editor",
                        "prompt": "Input list of <Team><crlf>!  E.G, QA",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                        "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', TestApprovalGateTasks)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasStageEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Stage environment?",
                        "adefault": "true",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "StageNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Stage phase!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', StageNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "StageApprovalGateTasks",
                        "type": "Editor",
                        "prompt": "Input list of <Team><crlf>!  E.G, UAT",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                        "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', StageApprovalGateTasks)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasProdEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Production environments?",
                        "adefault": "true",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "ProdNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Production phase!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasProdEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', ProdNotificationEmails)\""
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "Environments",
                        "type": "Input",
                        "prompt": "List of environments (comma-separated)",
                        "description": "",
                        "adefault": "Test, Stage, Prod",
                        "promptIf": "-expr \"ReleasePlanType == 'dynplan'\""
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "XLAppName",
                        "type": "Input",
                        "prompt": "What is the name of the application in XL Deploy?",
                        "description": "The name of the application in XL Deploy",
                        "adefault": "-expr \"RepoName\"",
                        "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', XLAppName)\""
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "NotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of deployment",
                        "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', NotificationEmails)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "scriptit",
                "title": "scriptit",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Advcmd Application",
                    "type": "XL",
                    "description": "This handles pipeline for custom deploy.  This is an attempt at a complete blueprint\n",
                    "path": "fragments/app",
                    "name": "scriptit",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOne",
                        "type": "Input",
                        "prompt": "The name of the first build component?",
                        "description": "This is the first component to be deployed.",
                        "validate": "-expr \"regex('^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentOne)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneTags",
                        "type": "Editor",
                        "prompt": "The list of the first component deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneScriptFileReference",
                        "type": "Editor",
                        "prompt": "Enter the first component's deployment script file location?",
                        "description": "This is a input deploy script for first component to be deployed.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentOneScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOnePlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the first component's deploy script place holders?",
                        "description": "This is the potential place holders for script of first component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"ComponentOneScriptFileReference != 'n/a'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOnePlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneScript",
                        "type": "Editor",
                        "prompt": "The first component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of first component to be deployed.",
                        "promptIf": "-expr \"ComponentOneScriptFileReference == 'n/a'\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneScript)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwo",
                        "type": "Input",
                        "prompt": "The name of the second build component?",
                        "description": "This is the second component to be deployed.  If value is 'n/a' no component is specified.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentTwo)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoTags",
                        "type": "Editor",
                        "prompt": "The list of the second component's deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"ComponentTwo != 'n/a'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoScriptFileReference",
                        "type": "Editor",
                        "prompt": "The list of the second component's referenced script?",
                        "description": "This is a input deploy script for second component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"ComponentTwo != 'n/a'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentTwoScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoPlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the second component's place holders?",
                        "description": "This is the potential place holders for script of second component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"ComponentTwo != 'n/a' && ComponentTwoScriptFileReference != 'n/a'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoPlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoScript",
                        "type": "Editor",
                        "prompt": "The second component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of second component to be deployed.",
                        "promptIf": "-expr \"ComponentTwo != 'n/a' && ComponentTwoScriptFileReference == 'n/a'\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoScript)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThree",
                        "type": "Input",
                        "prompt": "The name of the third build component?",
                        "description": "This is the third component to be deployed.  If value is 'n/a' no component is specified.",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentThree)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeTags",
                        "type": "Editor",
                        "prompt": "The list of the third component's deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"ComponentThree != 'n/a'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeScriptFileReference",
                        "type": "Editor",
                        "prompt": "The third component's referenced script?",
                        "description": "This is a input deploy script for third component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"ComponentThree != 'n/a'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentThreeScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreePlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the third component's place holders?",
                        "description": "This is the potential place holders for script of third component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"ComponentThree != 'n/a' &&  && ComponentThreeScriptFileReference != 'n/a'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreePlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeScript",
                        "type": "Editor",
                        "prompt": "The third component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of third component to be deployed.",
                        "promptIf": "-expr \"ComponentThree != 'n/a' && ComponentThreeScriptFileReference == 'n/a'\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeScript)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "tomcat",
                "title": "tomcat",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "WAS Application",
                    "type": "XL",
                    "description": "This handles deployment pipeline for a WAS application.\n",
                    "path": "fragments/app",
                    "name": "tomcat",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "tomcat",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "tomcat",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "was",
                "title": "was",
                "parentName": "app",
                "folders": [],
                "blueprints": [
                  {
                    "title": "WAS Application",
                    "type": "XL",
                    "description": "This handles deployment pipeline for a WAS application.\n",
                    "path": "fragments/app",
                    "name": "was",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "was",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "ContextRoot",
                        "type": "Input",
                        "prompt": "Enter the context root for the application (ie. '/ZionsBancorp').",
                        "validate": "-expr \"regex('^[\\\\\\\\/][\\\\\\\\w_]+$', ContextRoot)\""
                      }
                    ]
                  }
                ]
              }
            ],
            "blueprints": []
          },
          {
            "name": "dictionary",
            "title": "dictionary",
            "parentName": "fragments",
            "folders": [],
            "blueprints": [
              {
                "title": "dictionary",
                "type": "XL",
                "description": "This blueprint creates a dictionary for other blueprints to draw secret values from\n",
                "path": "fragments",
                "name": "dictionary",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "isVisible": false
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "dictionary",
                    "name": "DictionaryName",
                    "type": "Input",
                    "prompt": "Name for the dictionary:"
                  },
                  {
                    "bpKey": "dictionary",
                    "name": "DictionaryDirectoryName",
                    "type": "Input",
                    "prompt": "The directory in XL Deploy where this Dictionary will be created:",
                    "validate": "-expr \"regex('^[^ ]+$', DictionaryDirectoryName)\""
                  },
                  {
                    "bpKey": "dictionary",
                    "name": "DictionaryKeys",
                    "type": "Input",
                    "prompt": "Comma-separated list of secret keys to be created (e.g. key.one,key.two). You will supply the values manually:",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._-]+,)*[a-zA-Z0-9._-]+$', DictionaryKeys)\""
                  }
                ]
              }
            ]
          },
          {
            "name": "migration",
            "title": "migration",
            "parentName": "fragments",
            "folders": [
              {
                "name": "parameters",
                "title": "parameters",
                "parentName": "migration",
                "folders": [],
                "blueprints": [
                  {
                    "title": "APP PARAMETERS",
                    "type": "XL",
                    "description": "This blueprint is for APP PARAMETERS\n",
                    "path": "fragments/migration",
                    "name": "parameters",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "parameters",
                        "name": "BinariesDir",
                        "type": "Input",
                        "prompt": "What is the directory for build artifacts?",
                        "adefault": "target"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "BuildIncludes",
                        "type": "Input",
                        "prompt": "ADO repository paths to detect changes? (Comma delimited list)",
                        "description": "List of ADO repository paths",
                        "adefault": "n/a"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "BuildBranches",
                        "type": "Input",
                        "prompt": "ADO repository branches to target for push or merges? (Comma delimited list)",
                        "description": "List of ADO repository branches",
                        "adefault": "master"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "UseBuildNumber",
                        "type": "Confirm",
                        "prompt": "Built artifacts have build number?  (Yes/No)",
                        "description": "If build type generates artifact with build number/app_version then answer should be yes.",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "parameters",
                        "name": "DeployType",
                        "type": "Select",
                        "prompt": "Select the deploy type:",
                        "adefault": "jboss",
                        "options": [
                          {
                            "label": "JBOSS",
                            "value": "jboss"
                          },
                          {
                            "label": "WAS",
                            "value": "was"
                          },
                          {
                            "label": "SCRIPTIT",
                            "value": "scriptit"
                          },
                          {
                            "label": "MANIFEST_MIGRATE",
                            "value": "manifest_migrate"
                          },
                          {
                            "label": "HELM",
                            "value": "helm"
                          },
                          {
                            "label": "DO_NOTHING",
                            "value": "donothing"
                          }
                        ]
                      },
                      {
                        "bpKey": "parameters",
                        "name": "ReleasePlanType",
                        "type": "Select",
                        "prompt": "Select the XL Release plan type:",
                        "adefault": "noplan",
                        "options": [
                          {
                            "label": "noplan",
                            "value": "noplan"
                          },
                          {
                            "label": "Base Plan",
                            "value": "baseplan"
                          },
                          {
                            "label": "Dynamic Plan",
                            "value": "dynplan"
                          }
                        ]
                      },
                      {
                        "bpKey": "jboss",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "promptIf": "-expr \"DeployType == 'jboss'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]*(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "jboss",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'jboss'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "BaseName",
                        "type": "Input",
                        "prompt": "What is the name of the output component?",
                        "adefault": "-expr \"RepoName + '.war'\"",
                        "promptIf": "-expr \"DeployType == 'was'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "TagNames",
                        "type": "Input",
                        "prompt": "Enter any tags for the output component (Comma-delimited list).",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'was'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                      },
                      {
                        "bpKey": "was",
                        "name": "ContextRoot",
                        "type": "Input",
                        "prompt": "Enter the context root for the application (ie. '/ZionsBancorp').",
                        "promptIf": "-expr \"DeployType == 'was'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\/][\\\\\\\\w_]+$', ContextRoot)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOne",
                        "type": "Input",
                        "prompt": "The name of the first build component?",
                        "description": "This is the first component to be deployed.",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentOne)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneTags",
                        "type": "Editor",
                        "prompt": "The list of the first component deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneScriptFileReference",
                        "type": "Editor",
                        "prompt": "Enter the first component's deployment script file location?",
                        "description": "This is a input deploy script for first component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentOneScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOnePlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the first component's deploy script place holders?",
                        "description": "This is the potential place holders for script of first component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOnePlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentOneScript",
                        "type": "Editor",
                        "prompt": "The first component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of first component to be deployed.",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference == 'n/a')\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneScript)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwo",
                        "type": "Input",
                        "prompt": "The name of the second build component?",
                        "description": "This is the second component to be deployed.  If value is 'n/a' no component is specified.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentTwo)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoTags",
                        "type": "Editor",
                        "prompt": "The list of the second component's deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoScriptFileReference",
                        "type": "Editor",
                        "prompt": "The list of the second component's referenced script?",
                        "description": "This is a input deploy script for second component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentTwoScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoPlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the second component's place holders?",
                        "description": "This is the potential place holders for script of second component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoPlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentTwoScript",
                        "type": "Editor",
                        "prompt": "The second component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of second component to be deployed.",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference == 'n/a')\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoScript)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThree",
                        "type": "Input",
                        "prompt": "The name of the third build component?",
                        "description": "This is the third component to be deployed.  If value is 'n/a' no component is specified.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'scriptit'\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentThree)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeTags",
                        "type": "Editor",
                        "prompt": "The list of the third component's deployment tags?",
                        "description": "This is the component tags.  If field is empty no tags field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeTags)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeScriptFileReference",
                        "type": "Editor",
                        "prompt": "The third component's referenced script?",
                        "description": "This is a input deploy script for third component to be deployed.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentThreeScriptFileReference)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreePlaceholders",
                        "type": "Editor",
                        "prompt": "The list of the third component's place holders?",
                        "description": "This is the potential place holders for script of third component to be deployed. If field is empty no place holder field will be generated.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' &&  && ComponentThreeScriptFileReference != 'n/a')\"",
                        "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreePlaceholders)\""
                      },
                      {
                        "bpKey": "scriptit",
                        "name": "ComponentThreeScript",
                        "type": "Editor",
                        "prompt": "The third component's script for deployment implementation?",
                        "description": "This is the script to run referenced script or full deploy script of third component to be deployed.",
                        "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' && ComponentThreeScriptFileReference == 'n/a')\"",
                        "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeScript)\""
                      },
                      {
                        "bpKey": "manifestmigrate",
                        "name": "ManifestFilePath",
                        "type": "Input",
                        "prompt": "What is the path / name of the deployit-manifest.xml file?",
                        "adefault": "deployit-manifest.xml",
                        "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                      },
                      {
                        "bpKey": "manifestmigrate",
                        "name": "BuildType",
                        "type": "Select",
                        "prompt": "Select the build type:",
                        "adefault": "maven",
                        "options": [
                          {
                            "label": "EMPTY",
                            "value": "empty"
                          },
                          {
                            "label": "MAVEN",
                            "value": "maven"
                          },
                          {
                            "label": "GRADLE",
                            "value": "gradle"
                          },
                          {
                            "label": "ANT",
                            "value": "ant"
                          }
                        ],
                        "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmRepoName",
                        "type": "Input",
                        "prompt": "What is the name of the GIT repository that houses chart?",
                        "description": "The GIT repository that houses the Helm chart.",
                        "adefault": "-expr \".RepoName\"",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^[\\\\\\\\w_-]+$', HelmRepoName)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmFolder",
                        "type": "Input",
                        "prompt": "What is the GIT Repository location for Helm chart?",
                        "description": "The GIT repository path to the helm chart to be modified.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w\\\\\\\\/\\\\\\\\-_]+)$', HelmFolder)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmProperty",
                        "type": "Input",
                        "prompt": "Enter HELM property name to set with build number.",
                        "description": "The property name within the values.yaml that will be modified with build tag.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w.]+)$', HelmProperty)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmEnvironmentList",
                        "type": "Input",
                        "prompt": "Enter HELM comma delimited list of environments.",
                        "description": "The list of enviroments to setup in application XLD for deployment. This is only used if the helm repo name equals selected GIT repository who's pipeline is being executed.",
                        "adefault": "test,stage,prod",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w,]+(,prod))$', HelmEnvironmentList)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmNamespacePrefix",
                        "type": "Input",
                        "prompt": "Enter K8S namespace prefix.",
                        "description": "The K8S cluster namespace prefix that relates to access of service setup.  A environment list value will be appended to prefix value to make up the actual deployment namespace.",
                        "adefault": "n/a",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmNamespacePrefix)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "HelmReleaseNamePrefix",
                        "type": "Input",
                        "prompt": "Enter release namespace prefix.",
                        "description": "The K8S cluster release prefix that relates to tracking release of helm chart.  A environment list value will be appended to prefix value to make up the actual release name.",
                        "adefault": "-expr \"HelmNamespacepPrefix\"",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmReleaseNamePrefix)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "VaultPath",
                        "type": "Input",
                        "prompt": "Enter vault path.",
                        "adefault": "zions-service-framework",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', VaultPath)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "KubeConfigVaultKey",
                        "type": "Input",
                        "prompt": "Enter kube config vault key.",
                        "description": "The name/key to the Vault buffer housing kubeconfig.yaml for cluster access.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', KubeConfigVaultKey)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "RegistryNamespace",
                        "type": "Input",
                        "prompt": "Enter docker registry namespace.",
                        "description": "The Nexus/docker registry namespace of built docker image.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_\\\\\\\\/]+)$', RegistryNamespace)\""
                      },
                      {
                        "bpKey": "helm",
                        "name": "DockerImageName",
                        "type": "Input",
                        "prompt": "Enter docker registry image name.",
                        "description": "The Nexus/Docker registry image name.",
                        "promptIf": "-expr \"DeployType == 'helm'\"",
                        "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', DockerImageName)\""
                      },
                      {
                        "bpKey": "folders",
                        "name": "InitializeFolderPermissions",
                        "type": "Confirm",
                        "prompt": "Initialize XLR project folder permissions?",
                        "description": "If you wish to add initial permissions to XLR top folder then select Yes.",
                        "adefault": "false",
                        "promptIf": "-expr \"ReleasePlanType != 'noplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasDevEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Dev environment?",
                        "adefault": "false",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "DevNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Dev Deploy!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasDevEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', DevNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasTestEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Test environment?",
                        "adefault": "true",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "TestNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Test phase!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', TestNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "TestApprovalGateTasks",
                        "type": "Editor",
                        "prompt": "Input list of <Team><crlf>!  E.G, QA",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                        "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', TestApprovalGateTasks)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasStageEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Stage environment?",
                        "adefault": "true",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "StageNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Stage phase!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', StageNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "StageApprovalGateTasks",
                        "type": "Editor",
                        "prompt": "Input list of <Team><crlf>!  E.G, UAT",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                        "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', StageApprovalGateTasks)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasProdEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Production environments?",
                        "adefault": "true",
                        "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "ProdNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Production phase!",
                        "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasProdEnv)\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', ProdNotificationEmails)\""
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "Environments",
                        "type": "Input",
                        "prompt": "List of environments (comma-separated)",
                        "description": "",
                        "adefault": "Test, Stage, Prod",
                        "promptIf": "-expr \"ReleasePlanType == 'dynplan'\""
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "XLAppName",
                        "type": "Input",
                        "prompt": "What is the name of the application in XL Deploy?",
                        "description": "The name of the application in XL Deploy",
                        "adefault": "-expr \"RepoName\"",
                        "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', XLAppName)\""
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "NotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of deployment",
                        "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', NotificationEmails)\""
                      }
                    ]
                  }
                ]
              }
            ],
            "blueprints": []
          },
          {
            "name": "xlr",
            "title": "xlr",
            "parentName": "fragments",
            "folders": [
              {
                "name": "base-template",
                "title": "base-template",
                "parentName": "xlr",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Base XLR Template",
                    "type": "XL",
                    "description": "This sets up basic XLR template with phases per Environmen.  \n",
                    "path": "fragments/xlr",
                    "name": "base-template",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "basetemplate",
                        "name": "HasDevEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Dev environment?",
                        "adefault": "false"
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "DevNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Dev Deploy!",
                        "promptIf": "-expr \"HasDevEnv\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', DevNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasTestEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Test environment?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "TestNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Test phase!",
                        "promptIf": "-expr \"HasTestEnv\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', TestNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "TestApprovalGateTasks",
                        "type": "Editor",
                        "prompt": "Input list of <Team><crlf>!  E.G, QA",
                        "promptIf": "-expr \"HasTestEnv\"",
                        "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', TestApprovalGateTasks)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasStageEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Stage environment?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "StageNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Stage phase!",
                        "promptIf": "-expr \"HasStageEnv\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', StageNotificationEmails)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "StageApprovalGateTasks",
                        "type": "Editor",
                        "prompt": "Input list of <Team><crlf>!  E.G, UAT",
                        "promptIf": "-expr \"HasStageEnv\"",
                        "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', StageApprovalGateTasks)\""
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "HasProdEnv",
                        "type": "Confirm",
                        "prompt": "Does this have a Production environments?",
                        "adefault": "true"
                      },
                      {
                        "bpKey": "basetemplate",
                        "name": "ProdNotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of Production phase!",
                        "promptIf": "-expr \"HasProdEnv\"",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', ProdNotificationEmails)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "dynamic-template",
                "title": "dynamic-template",
                "parentName": "xlr",
                "folders": [],
                "blueprints": [
                  {
                    "title": "Scripted Dynamic XLR Template",
                    "type": "XL",
                    "description": "This sets up a XLR release template that uses a custom script to create a dynamic release plan.  \n",
                    "path": "fragments/xlr",
                    "name": "dynamic-template",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "dynamictemplate",
                        "name": "Environments",
                        "type": "Input",
                        "prompt": "List of environments (comma-separated)",
                        "description": "",
                        "adefault": "Test, Stage, Prod"
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "XLAppName",
                        "type": "Input",
                        "prompt": "What is the name of the application in XL Deploy?",
                        "description": "The name of the application in XL Deploy",
                        "adefault": "-expr \"RepoName\"",
                        "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', XLAppName)\""
                      },
                      {
                        "bpKey": "dynamictemplate",
                        "name": "NotificationEmails",
                        "type": "Editor",
                        "prompt": "Input list of emails of people that should be notified of completion of deployment",
                        "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', NotificationEmails)\""
                      }
                    ]
                  }
                ]
              },
              {
                "name": "folders",
                "title": "folders",
                "parentName": "xlr",
                "folders": [],
                "blueprints": [
                  {
                    "title": "XLR Folders",
                    "type": "XL",
                    "description": "This blueprint is for XLR Folders\n",
                    "path": "fragments/xlr",
                    "name": "folders",
                    "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                    "outDir": [],
                    "permissions": {
                      "isVisible": false
                    },
                    "dontUseProjectParmForExecution": false,
                    "dontUseRepoParmForExecution": false,
                    "isBuilder": false,
                    "parameters": [
                      {
                        "bpKey": "folders",
                        "name": "InitializeFolderPermissions",
                        "type": "Confirm",
                        "prompt": "Initialize XLR project folder permissions?",
                        "description": "If you wish to add initial permissions to XLR top folder then select Yes.",
                        "adefault": "false"
                      }
                    ]
                  }
                ]
              }
            ],
            "blueprints": []
          }
        ],
        "blueprints": []
      },
      {
        "name": "integrationplatforms",
        "title": "integrationplatforms",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "create-project",
            "title": "create-project",
            "parentName": "integrationplatforms",
            "folders": [],
            "blueprints": [
              {
                "title": "Create IntegrationPlatforms project",
                "type": "XL",
                "description": "Create IntegrationPlatforms project\n",
                "path": "integrationplatforms",
                "name": "create-project",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "allowedProjects": [
                    "IntegrationPlatforms",
                    "EDA",
                    "DigitalBanking"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "createproject",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Azure DevOps project area name used for this blueprint",
                    "description": "Azure DevOps project area name used for this blueprint"
                  },
                  {
                    "bpKey": "createproject",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "Azure DevOps repository name used for this blueprint",
                    "description": "Azure DevOps repository name used for this blueprint",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._-]+,)*[a-zA-Z0-9._-]+$', RepoName) && strlen(RepoName) <= 70\""
                  },
                  {
                    "bpKey": "createproject",
                    "name": "PlatformType",
                    "type": "Select",
                    "prompt": "Select the IntegrationPlatforms platform type",
                    "adefault": "apigee",
                    "options": [
                      {
                        "label": "APIGEE",
                        "value": "apigee"
                      },
                      {
                        "label": "ACE",
                        "value": "ace"
                      }
                    ]
                  },
                  {
                    "bpKey": "createproject",
                    "name": "ApigeeBuildType",
                    "type": "Select",
                    "prompt": "Select the IntegrationPlatforms Apigee build type",
                    "adefault": "apiproxy",
                    "options": [
                      {
                        "label": "APIPROXY",
                        "value": "apiproxy"
                      },
                      {
                        "label": "CONFIG",
                        "value": "config"
                      },
                      {
                        "label": "SHAREDFLOW",
                        "value": "sharedflow"
                      }
                    ],
                    "promptIf": "-expr \"PlatformType == 'apigee'\""
                  },
                  {
                    "bpKey": "createproject",
                    "name": "AceBuildType",
                    "type": "Select",
                    "prompt": "Select the IntegrationPlatforms Ace build type",
                    "adefault": "appmodule",
                    "options": [
                      {
                        "label": "APPMODULE",
                        "value": "appmodule"
                      },
                      {
                        "label": "CONFIGMODULE",
                        "value": "configmodule"
                      },
                      {
                        "label": "JAVAMODULE",
                        "value": "javamodule"
                      },
                      {
                        "label": "MAVENPLUGIN",
                        "value": "mavenplugin"
                      },
                      {
                        "label": "POLICYMODULE",
                        "value": "policymodule"
                      },
                      {
                        "label": "SHAREDLIBMODULE",
                        "value": "sharedlibmodule"
                      },
                      {
                        "label": "STATICLIBMODULE",
                        "value": "staticlibmodule"
                      }
                    ],
                    "promptIf": "-expr \"PlatformType == 'ace'\""
                  },
                  {
                    "bpKey": "createproject",
                    "name": "InitialVersionPrefix",
                    "type": "Input",
                    "prompt": "Azure DevOps initial version prefix",
                    "description": "Azure DevOps initial version prefix",
                    "adefault": "1.0.0.0",
                    "validate": "-expr \"regex('^\\\\\\\\d*.\\\\\\\\d*.\\\\\\\\d*.\\\\\\\\d*$', InitialVersionPrefix)\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3ATBD"
              }
            ]
          },
          {
            "name": "create-repository",
            "title": "create-repository",
            "parentName": "integrationplatforms",
            "folders": [],
            "blueprints": [
              {
                "title": "Create Azure DevOps git repository",
                "type": "XL",
                "description": "Create Azure DevOps git repository\n",
                "path": "integrationplatforms",
                "name": "create-repository",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "RepoName"
                ],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "IntegrationPlatforms",
                    "EDA",
                    "DigitalBanking"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "createrepository",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "Azure DevOps project area name used for this blueprint",
                    "description": "Azure DevOps project area name used for this blueprint"
                  },
                  {
                    "bpKey": "createrepository",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "Azure DevOps repository name used for this blueprint",
                    "description": "Azure DevOps repository name used for this blueprint",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._-]+,)*[a-zA-Z0-9._-]+$', RepoName) && strlen(RepoName) <= 70\""
                  },
                  {
                    "bpKey": "createrepository",
                    "name": "CreateProject",
                    "type": "Confirm",
                    "prompt": "Would you like to create the IntegrationPlatforms project?",
                    "description": "Create the IntegrationPlatforms project",
                    "adefault": "true"
                  },
                  {
                    "bpKey": "createrepository",
                    "name": "PlatformType",
                    "type": "Select",
                    "prompt": "Select the IntegrationPlatforms platform type",
                    "adefault": "apigee",
                    "options": [
                      {
                        "label": "APIGEE",
                        "value": "apigee"
                      },
                      {
                        "label": "ACE",
                        "value": "ace"
                      }
                    ],
                    "promptIf": "-expr \"CreateProject\""
                  },
                  {
                    "bpKey": "createrepository",
                    "name": "ApigeeBuildType",
                    "type": "Select",
                    "prompt": "Select the IntegrationPlatforms Apigee build type",
                    "adefault": "apiproxy",
                    "options": [
                      {
                        "label": "APIPROXY",
                        "value": "apiproxy"
                      },
                      {
                        "label": "CONFIG",
                        "value": "config"
                      },
                      {
                        "label": "SHAREDFLOW",
                        "value": "sharedflow"
                      }
                    ],
                    "promptIf": "-expr \"PlatformType == 'apigee' && CreateProject\""
                  },
                  {
                    "bpKey": "createrepository",
                    "name": "AceBuildType",
                    "type": "Select",
                    "prompt": "Select the IntegrationPlatforms Ace build type",
                    "adefault": "appmodule",
                    "options": [
                      {
                        "label": "APPMODULE",
                        "value": "appmodule"
                      },
                      {
                        "label": "CONFIGMODULE",
                        "value": "configmodule"
                      },
                      {
                        "label": "JAVAMODULE",
                        "value": "javamodule"
                      },
                      {
                        "label": "MAVENPLUGIN",
                        "value": "mavenplugin"
                      },
                      {
                        "label": "POLICYMODULE",
                        "value": "policymodule"
                      },
                      {
                        "label": "SHAREDLIBMODULE",
                        "value": "sharedlibmodule"
                      },
                      {
                        "label": "STATICLIBMODULE",
                        "value": "staticlibmodule"
                      }
                    ],
                    "promptIf": "-expr \"PlatformType == 'ace' && CreateProject\""
                  },
                  {
                    "bpKey": "createrepository",
                    "name": "InitialVersionPrefix",
                    "type": "Input",
                    "prompt": "Azure DevOps initial version prefix",
                    "description": "Azure DevOps initial version prefix",
                    "adefault": "1.0.0.0",
                    "promptIf": "-expr \"CreateProject\"",
                    "validate": "-expr \"regex('^\\\\\\\\d*.\\\\\\\\d*.\\\\\\\\d*.\\\\\\\\d*$', InitialVersionPrefix)\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3ATBD",
                "commitPatterns": "dontdoit"
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "migration",
        "title": "migration",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "project-app-migration",
            "title": "project-app-migration",
            "parentName": "migration",
            "folders": [],
            "blueprints": [
              {
                "title": "Project APP Migration",
                "type": "XL",
                "description": "A set of deploy types to be used at the application / repo migration level.\n",
                "path": "migration",
                "name": "project-app-migration",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "cacheKey": [
                  "RepoName",
                  "AppArea"
                ],
                "permissions": {
                  "isVisible": false
                },
                "selectedProjectParm": "ProjectName",
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectappmigration",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?",
                    "description": "The ADO Project used to place generated pipeline code"
                  },
                  {
                    "bpKey": "projectappmigration",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO repository?",
                    "description": "List of available repositories."
                  },
                  {
                    "bpKey": "projectappmigration",
                    "name": "AppArea",
                    "type": "Input",
                    "prompt": "What is the application area or sub-directories?",
                    "description": "If 'n/a' then there will be no sub-directories for output XL tool references or reference to ADO pipeline templates.",
                    "adefault": "n/a",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', AppArea)\""
                  },
                  {
                    "bpKey": "projectappmigration",
                    "name": "ADOTemplateRepository",
                    "type": "Input",
                    "prompt": "Enter ADO repository in your project containing pipeline templates.",
                    "description": "The ADO repository location of ADO pipeline templates.",
                    "adefault": "devops"
                  },
                  {
                    "bpKey": "projectappmigration",
                    "name": "TemplateFolder",
                    "type": "Input",
                    "prompt": "Enter the folder in the above repository that contains pipeline templates.",
                    "description": "The sub-directories relate to repository output folders.  This is so common builds can have common template outside of XL application area.",
                    "adefault": "-expr \"AppArea\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', TemplateFolder)\""
                  },
                  {
                    "bpKey": "projectappmigration",
                    "name": "BuildType",
                    "type": "Input",
                    "prompt": "The build type used by the pipeline",
                    "adefault": "maven"
                  },
                  {
                    "bpKey": "projectappmigration",
                    "name": "NexusIQAppId",
                    "type": "Input",
                    "prompt": "The Application Id to be used by the Nexus IQ scan",
                    "adefault": "-expr \"RepoName\""
                  },
                  {
                    "bpKey": "projectappmigration",
                    "name": "NexusIQScanTargets",
                    "type": "Input",
                    "prompt": "The scan targets to be used by the Nexus IQ scan",
                    "adefault": "**/*.war"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BinariesDir",
                    "type": "Input",
                    "prompt": "What is the directory for build artifacts?",
                    "adefault": "target"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BuildIncludes",
                    "type": "Input",
                    "prompt": "ADO repository paths to detect changes? (Comma delimited list)",
                    "description": "List of ADO repository paths",
                    "adefault": "n/a"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "BuildBranches",
                    "type": "Input",
                    "prompt": "ADO repository branches to target for push or merges? (Comma delimited list)",
                    "description": "List of ADO repository branches",
                    "adefault": "master"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "UseBuildNumber",
                    "type": "Confirm",
                    "prompt": "Built artifacts have build number?  (Yes/No)",
                    "description": "If build type generates artifact with build number/app_version then answer should be yes.",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "parameters",
                    "name": "DeployType",
                    "type": "Select",
                    "prompt": "Select the deploy type:",
                    "adefault": "jboss",
                    "options": [
                      {
                        "label": "JBOSS",
                        "value": "jboss"
                      },
                      {
                        "label": "WAS",
                        "value": "was"
                      },
                      {
                        "label": "SCRIPTIT",
                        "value": "scriptit"
                      },
                      {
                        "label": "MANIFEST_MIGRATE",
                        "value": "manifest_migrate"
                      },
                      {
                        "label": "HELM",
                        "value": "helm"
                      },
                      {
                        "label": "JWS/Tomcat",
                        "value": "tomcat"
                      },
                      {
                        "label": "DO_NOTHING",
                        "value": "donothing"
                      },
                      {
                        "label": "dotnet",
                        "value": "dotnet"
                      }
                    ]
                  },
                  {
                    "bpKey": "parameters",
                    "name": "ReleasePlanType",
                    "type": "Select",
                    "prompt": "Select the XL Release plan type:",
                    "adefault": "noplan",
                    "options": [
                      {
                        "label": "noplan",
                        "value": "noplan"
                      },
                      {
                        "label": "Base Plan",
                        "value": "baseplan"
                      },
                      {
                        "label": "Dynamic Plan",
                        "value": "dynplan"
                      }
                    ]
                  },
                  {
                    "bpKey": "jboss",
                    "name": "BaseName",
                    "type": "Input",
                    "prompt": "What is the name of the output component?",
                    "adefault": "-expr \"RepoName + '.war'\"",
                    "promptIf": "-expr \"DeployType == 'jboss'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w-_]*(.war|.ear)$', BaseName)\""
                  },
                  {
                    "bpKey": "jboss",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'jboss'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "was",
                    "name": "BaseName",
                    "type": "Input",
                    "prompt": "What is the name of the output component?",
                    "adefault": "-expr \"RepoName + '.war'\"",
                    "promptIf": "-expr \"DeployType == 'was'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                  },
                  {
                    "bpKey": "was",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'was'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "was",
                    "name": "ContextRoot",
                    "type": "Input",
                    "prompt": "Enter the context root for the application (ie. '/ZionsBancorp').",
                    "promptIf": "-expr \"DeployType == 'was'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\/][\\\\\\\\w_]+$', ContextRoot)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOne",
                    "type": "Input",
                    "prompt": "The name of the first build component?",
                    "description": "This is the first component to be deployed.",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentOne)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOneTags",
                    "type": "Editor",
                    "prompt": "The list of the first component deployment tags?",
                    "description": "This is the component tags.  If field is empty no tags field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneTags)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOneScriptFileReference",
                    "type": "Editor",
                    "prompt": "Enter the first component's deployment script file location?",
                    "description": "This is a input deploy script for first component to be deployed.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentOneScriptFileReference)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOnePlaceholders",
                    "type": "Editor",
                    "prompt": "The list of the first component's deploy script place holders?",
                    "description": "This is the potential place holders for script of first component to be deployed. If field is empty no place holder field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOnePlaceholders)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentOneScript",
                    "type": "Editor",
                    "prompt": "The first component's script for deployment implementation?",
                    "description": "This is the script to run referenced script or full deploy script of first component to be deployed.",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentOneScriptFileReference == 'n/a')\"",
                    "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentOneScript)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwo",
                    "type": "Input",
                    "prompt": "The name of the second build component?",
                    "description": "This is the second component to be deployed.  If value is 'n/a' no component is specified.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentTwo)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoTags",
                    "type": "Editor",
                    "prompt": "The list of the second component's deployment tags?",
                    "description": "This is the component tags.  If field is empty no tags field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoTags)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoScriptFileReference",
                    "type": "Editor",
                    "prompt": "The list of the second component's referenced script?",
                    "description": "This is a input deploy script for second component to be deployed.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentTwoScriptFileReference)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoPlaceholders",
                    "type": "Editor",
                    "prompt": "The list of the second component's place holders?",
                    "description": "This is the potential place holders for script of second component to be deployed. If field is empty no place holder field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoPlaceholders)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentTwoScript",
                    "type": "Editor",
                    "prompt": "The second component's script for deployment implementation?",
                    "description": "This is the script to run referenced script or full deploy script of second component to be deployed.",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentTwo != 'n/a' && ComponentTwoScriptFileReference == 'n/a')\"",
                    "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentTwoScript)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThree",
                    "type": "Input",
                    "prompt": "The name of the third build component?",
                    "description": "This is the third component to be deployed.  If value is 'n/a' no component is specified.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'scriptit'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^[a-zA-Z0-9_]+(.war|.ear|.zip|.jar|.dll|.exe|.lib)$',ComponentThree)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreeTags",
                    "type": "Editor",
                    "prompt": "The list of the third component's deployment tags?",
                    "description": "This is the component tags.  If field is empty no tags field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeTags)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreeScriptFileReference",
                    "type": "Editor",
                    "prompt": "The third component's referenced script?",
                    "description": "This is a input deploy script for third component to be deployed.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\S]+)$',ComponentThreeScriptFileReference)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreePlaceholders",
                    "type": "Editor",
                    "prompt": "The list of the third component's place holders?",
                    "description": "This is the potential place holders for script of third component to be deployed. If field is empty no place holder field will be generated.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' &&  && ComponentThreeScriptFileReference != 'n/a')\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|([\\\\\\\\S]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreePlaceholders)\""
                  },
                  {
                    "bpKey": "scriptit",
                    "name": "ComponentThreeScript",
                    "type": "Editor",
                    "prompt": "The third component's script for deployment implementation?",
                    "description": "This is the script to run referenced script or full deploy script of third component to be deployed.",
                    "promptIf": "-expr \"(DeployType == 'scriptit') && (ComponentThree != 'n/a' && ComponentThreeScriptFileReference == 'n/a')\"",
                    "validate": "-expr \"regex('([\\\\\\\\S ]+(\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\S))*',ComponentThreeScript)\""
                  },
                  {
                    "bpKey": "manifestmigrate",
                    "name": "ManifestFilePath",
                    "type": "Input",
                    "prompt": "What is the path / name of the deployit-manifest.xml file?",
                    "adefault": "deployit-manifest.xml",
                    "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                  },
                  {
                    "bpKey": "manifestmigrate",
                    "name": "BuildType",
                    "type": "Select",
                    "prompt": "Select the build type:",
                    "adefault": "maven",
                    "options": [
                      {
                        "label": "EMPTY",
                        "value": "empty"
                      },
                      {
                        "label": "MAVEN",
                        "value": "maven"
                      },
                      {
                        "label": "GRADLE",
                        "value": "gradle"
                      },
                      {
                        "label": "ANT",
                        "value": "ant"
                      }
                    ],
                    "promptIf": "-expr \"DeployType == 'manifest_migrate'\""
                  },
                  {
                    "bpKey": "tomcat",
                    "name": "BaseName",
                    "type": "Input",
                    "prompt": "What is the name of the output component?",
                    "adefault": "-expr \"RepoName + '.war'\"",
                    "promptIf": "-expr \"DeployType == 'tomcat'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w-_]+(.war|.ear)$', BaseName)\""
                  },
                  {
                    "bpKey": "tomcat",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'tomcat'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmRepoName",
                    "type": "Input",
                    "prompt": "What is the name of the GIT repository that houses chart?",
                    "description": "The GIT repository that houses the Helm chart.",
                    "adefault": "-expr \".RepoName\"",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^[\\\\\\\\w_-]+$', HelmRepoName)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmFolder",
                    "type": "Input",
                    "prompt": "What is the GIT Repository location for Helm chart?",
                    "description": "The GIT repository path to the helm chart to be modified.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w\\\\\\\\/\\\\\\\\-_]+)$', HelmFolder)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmProperty",
                    "type": "Input",
                    "prompt": "Enter HELM property name to set with build number.",
                    "description": "The property name within the values.yaml that will be modified with build tag.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w.]+)$', HelmProperty)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmEnvironmentList",
                    "type": "Input",
                    "prompt": "Enter HELM comma delimited list of environments.",
                    "description": "The list of enviroments to setup in application XLD for deployment. This is only used if the helm repo name equals selected GIT repository who's pipeline is being executed.",
                    "adefault": "test,stage,prod",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w,]+(,prod))$', HelmEnvironmentList)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmNamespacePrefix",
                    "type": "Input",
                    "prompt": "Enter K8S namespace prefix.",
                    "description": "The K8S cluster namespace prefix that relates to access of service setup.  A environment list value will be appended to prefix value to make up the actual deployment namespace.",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmNamespacePrefix)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "HelmReleaseNamePrefix",
                    "type": "Input",
                    "prompt": "Enter release namespace prefix.",
                    "description": "The K8S cluster release prefix that relates to tracking release of helm chart.  A environment list value will be appended to prefix value to make up the actual release name.",
                    "adefault": "-expr \"HelmNamespacepPrefix\"",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', HelmReleaseNamePrefix)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "VaultPath",
                    "type": "Input",
                    "prompt": "Enter vault path.",
                    "adefault": "zions-service-framework",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', VaultPath)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "KubeConfigVaultKey",
                    "type": "Input",
                    "prompt": "Enter kube config vault key.",
                    "description": "The name/key to the Vault buffer housing kubeconfig.yaml for cluster access.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', KubeConfigVaultKey)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "RegistryNamespace",
                    "type": "Input",
                    "prompt": "Enter docker registry namespace.",
                    "description": "The Nexus/docker registry namespace of built docker image.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_\\\\\\\\/]+)$', RegistryNamespace)\""
                  },
                  {
                    "bpKey": "helm",
                    "name": "DockerImageName",
                    "type": "Input",
                    "prompt": "Enter docker registry image name.",
                    "description": "The Nexus/Docker registry image name.",
                    "promptIf": "-expr \"DeployType == 'helm'\"",
                    "validate": "-expr \"regex('^([\\\\\\\\w-_]+)$', DockerImageName)\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "backupdir",
                    "type": "Confirm",
                    "prompt": "Do you need a backup for the new zipfiles on your server?",
                    "description": "please provide the back dir name eg: D:\\backupdir",
                    "adefault": "false",
                    "promptIf": "-expr \"DeployType == 'dotnet'\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "backupdir_path",
                    "type": "Input",
                    "prompt": "please provide the absolute path od backup dir on server",
                    "description": "please provide the back dir name eg: D:\\backupdir",
                    "adefault": "n/a",
                    "promptIf": "-expr \"(DeployType == 'dotnet') && (backupdir == true)\""
                  },
                  {
                    "bpKey": "dotnet",
                    "name": "TagNames",
                    "type": "Input",
                    "prompt": "Enter any tags for the output component (Comma-delimited list).",
                    "adefault": "n/a",
                    "promptIf": "-expr \"DeployType == 'dotnet'\"",
                    "validate": "-expr \"regex('^(n\\\\\\\\/a)$|^([\\\\\\\\w_]+,{0,1})*$', TagNames)\""
                  },
                  {
                    "bpKey": "folders",
                    "name": "InitializeFolderPermissions",
                    "type": "Confirm",
                    "prompt": "Initialize XLR project folder permissions?",
                    "description": "If you wish to add initial permissions to XLR top folder then select Yes.",
                    "adefault": "false",
                    "promptIf": "-expr \"ReleasePlanType != 'noplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasDevEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Dev environment?",
                    "adefault": "false",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "DevNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Dev Deploy!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasDevEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', DevNotificationEmails)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasTestEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Test environment?",
                    "adefault": "true",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "TestNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Test phase!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', TestNotificationEmails)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "TestApprovalGateTasks",
                    "type": "Editor",
                    "prompt": "Input list of <Team><crlf>!  E.G, QA",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasTestEnv)\"",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', TestApprovalGateTasks)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasStageEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Stage environment?",
                    "adefault": "true",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "StageNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Stage phase!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', StageNotificationEmails)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "StageApprovalGateTasks",
                    "type": "Editor",
                    "prompt": "Input list of <Team><crlf>!  E.G, UAT",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasStageEnv)\"",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._]+([a-zA-Z0-9]\\\\\\\\r\\\\\\\\n|[a-zA-Z0-9]\\\\\\\\n|[a-zA-Z0-9]))*$', StageApprovalGateTasks)\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "HasProdEnv",
                    "type": "Confirm",
                    "prompt": "Does this have a Production environments?",
                    "adefault": "true",
                    "promptIf": "-expr \"ReleasePlanType == 'baseplan'\""
                  },
                  {
                    "bpKey": "basetemplate",
                    "name": "ProdNotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of Production phase!",
                    "promptIf": "-expr \"(ReleasePlanType == 'baseplan') && (HasProdEnv)\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', ProdNotificationEmails)\""
                  },
                  {
                    "bpKey": "dynamictemplate",
                    "name": "Environments",
                    "type": "Input",
                    "prompt": "List of environments (comma-separated)",
                    "description": "",
                    "adefault": "Test, Stage, Prod",
                    "promptIf": "-expr \"ReleasePlanType == 'dynplan'\""
                  },
                  {
                    "bpKey": "dynamictemplate",
                    "name": "XLAppName",
                    "type": "Input",
                    "prompt": "What is the name of the application in XL Deploy?",
                    "description": "The name of the application in XL Deploy",
                    "adefault": "-expr \"RepoName\"",
                    "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                    "validate": "-expr \"regex('(^n\\\\\\\\/a$)|(^[0-9a-zA-Z][0-9a-zA-Z\\\\\\\\/ _-]*[0-9a-zA-Z]{0,1}$)', XLAppName)\""
                  },
                  {
                    "bpKey": "dynamictemplate",
                    "name": "NotificationEmails",
                    "type": "Editor",
                    "prompt": "Input list of emails of people that should be notified of completion of deployment",
                    "promptIf": "-expr \"ReleasePlanType == 'dynplan'\"",
                    "validate": "-expr \"regex('([a-zA-Z0-9]+.[a-zA-Z0-9]+@zionsbancorp.co(m\\\\\\\\r\\\\\\\\n|m\\\\\\\\n|m))+', NotificationEmails)\""
                  }
                ]
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "provisioning",
        "title": "provisioning",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "project-devops",
            "title": "project-devops",
            "parentName": "provisioning",
            "folders": [],
            "blueprints": [
              {
                "title": "Setup Self-service",
                "type": "XL",
                "description": "This defines initial project pipeline setup, including:  It creates project 'devops' repos; Creates projects blueprint pipeline execution ability;\nAnd, adding required web hooks and service connections. \n",
                "path": "provisioning",
                "name": "project-devops",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "ProjectName"
                ],
                "outRepoName": "project_devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": true,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectdevops",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?"
                  },
                  {
                    "bpKey": "projectdevops",
                    "name": "ConsumerUrl",
                    "type": "Select",
                    "prompt": "What is the web hook Zions endpoint for microservices?",
                    "adefault": "https://releaseengineeringprovisionerprod-zionsbancorporation.msappproxy.net",
                    "options": [
                      {
                        "label": "ADO Micro-services CS",
                        "value": "https://releaseengineeringprovisionerprod-zionsbancorporation.msappproxy.net"
                      },
                      {
                        "label": "ADO Micro-services TestQA",
                        "value": "https://releaseengineeringprovisioner-zionsbancorporation.msappproxy.net"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectdevops",
                    "name": "XldUrl",
                    "type": "Select",
                    "prompt": "What is the XL Deploy URL?",
                    "adefault": "https://xldeploy.cs.zionsbank.com",
                    "options": [
                      {
                        "label": "XLD CS",
                        "value": "https://xldeploy.cs.zionsbank.com"
                      },
                      {
                        "label": "XLD TestQA",
                        "value": "https://xldeploy.testqa.zionsbank.com"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectdevops",
                    "name": "NexusUrl",
                    "type": "Select",
                    "prompt": "What is the Nexus URL?",
                    "adefault": "https://nexus.cs.zionsbank.com",
                    "options": [
                      {
                        "label": "Nexus CS",
                        "value": "https://nexus.cs.zionsbank.com"
                      },
                      {
                        "label": "Nexus TestQA",
                        "value": "https://nexus.testqa.zionsbank.com"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectdevops",
                    "name": "NexusIQUrl",
                    "type": "Select",
                    "prompt": "What is the Nexus IQ URL?",
                    "adefault": "https://nexus.cs.zionsbank.com/iqserver",
                    "options": [
                      {
                        "label": "Nexus IQ CS",
                        "value": "https://nexus.cs.zionsbank.com/iqserver"
                      },
                      {
                        "label": "Nexus IQ TestQA",
                        "value": "https://nexus.testqa.zionsbank.com/iqserver"
                      }
                    ]
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Provisioning%3A+Setup+Self-service"
              }
            ]
          },
          {
            "name": "project-dts-admin",
            "title": "project-dts-admin",
            "parentName": "provisioning",
            "folders": [],
            "blueprints": [
              {
                "title": "Setup DTS Project Admin",
                "type": "XL",
                "description": "This enables DTS to run Self-service on project without enabling feature on project. \n",
                "path": "provisioning",
                "name": "project-dts-admin",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "ProjectName"
                ],
                "outRepoName": "project_devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": true,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectdtsadmin",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?"
                  },
                  {
                    "bpKey": "projectdtsadmin",
                    "name": "ConsumerUrl",
                    "type": "Select",
                    "prompt": "What is the web hook Zions endpoint for microservices?",
                    "adefault": "https://releaseengineeringprovisionerprod-zionsbancorporation.msappproxy.net",
                    "options": [
                      {
                        "label": "Micro-service CS",
                        "value": "https://releaseengineeringprovisionerprod-zionsbancorporation.msappproxy.net"
                      },
                      {
                        "label": "Micro-service TestQA",
                        "value": "https://releaseengineeringprovisioner-zionsbancorporation.msappproxy.net"
                      }
                    ]
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Provisioning%3A+Setup+DTS+Project+Admin"
              }
            ]
          },
          {
            "name": "project-provision",
            "title": "project-provision",
            "parentName": "provisioning",
            "folders": [],
            "blueprints": [
              {
                "title": "project-provision",
                "type": "XL",
                "description": "provisions a projects pipeline required service connection, webhooks and pipeline pools.\n",
                "path": "provisioning",
                "name": "project-provision",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "isVisible": false
                },
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectprovision",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the devops repo?"
                  },
                  {
                    "bpKey": "projectprovision",
                    "name": "ConsumerUrl",
                    "type": "Input",
                    "prompt": "What is the Zions endpoint for microservice?"
                  },
                  {
                    "bpKey": "projectprovision",
                    "name": "XldUrl",
                    "type": "Input",
                    "prompt": "What is the XL Deploy URL?"
                  },
                  {
                    "bpKey": "projectprovision",
                    "name": "NexusUrl",
                    "type": "Input",
                    "prompt": "What is the Nexus URL?"
                  },
                  {
                    "bpKey": "projectprovision",
                    "name": "NexusIQUrl",
                    "type": "Input",
                    "prompt": "What is the Nexus IQ URL?"
                  }
                ]
              }
            ]
          },
          {
            "name": "project-runblueprints",
            "title": "project-runblueprints",
            "parentName": "provisioning",
            "folders": [],
            "blueprints": [
              {
                "title": "Setup Run-blueprints",
                "type": "XL",
                "description": "This defines initial project pipeline setup, including:  It will update ado pipeline code to run blueprints. \n",
                "path": "provisioning",
                "name": "project-runblueprints",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "outRepoName": "devops",
                "permissions": {
                  "allowedProjects": [
                    "DTS"
                  ]
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": true,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectrunblueprints",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO project?"
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Provisioning%3A+Setup+Self-service",
                "commitPatterns": ".pipeline/ado"
              }
            ]
          },
          {
            "name": "repo",
            "title": "repo",
            "parentName": "provisioning",
            "folders": [],
            "blueprints": [
              {
                "title": "Create GIT Repository",
                "type": "XL",
                "description": "This defines initial repo pipeline setup.\n",
                "path": "provisioning",
                "name": "repo",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [
                  "RepoName"
                ],
                "outRepoName": "devops",
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "repo",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the repo?"
                  },
                  {
                    "bpKey": "repo",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "What is the name of the repo?",
                    "validate": "-expr \"regex('^([a-zA-Z0-9._-]+,)*[a-zA-Z0-9._-]+$', RepoName) && strlen(RepoName) <= 70\""
                  }
                ],
                "documentationUrl": "https://zionsconfluence.cs.zionsbank.com/display/SCM/DS%3A+COE%3A+Blueprints%3A+Provisioning%3A+Create+GIT+Repository",
                "commitPatterns": "dontdoit"
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "webcms",
        "title": "webcms",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "project-aem",
            "title": "project-aem",
            "parentName": "webcms",
            "folders": [],
            "blueprints": [
              {
                "title": "Project AEM",
                "type": "XL",
                "description": "This blueprint deploys an AEM project generated with maven, to an AEM environment.\nXL Deploy does the provisioning and deployment, while XL Release orchestrates everything.\n",
                "path": "webcms",
                "name": "project-aem",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "permissions": {
                  "allowedProjects": [
                    "WebCMS",
                    "CARM"
                  ]
                },
                "selectedRepoParm": "RepoName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "projectaem",
                    "name": "BaseName",
                    "type": "Input",
                    "prompt": "What is the base name of the AEM project?"
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "AEMVersion",
                    "type": "Select",
                    "prompt": "Select the AEM version for this AEM project?",
                    "adefault": "6.4",
                    "options": [
                      "6.4"
                    ]
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "RepoName",
                    "type": "Input",
                    "prompt": "What is the name of the ADO repository?"
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "TagNamePrefix",
                    "type": "Select",
                    "prompt": "Select tag name prefix for XL Deploy:",
                    "adefault": "charlie",
                    "options": [
                      {
                        "label": "CHARLIE (Public Websites)",
                        "value": "charlie"
                      },
                      {
                        "label": "BRAVO (NAOP)",
                        "value": "bravo"
                      }
                    ]
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "HasAppComponent",
                    "type": "Confirm",
                    "prompt": "Does this AEM project have an application Component?",
                    "adefault": "true"
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "AppComponent",
                    "type": "Input",
                    "prompt": "What is the application component name?",
                    "description": "This is the name of the built archive without the '-<version_string>.zip' suffix. Ex. 'zionsdirect-app'",
                    "promptIf": "-expr \"HasAppComponent\""
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "HasHTTPDComponent",
                    "type": "Confirm",
                    "prompt": "Does this AEM project have an httpd Component?",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "HTTPDComponent",
                    "type": "Input",
                    "prompt": "What is the httpd component name?",
                    "description": "This is the name of the built archive without the '-<version_string>.zip' suffix. Ex. 'zionsdirect-httpd'",
                    "promptIf": "-expr \"HasHTTPDComponent\""
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "HasTests",
                    "type": "Confirm",
                    "prompt": "Does this AEM project have tests to publish?",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "Tests",
                    "type": "Input",
                    "prompt": "What is the tests directory name?",
                    "description": "This is the name of the tests directory. Ex. 'e2e'",
                    "adefault": "e2e",
                    "promptIf": "-expr \"HasTests\""
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "UseAdditionalMavenOptions",
                    "type": "Confirm",
                    "prompt": "Does this maven build use additional options?",
                    "adefault": "false"
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "AdditionalMavenOptions",
                    "type": "Input",
                    "prompt": "What are the additional maven options? Ex: -PmyProfile",
                    "adefault": "-Pcompile-scss",
                    "promptIf": "-expr \"UseAdditionalMavenOptions\""
                  },
                  {
                    "bpKey": "projectaem",
                    "name": "StageApproveTeam",
                    "type": "Input",
                    "prompt": "What is the team name in XL Release for the Stage Approve Gate?",
                    "description": "This is the team name in XL Release to group users to a task. Ex. 'UAT-<AEM_base name>'"
                  }
                ],
                "pullRequestReviewers": "@me"
              }
            ]
          }
        ],
        "blueprints": []
      },
      {
        "name": "zeus",
        "title": "zeus",
        "parentName": "zions-blueprints",
        "folders": [
          {
            "name": "provision-release",
            "title": "provision-release",
            "parentName": "zeus",
            "folders": [],
            "blueprints": [
              {
                "title": "Zeus Setup Release",
                "type": "XL",
                "description": "enables Zeus to setup new release branches and provision test beds.\n",
                "path": "zeus",
                "name": "provision-release",
                "repoUrl": "https://dev.azure.com/zionseto/DTS/_git/zions-blueprints",
                "outDir": [],
                "outRepoName": "Zeus",
                "permissions": {
                  "isVisible": false
                },
                "selectedProjectParm": "ProjectName",
                "dontUseProjectParmForExecution": false,
                "dontUseRepoParmForExecution": false,
                "isBuilder": false,
                "parameters": [
                  {
                    "bpKey": "provisionrelease",
                    "name": "ProjectName",
                    "type": "Input",
                    "prompt": "What is the name of the project owning the release?"
                  },
                  {
                    "bpKey": "provisionrelease",
                    "name": "OldReleaseId",
                    "type": "Input",
                    "prompt": "What is the Old Release ID.  E.G. 2104"
                  },
                  {
                    "bpKey": "provisionrelease",
                    "name": "NewReleaseId",
                    "type": "Input",
                    "prompt": "What is the New Release ID.  E.G. 2105"
                  }
                ]
              }
            ]
          }
        ],
        "blueprints": []
      }
    ],
    "blueprints": []
  },
  "version": "1",
  "id": "637e29c3f6709b178d296bf5"
}